



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.0
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : csharp_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace Multimedia
{

/// <summary>
/// PageDataKey
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PageDataKey : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required string PageKey
    private String m_PageKey;

    /// <summary>
    /// PageKey
    /// </summary>
    public String PageKey
    {
        get { return this.m_PageKey; }
        set { this.m_PageKey = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata PageKey_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PageDataKey");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Multimedia." + meta.name;


            // PageKey
            PageKey_meta.name = "PageKey";
            PageKey_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int PageKey = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_PageKey = "PageKey";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PageDataKey()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_PageKey = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Multimedia.PageDataKey cloned = new global::Multimedia.PageDataKey();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Multimedia.PageDataKey that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string PageKey
        that.PageKey = this.PageKey;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PageKey = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"PageKey\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.PageKey:  // id=1
                    this.PageKey = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.PageKey, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.PageKey))
        {
            ok = false;
            missingFieldName = "PageKey";
            missingFieldId = __ordinals.PageKey;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PageDataKey))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PageKey, Schema.PageKey_meta);
            writer.WriteString(m_PageKey);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="PageKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PageDataKey that = obj as PageDataKey;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PageDataKey other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PageDataKey that)
    {
        bool equals = true;
        
        equals = equals && ((this.PageKey == null) == (that.PageKey == null));
        equals = equals && (this.PageKey == null ? true : (this.PageKey.Length == that.PageKey.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PageDataKey that)
    {
        bool equals = true;
        
        equals = equals && (this.PageKey == null ? true : this.PageKey == that.PageKey);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_PageKey, this.PageKey, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PageDataKey

/// <summary>
/// StringFeatureValue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class StringFeatureValue : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required uint32 Timestamp
    private UInt32 m_Timestamp;

    // 2: Required string Value
    private String m_Value;

    /// <summary>
    /// Timestamp
    /// </summary>
    public UInt32 Timestamp
    {
        get { return this.m_Timestamp; }
        set { this.m_Timestamp = value; }
    }

    /// <summary>
    /// Value
    /// </summary>
    public String Value
    {
        get { return this.m_Value; }
        set { this.m_Value = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Timestamp_meta = new Metadata();
        public static readonly Metadata Value_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("StringFeatureValue");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Multimedia." + meta.name;


            // Timestamp
            Timestamp_meta.name = "Timestamp";
            Timestamp_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            Timestamp_meta.default_value.uint_value = 0;

            // Value
            Value_meta.name = "Value";
            Value_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Timestamp = 1;
        public const int Value = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Timestamp = "Timestamp";
        public const String s_Value = "Value";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public StringFeatureValue()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Timestamp = 0;
        m_Value = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Multimedia.StringFeatureValue cloned = new global::Multimedia.StringFeatureValue();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Multimedia.StringFeatureValue that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: uint32 Timestamp
        that.Timestamp = this.Timestamp;
        // 2: string Value
        that.Value = this.Value;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Timestamp = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"Timestamp\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Value = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"Value\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Timestamp:  // id=1
                    this.Timestamp = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.Timestamp, true);
                    break;
                case __ordinals.Value:  // id=2
                    this.Value = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.Value, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Timestamp))
        {
            ok = false;
            missingFieldName = "Timestamp";
            missingFieldId = __ordinals.Timestamp;
        }
        if (ok && !seenFields.Get(__ordinals.Value))
        {
            ok = false;
            missingFieldName = "Value";
            missingFieldId = __ordinals.Value;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(StringFeatureValue))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.Timestamp, Schema.Timestamp_meta);
            writer.WriteUInt32(m_Timestamp);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Value, Schema.Value_meta);
            writer.WriteString(m_Value);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Timestamp";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="Value";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        StringFeatureValue that = obj as StringFeatureValue;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(StringFeatureValue other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(StringFeatureValue that)
    {
        bool equals = true;
        
        equals = equals && ((this.Timestamp == that.Timestamp));
        equals = equals && ((this.Value == null) == (that.Value == null));
        equals = equals && (this.Value == null ? true : (this.Value.Length == that.Value.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(StringFeatureValue that)
    {
        bool equals = true;
        
        equals = equals && (this.Value == null ? true : this.Value == that.Value);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Timestamp, this.Timestamp, separator);
        sb.AppendFormat(format, __internal.s_Value, this.Value, separator);
        
        return sb.ToString();
    } // ToString()

}; // class StringFeatureValue

/// <summary>
/// PageDataValue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PageDataValue : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional map<string, Multimedia.StringFeatureValue> BasicFeatures
    private Dictionary<String, global::Multimedia.StringFeatureValue> m_BasicFeatures;

    /// <summary>
    /// We have 2 K:V pairs for M1 "Title" : SomeTitle "Domain" : SomeDomain For flight, we add new K:V pair such as "Title$FlightID" : SomeNewTitle to the map. If "Title$FlightID" is not found in the map, we fall back to default value SomeTitle. There should be no "$" in feature name or flight ID.
    /// </summary>
    public Dictionary<String, global::Multimedia.StringFeatureValue> BasicFeatures
    {
        get { return this.m_BasicFeatures; }
        set { this.m_BasicFeatures = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata BasicFeatures_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PageDataValue");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Multimedia." + meta.name;


            // BasicFeatures
            BasicFeatures_meta.name = "BasicFeatures";
            BasicFeatures_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            BasicFeatures_meta.attributes["ColumnStore.ColumnFamily"] = "Basic";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int BasicFeatures = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_BasicFeatures = "BasicFeatures";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PageDataValue()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_BasicFeatures == null)
        {
            m_BasicFeatures = new Dictionary<String, global::Multimedia.StringFeatureValue>();
        }
        else
        {
            m_BasicFeatures.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Multimedia.PageDataValue cloned = new global::Multimedia.PageDataValue();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Multimedia.PageDataValue that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: map<string, Multimedia.StringFeatureValue> BasicFeatures
        if (this.BasicFeatures != null)
        {
            if (that.BasicFeatures == null)
            {
                that.BasicFeatures = new Dictionary<String, global::Multimedia.StringFeatureValue>();
            }
            else
            {
                that.BasicFeatures.Clear();
            }
            foreach (var keyValPair1 in this.BasicFeatures)
            {
                String key2 = default(String);
                global::Multimedia.StringFeatureValue val3 = default(global::Multimedia.StringFeatureValue);
                key2 = keyValPair1.Key;
                val3 = (keyValPair1.Value == null ? null : (global::Multimedia.StringFeatureValue)keyValPair1.Value.Clone());
                that.BasicFeatures[key2] = val3;
            }
        }
        else
        {
            that.BasicFeatures = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_BasicFeatures(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.BasicFeatures:  // id=1
                    this.ReadField_impl_BasicFeatures(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_BasicFeatures(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(valueType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            global::Multimedia.StringFeatureValue val6 = new global::Multimedia.StringFeatureValue();
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            ReadHelper.ReadStruct(reader, val6, valueType2);
            //
            this.m_BasicFeatures[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_BasicFeatures


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PageDataValue))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = ((UInt32)m_BasicFeatures.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.BasicFeatures, Schema.BasicFeatures_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            foreach (var iter2 in m_BasicFeatures)
            {
                // Key
                    writer.WriteString(iter2.Key);
                // Value
                    iter2.Value.Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.BasicFeatures, Schema.BasicFeatures_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="BasicFeatures";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element = global::Multimedia.StringFeatureValue.GetTypeDef(schema);
        field.metadata.attributes["ColumnStore.ColumnFamily"] = "Basic";

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PageDataValue that = obj as PageDataValue;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PageDataValue other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PageDataValue that)
    {
        bool equals = true;
        
        equals = equals && ((this.BasicFeatures == null) == (that.BasicFeatures == null));
        equals = equals && ((this.BasicFeatures == null) ? true : (this.BasicFeatures.Count == that.BasicFeatures.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PageDataValue that)
    {
        bool equals = true;
        
        if (equals && this.BasicFeatures != null && this.BasicFeatures.Count != 0)
        {
            foreach (var keyValPair1 in this.BasicFeatures)
            {
                global::Multimedia.StringFeatureValue val2 = default(global::Multimedia.StringFeatureValue);
                equals = equals && that.BasicFeatures.TryGetValue(keyValPair1.Key, out val2);
                if (equals)
                {
                        equals = equals && ((val2 == null) == (keyValPair1.Value == null));
                    equals = equals && (val2 == null ? true : val2.MemberwiseCompare(keyValPair1.Value));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_BasicFeatures, this.BasicFeatures, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PageDataValue
} // namespace Multimedia
namespace ObjectStore
{

/// <summary>
/// The schema is used for Legacy partners data (blobs). Key and Value blobs are getting wrapped into bond objects using this schema.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class BlobEnvelope : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required blob Bytes
    private BondBlob m_Bytes;

    /// <summary>
    /// Bytes
    /// </summary>
    public BondBlob Bytes
    {
        get { return this.m_Bytes; }
        set { this.m_Bytes = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Bytes_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("BlobEnvelope");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // Bytes
            Bytes_meta.name = "Bytes";
            Bytes_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Bytes = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Bytes = "Bytes";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public BlobEnvelope()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Bytes = new BondBlob();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.BlobEnvelope cloned = new global::ObjectStore.BlobEnvelope();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.BlobEnvelope that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: blob Bytes
        that.Bytes = this.Bytes.CloneData();
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Bytes = this.Bytes.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"Bytes\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Bytes:  // id=10
                    this.Bytes = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.Bytes, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Bytes))
        {
            ok = false;
            missingFieldName = "Bytes";
            missingFieldId = __ordinals.Bytes;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(BlobEnvelope))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Bytes, Schema.Bytes_meta);
            UInt32 count1 = m_Bytes.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_Bytes.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="Bytes";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        BlobEnvelope that = obj as BlobEnvelope;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(BlobEnvelope other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(BlobEnvelope that)
    {
        bool equals = true;
        
        equals = equals && (this.Bytes.GetCount() == that.Bytes.GetCount());
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(BlobEnvelope that)
    {
        bool equals = true;
        
        equals = equals && this.Bytes.CompareData(that.Bytes);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Bytes, this.Bytes, separator);
        
        return sb.ToString();
    } // ToString()

}; // class BlobEnvelope

/// <summary>
/// PartitionId
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PartitionId : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required int32 m_id
    private Int32 m_m_id;

    /// <summary>
    /// m_id
    /// </summary>
    public Int32 m_id
    {
        get { return this.m_m_id; }
        set { this.m_m_id = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_id_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PartitionId");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // m_id
            m_id_meta.name = "m_id";
            m_id_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            m_id_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_id = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_id = "m_id";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PartitionId()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_id = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.PartitionId cloned = new global::ObjectStore.PartitionId();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.PartitionId that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int32 m_id
        that.m_id = this.m_id;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_id = reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"m_id\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_id:  // id=1
                    this.m_id = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.m_id, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.m_id))
        {
            ok = false;
            missingFieldName = "m_id";
            missingFieldId = __ordinals.m_id;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PartitionId))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.m_id, Schema.m_id_meta);
            writer.WriteInt32(m_m_id);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="m_id";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PartitionId that = obj as PartitionId;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PartitionId other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PartitionId that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_id == that.m_id));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PartitionId that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_id, this.m_id, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PartitionId

/// <summary>
/// SharedFileStoreRequest
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SharedFileStoreRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required ObjectStore.PartitionId m_partitionId
    private global::ObjectStore.PartitionId m_m_partitionId;

    // 10: Required uint32 m_Version
    private UInt32 m_m_Version;

    /// <summary>
    /// m_partitionId
    /// </summary>
    public global::ObjectStore.PartitionId m_partitionId
    {
        get { return this.m_m_partitionId; }
        set { this.m_m_partitionId = value; }
    }

    /// <summary>
    /// m_Version
    /// </summary>
    public UInt32 m_Version
    {
        get { return this.m_m_Version; }
        set { this.m_m_Version = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_partitionId_meta = new Metadata();
        public static readonly Metadata m_Version_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SharedFileStoreRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // m_partitionId
            m_partitionId_meta.name = "m_partitionId";
            m_partitionId_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            m_partitionId_meta.attributes["KeyMetadata"] = "PartitionKey";

            // m_Version
            m_Version_meta.name = "m_Version";
            m_Version_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            m_Version_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_partitionId = 1;
        public const int m_Version = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_partitionId = "m_partitionId";
        public const String s_m_Version = "m_Version";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SharedFileStoreRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_partitionId = new global::ObjectStore.PartitionId();
        m_m_Version = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.SharedFileStoreRequest cloned = new global::ObjectStore.SharedFileStoreRequest();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.SharedFileStoreRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: ObjectStore.PartitionId m_partitionId
        that.m_partitionId = (this.m_partitionId == null ? null : (global::ObjectStore.PartitionId)this.m_partitionId.Clone());
        // 10: uint32 m_Version
        that.m_Version = this.m_Version;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_partitionId.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"m_partitionId\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Version = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"m_Version\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_partitionId:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.m_partitionId.Read(reader);
                    seenRequiredFields.Set(__ordinals.m_partitionId, true);
                    break;
                case __ordinals.m_Version:  // id=10
                    this.m_Version = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.m_Version, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.m_partitionId))
        {
            ok = false;
            missingFieldName = "m_partitionId";
            missingFieldId = __ordinals.m_partitionId;
        }
        if (ok && !seenFields.Get(__ordinals.m_Version))
        {
            ok = false;
            missingFieldName = "m_Version";
            missingFieldId = __ordinals.m_Version;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SharedFileStoreRequest))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.m_partitionId, Schema.m_partitionId_meta);
            m_m_partitionId.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Version, Schema.m_Version_meta);
            writer.WriteUInt32(m_m_Version);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="m_partitionId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::ObjectStore.PartitionId.GetTypeDef(schema);
        field.metadata.attributes["KeyMetadata"] = "PartitionKey";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="m_Version";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SharedFileStoreRequest that = obj as SharedFileStoreRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SharedFileStoreRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SharedFileStoreRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_Version == that.m_Version));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SharedFileStoreRequest that)
    {
        bool equals = true;
        
        equals = equals && (this.m_partitionId == null ? true : this.m_partitionId.MemberwiseCompare(that.m_partitionId));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_partitionId, this.m_partitionId, separator);
        sb.AppendFormat(format, __internal.s_m_Version, this.m_Version, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SharedFileStoreRequest

/// <summary>
/// SharedFile
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SharedFile : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required string m_Key
    private String m_m_Key;

    // 20: Required string m_ShareName
    private String m_m_ShareName;

    /// <summary>
    /// m_Key
    /// </summary>
    public String m_Key
    {
        get { return this.m_m_Key; }
        set { this.m_m_Key = value; }
    }

    /// <summary>
    /// m_ShareName
    /// </summary>
    public String m_ShareName
    {
        get { return this.m_m_ShareName; }
        set { this.m_m_ShareName = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_Key_meta = new Metadata();
        public static readonly Metadata m_ShareName_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SharedFile");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // m_Key
            m_Key_meta.name = "m_Key";
            m_Key_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // m_ShareName
            m_ShareName_meta.name = "m_ShareName";
            m_ShareName_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_Key = 10;
        public const int m_ShareName = 20;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_Key = "m_Key";
        public const String s_m_ShareName = "m_ShareName";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SharedFile()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_Key = string.Empty;
        m_m_ShareName = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.SharedFile cloned = new global::ObjectStore.SharedFile();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.SharedFile that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string m_Key
        that.m_Key = this.m_Key;
        // 20: string m_ShareName
        that.m_ShareName = this.m_ShareName;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Key = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"m_Key\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_ShareName = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"m_ShareName\", id=20");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(21);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_Key:  // id=10
                    this.m_Key = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.m_Key, true);
                    break;
                case __ordinals.m_ShareName:  // id=20
                    this.m_ShareName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.m_ShareName, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.m_Key))
        {
            ok = false;
            missingFieldName = "m_Key";
            missingFieldId = __ordinals.m_Key;
        }
        if (ok && !seenFields.Get(__ordinals.m_ShareName))
        {
            ok = false;
            missingFieldName = "m_ShareName";
            missingFieldId = __ordinals.m_ShareName;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SharedFile))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_Key, Schema.m_Key_meta);
            writer.WriteString(m_m_Key);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_ShareName, Schema.m_ShareName_meta);
            writer.WriteString(m_m_ShareName);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="m_Key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="m_ShareName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SharedFile that = obj as SharedFile;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SharedFile other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SharedFile that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_Key == null) == (that.m_Key == null));
        equals = equals && (this.m_Key == null ? true : (this.m_Key.Length == that.m_Key.Length));
        equals = equals && ((this.m_ShareName == null) == (that.m_ShareName == null));
        equals = equals && (this.m_ShareName == null ? true : (this.m_ShareName.Length == that.m_ShareName.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SharedFile that)
    {
        bool equals = true;
        
        equals = equals && (this.m_Key == null ? true : this.m_Key == that.m_Key);
        equals = equals && (this.m_ShareName == null ? true : this.m_ShareName == that.m_ShareName);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_Key, this.m_Key, separator);
        sb.AppendFormat(format, __internal.s_m_ShareName, this.m_ShareName, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SharedFile

/// <summary>
/// SharedFileStoreResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SharedFileStoreResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required uint32 m_Version
    private UInt32 m_m_Version;

    // 20: Required vector<ObjectStore.SharedFile> m_SharedFiles
    private List<global::ObjectStore.SharedFile> m_m_SharedFiles;

    // 30: Optional string m_StoreVersionId
    private String m_m_StoreVersionId;

    /// <summary>
    /// m_Version
    /// </summary>
    public UInt32 m_Version
    {
        get { return this.m_m_Version; }
        set { this.m_m_Version = value; }
    }

    /// <summary>
    /// m_SharedFiles
    /// </summary>
    public List<global::ObjectStore.SharedFile> m_SharedFiles
    {
        get { return this.m_m_SharedFiles; }
        set { this.m_m_SharedFiles = value; }
    }

    /// <summary>
    /// m_StoreVersionId
    /// </summary>
    public String m_StoreVersionId
    {
        get { return this.m_m_StoreVersionId; }
        set { this.m_m_StoreVersionId = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_Version_meta = new Metadata();
        public static readonly Metadata m_SharedFiles_meta = new Metadata();
        public static readonly Metadata m_StoreVersionId_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SharedFileStoreResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // m_Version
            m_Version_meta.name = "m_Version";
            m_Version_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            m_Version_meta.default_value.uint_value = 0;

            // m_SharedFiles
            m_SharedFiles_meta.name = "m_SharedFiles";
            m_SharedFiles_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // m_StoreVersionId
            m_StoreVersionId_meta.name = "m_StoreVersionId";
            m_StoreVersionId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_StoreVersionId_meta.default_value.string_value = "-1";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_Version = 10;
        public const int m_SharedFiles = 20;
        public const int m_StoreVersionId = 30;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_Version = "m_Version";
        public const String s_m_SharedFiles = "m_SharedFiles";
        public const String s_m_StoreVersionId = "m_StoreVersionId";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SharedFileStoreResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_Version = 0;
        if (m_m_SharedFiles == null)
        {
            m_m_SharedFiles = new List<global::ObjectStore.SharedFile>();
        }
        else
        {
            m_m_SharedFiles.Clear();
        }
        m_m_StoreVersionId = "-1";
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.SharedFileStoreResponse cloned = new global::ObjectStore.SharedFileStoreResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.SharedFileStoreResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: uint32 m_Version
        that.m_Version = this.m_Version;
        // 20: vector<ObjectStore.SharedFile> m_SharedFiles
        if (this.m_SharedFiles != null)
        {
            if (that.m_SharedFiles == null)
            {
                that.m_SharedFiles = new List<global::ObjectStore.SharedFile>();
            }
            else
            {
                that.m_SharedFiles.Clear();
            }
            foreach (var iter1 in this.m_SharedFiles)
            {
                global::ObjectStore.SharedFile tmpItem2 = default(global::ObjectStore.SharedFile);
                tmpItem2 = (iter1 == null ? null : (global::ObjectStore.SharedFile)iter1.Clone());
                that.m_SharedFiles.Add(tmpItem2);
            }
        }
        else
        {
            that.m_SharedFiles = null;
        }
        // 30: string m_StoreVersionId
        that.m_StoreVersionId = this.m_StoreVersionId;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Version = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"m_Version\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_SharedFiles(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"m_SharedFiles\", id=20");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_StoreVersionId = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(21);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_Version:  // id=10
                    this.m_Version = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.m_Version, true);
                    break;
                case __ordinals.m_SharedFiles:  // id=20
                    this.ReadField_impl_m_SharedFiles(reader, type);
                    seenRequiredFields.Set(__ordinals.m_SharedFiles, true);
                    break;
                case __ordinals.m_StoreVersionId:  // id=30
                    this.m_StoreVersionId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_m_SharedFiles(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_m_SharedFiles.Capacity < count2)
        {
            this.m_m_SharedFiles.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::ObjectStore.SharedFile element3 = new global::ObjectStore.SharedFile();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_m_SharedFiles.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_SharedFiles


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.m_Version))
        {
            ok = false;
            missingFieldName = "m_Version";
            missingFieldId = __ordinals.m_Version;
        }
        if (ok && !seenFields.Get(__ordinals.m_SharedFiles))
        {
            ok = false;
            missingFieldName = "m_SharedFiles";
            missingFieldId = __ordinals.m_SharedFiles;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SharedFileStoreResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Version, Schema.m_Version_meta);
            writer.WriteUInt32(m_m_Version);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_SharedFiles, Schema.m_SharedFiles_meta);
            UInt32 count2 = (m_m_SharedFiles == null ? 0 : (UInt32)m_m_SharedFiles.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_m_SharedFiles[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.m_StoreVersionId_meta.default_value.Equals(m_m_StoreVersionId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_StoreVersionId, Schema.m_StoreVersionId_meta);
                writer.WriteString(m_m_StoreVersionId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_StoreVersionId, Schema.m_StoreVersionId_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="m_Version";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="m_SharedFiles";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::ObjectStore.SharedFile.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="m_StoreVersionId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "-1";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SharedFileStoreResponse that = obj as SharedFileStoreResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SharedFileStoreResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SharedFileStoreResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_Version == that.m_Version));
        equals = equals && ((this.m_SharedFiles == null) == (that.m_SharedFiles == null));
        equals = equals && ((this.m_SharedFiles == null) ? true : (this.m_SharedFiles.Count == that.m_SharedFiles.Count));
        equals = equals && ((this.m_StoreVersionId == null) == (that.m_StoreVersionId == null));
        equals = equals && (this.m_StoreVersionId == null ? true : (this.m_StoreVersionId.Length == that.m_StoreVersionId.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SharedFileStoreResponse that)
    {
        bool equals = true;
        
        if (equals && this.m_SharedFiles != null && this.m_SharedFiles.Count != 0)
        {
            var enum_1_1 = this.m_SharedFiles.GetEnumerator();
            var enum_2_2 = that.m_SharedFiles.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.m_StoreVersionId == null ? true : this.m_StoreVersionId == that.m_StoreVersionId);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_Version, this.m_Version, separator);
        sb.AppendFormat(format, __internal.s_m_SharedFiles, DumpList(this.m_SharedFiles), separator);
        sb.AppendFormat(format, __internal.s_m_StoreVersionId, this.m_StoreVersionId, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class SharedFileStoreResponse

/// <summary>
/// KdTreeSearchRequestFloat
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class KdTreeSearchRequestFloat : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<float> vect
    private List<Single> m_vect;

    // 2: Required uint32 numResults
    private UInt32 m_numResults;

    /// <summary>
    /// vect
    /// </summary>
    public List<Single> vect
    {
        get { return this.m_vect; }
        set { this.m_vect = value; }
    }

    /// <summary>
    /// numResults
    /// </summary>
    public UInt32 numResults
    {
        get { return this.m_numResults; }
        set { this.m_numResults = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata vect_meta = new Metadata();
        public static readonly Metadata numResults_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("KdTreeSearchRequestFloat");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // vect
            vect_meta.name = "vect";
            vect_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // numResults
            numResults_meta.name = "numResults";
            numResults_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            numResults_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int vect = 1;
        public const int numResults = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_vect = "vect";
        public const String s_numResults = "numResults";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public KdTreeSearchRequestFloat()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_vect == null)
        {
            m_vect = new List<Single>();
        }
        else
        {
            m_vect.Clear();
        }
        m_numResults = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.KdTreeSearchRequestFloat cloned = new global::ObjectStore.KdTreeSearchRequestFloat();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.KdTreeSearchRequestFloat that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<float> vect
        if (this.vect != null)
        {
            if (that.vect == null)
            {
                that.vect = new List<Single>();
            }
            else
            {
                that.vect.Clear();
            }
            foreach (var iter1 in this.vect)
            {
                Single tmpItem2 = default(Single);
                tmpItem2 = iter1;
                that.vect.Add(tmpItem2);
            }
        }
        else
        {
            that.vect = null;
        }
        // 2: uint32 numResults
        that.numResults = this.numResults;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_vect(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"vect\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.numResults = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"numResults\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.vect:  // id=1
                    this.ReadField_impl_vect(reader, type);
                    seenRequiredFields.Set(__ordinals.vect, true);
                    break;
                case __ordinals.numResults:  // id=2
                    this.numResults = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.numResults, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_vect(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_vect.Capacity < count2)
        {
            this.m_vect.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Single element3 = default(Single);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, elemType1);
            this.m_vect.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_vect


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.vect))
        {
            ok = false;
            missingFieldName = "vect";
            missingFieldId = __ordinals.vect;
        }
        if (ok && !seenFields.Get(__ordinals.numResults))
        {
            ok = false;
            missingFieldName = "numResults";
            missingFieldId = __ordinals.numResults;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(KdTreeSearchRequestFloat))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.vect, Schema.vect_meta);
            UInt32 count2 = (m_vect == null ? 0 : (UInt32)m_vect.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_FLOAT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    writer.WriteFloat(m_vect[idx1]);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.numResults, Schema.numResults_meta);
            writer.WriteUInt32(m_numResults);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="vect";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="numResults";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        KdTreeSearchRequestFloat that = obj as KdTreeSearchRequestFloat;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(KdTreeSearchRequestFloat other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(KdTreeSearchRequestFloat that)
    {
        bool equals = true;
        
        equals = equals && ((this.vect == null) == (that.vect == null));
        equals = equals && ((this.vect == null) ? true : (this.vect.Count == that.vect.Count));
        equals = equals && ((this.numResults == that.numResults));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(KdTreeSearchRequestFloat that)
    {
        bool equals = true;
        
        if (equals && this.vect != null && this.vect.Count != 0)
        {
            var enum_1_1 = this.vect.GetEnumerator();
            var enum_2_2 = that.vect.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((Single.IsNaN(enum_1_1.Current) ? Single.IsNaN(enum_2_2.Current) : (enum_1_1.Current == enum_2_2.Current)));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_vect, DumpList(this.vect), separator);
        sb.AppendFormat(format, __internal.s_numResults, this.numResults, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class KdTreeSearchRequestFloat

/// <summary>
/// KdTreeSearchRequestByte
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class KdTreeSearchRequestByte : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<uint8> vect
    private List<Byte> m_vect;

    // 2: Required uint32 numResults
    private UInt32 m_numResults;

    /// <summary>
    /// vect
    /// </summary>
    public List<Byte> vect
    {
        get { return this.m_vect; }
        set { this.m_vect = value; }
    }

    /// <summary>
    /// numResults
    /// </summary>
    public UInt32 numResults
    {
        get { return this.m_numResults; }
        set { this.m_numResults = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata vect_meta = new Metadata();
        public static readonly Metadata numResults_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("KdTreeSearchRequestByte");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // vect
            vect_meta.name = "vect";
            vect_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // numResults
            numResults_meta.name = "numResults";
            numResults_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            numResults_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int vect = 1;
        public const int numResults = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_vect = "vect";
        public const String s_numResults = "numResults";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public KdTreeSearchRequestByte()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_vect == null)
        {
            m_vect = new List<Byte>();
        }
        else
        {
            m_vect.Clear();
        }
        m_numResults = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.KdTreeSearchRequestByte cloned = new global::ObjectStore.KdTreeSearchRequestByte();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.KdTreeSearchRequestByte that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<uint8> vect
        if (this.vect != null)
        {
            if (that.vect == null)
            {
                that.vect = new List<Byte>();
            }
            else
            {
                that.vect.Clear();
            }
            foreach (var iter1 in this.vect)
            {
                Byte tmpItem2 = default(Byte);
                tmpItem2 = iter1;
                that.vect.Add(tmpItem2);
            }
        }
        else
        {
            that.vect = null;
        }
        // 2: uint32 numResults
        that.numResults = this.numResults;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_vect(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"vect\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.numResults = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"numResults\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.vect:  // id=1
                    this.ReadField_impl_vect(reader, type);
                    seenRequiredFields.Set(__ordinals.vect, true);
                    break;
                case __ordinals.numResults:  // id=2
                    this.numResults = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.numResults, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_vect(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_vect.Capacity < count2)
        {
            this.m_vect.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Byte element3 = default(Byte);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType1);
            this.m_vect.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_vect


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.vect))
        {
            ok = false;
            missingFieldName = "vect";
            missingFieldId = __ordinals.vect;
        }
        if (ok && !seenFields.Get(__ordinals.numResults))
        {
            ok = false;
            missingFieldName = "numResults";
            missingFieldId = __ordinals.numResults;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(KdTreeSearchRequestByte))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.vect, Schema.vect_meta);
            UInt32 count2 = (m_vect == null ? 0 : (UInt32)m_vect.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_UINT8);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    writer.WriteUInt8(m_vect[idx1]);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.numResults, Schema.numResults_meta);
            writer.WriteUInt32(m_numResults);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="vect";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="numResults";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        KdTreeSearchRequestByte that = obj as KdTreeSearchRequestByte;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(KdTreeSearchRequestByte other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(KdTreeSearchRequestByte that)
    {
        bool equals = true;
        
        equals = equals && ((this.vect == null) == (that.vect == null));
        equals = equals && ((this.vect == null) ? true : (this.vect.Count == that.vect.Count));
        equals = equals && ((this.numResults == that.numResults));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(KdTreeSearchRequestByte that)
    {
        bool equals = true;
        
        if (equals && this.vect != null && this.vect.Count != 0)
        {
            var enum_1_1 = this.vect.GetEnumerator();
            var enum_2_2 = that.vect.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_vect, DumpList(this.vect), separator);
        sb.AppendFormat(format, __internal.s_numResults, this.numResults, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class KdTreeSearchRequestByte

/// <summary>
/// KdTreeSearchResult
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class KdTreeSearchResult : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required string metadata
    private String m_metadata;

    // 2: Required float score
    private Single m_score;

    /// <summary>
    /// metadata
    /// </summary>
    public String metadata
    {
        get { return this.m_metadata; }
        set { this.m_metadata = value; }
    }

    /// <summary>
    /// score
    /// </summary>
    public Single score
    {
        get { return this.m_score; }
        set { this.m_score = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata metadata_meta = new Metadata();
        public static readonly Metadata score_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("KdTreeSearchResult");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // metadata
            metadata_meta.name = "metadata";
            metadata_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // score
            score_meta.name = "score";
            score_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            score_meta.default_value.double_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int metadata = 1;
        public const int score = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_metadata = "metadata";
        public const String s_score = "score";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public KdTreeSearchResult()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_metadata = string.Empty;
        m_score = 0F;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.KdTreeSearchResult cloned = new global::ObjectStore.KdTreeSearchResult();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.KdTreeSearchResult that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string metadata
        that.metadata = this.metadata;
        // 2: float score
        that.score = this.score;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.metadata = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"metadata\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.score = reader.ReadFloat();
        }
        else
        {
            throw new BondException("Missing required field \"score\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.metadata:  // id=1
                    this.metadata = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.metadata, true);
                    break;
                case __ordinals.score:  // id=2
                    this.score = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    seenRequiredFields.Set(__ordinals.score, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.metadata))
        {
            ok = false;
            missingFieldName = "metadata";
            missingFieldId = __ordinals.metadata;
        }
        if (ok && !seenFields.Get(__ordinals.score))
        {
            ok = false;
            missingFieldName = "score";
            missingFieldId = __ordinals.score;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(KdTreeSearchResult))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.metadata, Schema.metadata_meta);
            writer.WriteString(m_metadata);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.score, Schema.score_meta);
            writer.WriteFloat(m_score);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="metadata";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="score";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        KdTreeSearchResult that = obj as KdTreeSearchResult;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(KdTreeSearchResult other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(KdTreeSearchResult that)
    {
        bool equals = true;
        
        equals = equals && ((this.metadata == null) == (that.metadata == null));
        equals = equals && (this.metadata == null ? true : (this.metadata.Length == that.metadata.Length));
        equals = equals && ((Single.IsNaN(this.score) ? Single.IsNaN(that.score) : (this.score == that.score)));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(KdTreeSearchResult that)
    {
        bool equals = true;
        
        equals = equals && (this.metadata == null ? true : this.metadata == that.metadata);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_metadata, this.metadata, separator);
        sb.AppendFormat(format, __internal.s_score, this.score, separator);
        
        return sb.ToString();
    } // ToString()

}; // class KdTreeSearchResult

/// <summary>
/// KdTreeSearchResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class KdTreeSearchResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<ObjectStore.KdTreeSearchResult> results
    private List<global::ObjectStore.KdTreeSearchResult> m_results;

    /// <summary>
    /// results
    /// </summary>
    public List<global::ObjectStore.KdTreeSearchResult> results
    {
        get { return this.m_results; }
        set { this.m_results = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata results_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("KdTreeSearchResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // results
            results_meta.name = "results";
            results_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int results = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_results = "results";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public KdTreeSearchResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_results == null)
        {
            m_results = new List<global::ObjectStore.KdTreeSearchResult>();
        }
        else
        {
            m_results.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.KdTreeSearchResponse cloned = new global::ObjectStore.KdTreeSearchResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.KdTreeSearchResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<ObjectStore.KdTreeSearchResult> results
        if (this.results != null)
        {
            if (that.results == null)
            {
                that.results = new List<global::ObjectStore.KdTreeSearchResult>();
            }
            else
            {
                that.results.Clear();
            }
            foreach (var iter1 in this.results)
            {
                global::ObjectStore.KdTreeSearchResult tmpItem2 = default(global::ObjectStore.KdTreeSearchResult);
                tmpItem2 = (iter1 == null ? null : (global::ObjectStore.KdTreeSearchResult)iter1.Clone());
                that.results.Add(tmpItem2);
            }
        }
        else
        {
            that.results = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_results(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"results\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.results:  // id=1
                    this.ReadField_impl_results(reader, type);
                    seenRequiredFields.Set(__ordinals.results, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_results(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_results.Capacity < count2)
        {
            this.m_results.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::ObjectStore.KdTreeSearchResult element3 = new global::ObjectStore.KdTreeSearchResult();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_results.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_results


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.results))
        {
            ok = false;
            missingFieldName = "results";
            missingFieldId = __ordinals.results;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(KdTreeSearchResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.results, Schema.results_meta);
            UInt32 count2 = (m_results == null ? 0 : (UInt32)m_results.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_results[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="results";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::ObjectStore.KdTreeSearchResult.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        KdTreeSearchResponse that = obj as KdTreeSearchResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(KdTreeSearchResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(KdTreeSearchResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.results == null) == (that.results == null));
        equals = equals && ((this.results == null) ? true : (this.results.Count == that.results.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(KdTreeSearchResponse that)
    {
        bool equals = true;
        
        if (equals && this.results != null && this.results.Count != 0)
        {
            var enum_1_1 = this.results.GetEnumerator();
            var enum_2_2 = that.results.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_results, DumpList(this.results), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class KdTreeSearchResponse

/// <summary>
/// KdTreePartitionId
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class KdTreePartitionId : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required uint32 id
    private UInt32 m_id;

    /// <summary>
    /// id
    /// </summary>
    public UInt32 id
    {
        get { return this.m_id; }
        set { this.m_id = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata id_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("KdTreePartitionId");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // id
            id_meta.name = "id";
            id_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            id_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int id = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_id = "id";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public KdTreePartitionId()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_id = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.KdTreePartitionId cloned = new global::ObjectStore.KdTreePartitionId();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.KdTreePartitionId that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: uint32 id
        that.id = this.id;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.id = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"id\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.id:  // id=1
                    this.id = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.id, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.id))
        {
            ok = false;
            missingFieldName = "id";
            missingFieldId = __ordinals.id;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(KdTreePartitionId))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.id, Schema.id_meta);
            writer.WriteUInt32(m_id);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="id";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        KdTreePartitionId that = obj as KdTreePartitionId;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(KdTreePartitionId other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(KdTreePartitionId that)
    {
        bool equals = true;
        
        equals = equals && ((this.id == that.id));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(KdTreePartitionId that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_id, this.id, separator);
        
        return sb.ToString();
    } // ToString()

}; // class KdTreePartitionId

/// <summary>
/// KdTreeSearchCacheResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class KdTreeSearchCacheResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<ObjectStore.KdTreeSearchResult> results
    private List<global::ObjectStore.KdTreeSearchResult> m_results;

    // 2: Required bool hitCache
    private Boolean m_hitCache;

    /// <summary>
    /// results
    /// </summary>
    public List<global::ObjectStore.KdTreeSearchResult> results
    {
        get { return this.m_results; }
        set { this.m_results = value; }
    }

    /// <summary>
    /// hitCache
    /// </summary>
    public Boolean hitCache
    {
        get { return this.m_hitCache; }
        set { this.m_hitCache = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata results_meta = new Metadata();
        public static readonly Metadata hitCache_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("KdTreeSearchCacheResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // results
            results_meta.name = "results";
            results_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // hitCache
            hitCache_meta.name = "hitCache";
            hitCache_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            hitCache_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int results = 1;
        public const int hitCache = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_results = "results";
        public const String s_hitCache = "hitCache";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public KdTreeSearchCacheResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_results == null)
        {
            m_results = new List<global::ObjectStore.KdTreeSearchResult>();
        }
        else
        {
            m_results.Clear();
        }
        m_hitCache = false;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.KdTreeSearchCacheResponse cloned = new global::ObjectStore.KdTreeSearchCacheResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.KdTreeSearchCacheResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<ObjectStore.KdTreeSearchResult> results
        if (this.results != null)
        {
            if (that.results == null)
            {
                that.results = new List<global::ObjectStore.KdTreeSearchResult>();
            }
            else
            {
                that.results.Clear();
            }
            foreach (var iter1 in this.results)
            {
                global::ObjectStore.KdTreeSearchResult tmpItem2 = default(global::ObjectStore.KdTreeSearchResult);
                tmpItem2 = (iter1 == null ? null : (global::ObjectStore.KdTreeSearchResult)iter1.Clone());
                that.results.Add(tmpItem2);
            }
        }
        else
        {
            that.results = null;
        }
        // 2: bool hitCache
        that.hitCache = this.hitCache;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_results(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"results\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.hitCache = reader.ReadBool();
        }
        else
        {
            throw new BondException("Missing required field \"hitCache\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.results:  // id=1
                    this.ReadField_impl_results(reader, type);
                    seenRequiredFields.Set(__ordinals.results, true);
                    break;
                case __ordinals.hitCache:  // id=2
                    this.hitCache = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    seenRequiredFields.Set(__ordinals.hitCache, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_results(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_results.Capacity < count2)
        {
            this.m_results.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::ObjectStore.KdTreeSearchResult element3 = new global::ObjectStore.KdTreeSearchResult();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_results.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_results


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.results))
        {
            ok = false;
            missingFieldName = "results";
            missingFieldId = __ordinals.results;
        }
        if (ok && !seenFields.Get(__ordinals.hitCache))
        {
            ok = false;
            missingFieldName = "hitCache";
            missingFieldId = __ordinals.hitCache;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(KdTreeSearchCacheResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.results, Schema.results_meta);
            UInt32 count2 = (m_results == null ? 0 : (UInt32)m_results.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_results[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.hitCache, Schema.hitCache_meta);
            writer.WriteBool(m_hitCache);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="results";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::ObjectStore.KdTreeSearchResult.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="hitCache";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        KdTreeSearchCacheResponse that = obj as KdTreeSearchCacheResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(KdTreeSearchCacheResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(KdTreeSearchCacheResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.results == null) == (that.results == null));
        equals = equals && ((this.results == null) ? true : (this.results.Count == that.results.Count));
        equals = equals && ((this.hitCache == that.hitCache));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(KdTreeSearchCacheResponse that)
    {
        bool equals = true;
        
        if (equals && this.results != null && this.results.Count != 0)
        {
            var enum_1_1 = this.results.GetEnumerator();
            var enum_2_2 = that.results.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_results, DumpList(this.results), separator);
        sb.AppendFormat(format, __internal.s_hitCache, this.hitCache, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class KdTreeSearchCacheResponse

/// <summary>
/// Represents void type, used for XAP partners where file name needs to be the same as type full name.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Void : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Void");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;

        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Void()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.Void cloned = new global::ObjectStore.Void();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.Void that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        
        Reset();
        

        reader.ReadStructBegin();
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Void))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Void that = obj as Void;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Void other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Void that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Void that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        
        return sb.ToString();
    } // ToString()

}; // class Void

/// <summary>
/// HNSWSearchRequestFloat
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class HNSWSearchRequestFloat : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<float> vect
    private List<Single> m_vect;

    // 2: Required uint32 numResults
    private UInt32 m_numResults;

    // 3: Optional map<string, string> extraParams
    private Dictionary<String, String> m_extraParams;

    /// <summary>
    /// vect
    /// </summary>
    public List<Single> vect
    {
        get { return this.m_vect; }
        set { this.m_vect = value; }
    }

    /// <summary>
    /// numResults
    /// </summary>
    public UInt32 numResults
    {
        get { return this.m_numResults; }
        set { this.m_numResults = value; }
    }

    /// <summary>
    /// extraParams
    /// </summary>
    public Dictionary<String, String> extraParams
    {
        get { return this.m_extraParams; }
        set { this.m_extraParams = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata vect_meta = new Metadata();
        public static readonly Metadata numResults_meta = new Metadata();
        public static readonly Metadata extraParams_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("HNSWSearchRequestFloat");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // vect
            vect_meta.name = "vect";
            vect_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // numResults
            numResults_meta.name = "numResults";
            numResults_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            numResults_meta.default_value.uint_value = 0;

            // extraParams
            extraParams_meta.name = "extraParams";
            extraParams_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int vect = 1;
        public const int numResults = 2;
        public const int extraParams = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_vect = "vect";
        public const String s_numResults = "numResults";
        public const String s_extraParams = "extraParams";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public HNSWSearchRequestFloat()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_vect == null)
        {
            m_vect = new List<Single>();
        }
        else
        {
            m_vect.Clear();
        }
        m_numResults = 0;
        if (m_extraParams == null)
        {
            m_extraParams = new Dictionary<String, String>();
        }
        else
        {
            m_extraParams.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.HNSWSearchRequestFloat cloned = new global::ObjectStore.HNSWSearchRequestFloat();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.HNSWSearchRequestFloat that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<float> vect
        if (this.vect != null)
        {
            if (that.vect == null)
            {
                that.vect = new List<Single>();
            }
            else
            {
                that.vect.Clear();
            }
            foreach (var iter1 in this.vect)
            {
                Single tmpItem2 = default(Single);
                tmpItem2 = iter1;
                that.vect.Add(tmpItem2);
            }
        }
        else
        {
            that.vect = null;
        }
        // 2: uint32 numResults
        that.numResults = this.numResults;
        // 3: map<string, string> extraParams
        if (this.extraParams != null)
        {
            if (that.extraParams == null)
            {
                that.extraParams = new Dictionary<String, String>();
            }
            else
            {
                that.extraParams.Clear();
            }
            foreach (var keyValPair3 in this.extraParams)
            {
                String key4 = default(String);
                String val5 = default(String);
                key4 = keyValPair3.Key;
                val5 = keyValPair3.Value;
                that.extraParams[key4] = val5;
            }
        }
        else
        {
            that.extraParams = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_vect(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"vect\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.numResults = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"numResults\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_extraParams(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.vect:  // id=1
                    this.ReadField_impl_vect(reader, type);
                    seenRequiredFields.Set(__ordinals.vect, true);
                    break;
                case __ordinals.numResults:  // id=2
                    this.numResults = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.numResults, true);
                    break;
                case __ordinals.extraParams:  // id=3
                    this.ReadField_impl_extraParams(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_vect(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_vect.Capacity < count2)
        {
            this.m_vect.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Single element3 = default(Single);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, elemType1);
            this.m_vect.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_vect


    private void ReadField_impl_extraParams(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            String val6 = default(String);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, valueType2);
            //
            this.m_extraParams[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_extraParams


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.vect))
        {
            ok = false;
            missingFieldName = "vect";
            missingFieldId = __ordinals.vect;
        }
        if (ok && !seenFields.Get(__ordinals.numResults))
        {
            ok = false;
            missingFieldName = "numResults";
            missingFieldId = __ordinals.numResults;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(HNSWSearchRequestFloat))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.vect, Schema.vect_meta);
            UInt32 count2 = (m_vect == null ? 0 : (UInt32)m_vect.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_FLOAT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    writer.WriteFloat(m_vect[idx1]);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.numResults, Schema.numResults_meta);
            writer.WriteUInt32(m_numResults);
        writer.WriteFieldEnd();
        UInt32 count3 = ((UInt32)m_extraParams.Count);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.extraParams, Schema.extraParams_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRING);
            foreach (var iter4 in m_extraParams)
            {
                // Key
                    writer.WriteString(iter4.Key);
                // Value
                    writer.WriteString(iter4.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.extraParams, Schema.extraParams_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="vect";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="numResults";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="extraParams";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        HNSWSearchRequestFloat that = obj as HNSWSearchRequestFloat;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(HNSWSearchRequestFloat other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(HNSWSearchRequestFloat that)
    {
        bool equals = true;
        
        equals = equals && ((this.vect == null) == (that.vect == null));
        equals = equals && ((this.vect == null) ? true : (this.vect.Count == that.vect.Count));
        equals = equals && ((this.numResults == that.numResults));
        equals = equals && ((this.extraParams == null) == (that.extraParams == null));
        equals = equals && ((this.extraParams == null) ? true : (this.extraParams.Count == that.extraParams.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(HNSWSearchRequestFloat that)
    {
        bool equals = true;
        
        if (equals && this.vect != null && this.vect.Count != 0)
        {
            var enum_1_1 = this.vect.GetEnumerator();
            var enum_2_2 = that.vect.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((Single.IsNaN(enum_1_1.Current) ? Single.IsNaN(enum_2_2.Current) : (enum_1_1.Current == enum_2_2.Current)));
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.extraParams != null && this.extraParams.Count != 0)
        {
            foreach (var keyValPair3 in this.extraParams)
            {
                String val4 = default(String);
                equals = equals && that.extraParams.TryGetValue(keyValPair3.Key, out val4);
                if (equals)
                {
                        equals = equals && ((val4 == null) == (keyValPair3.Value == null));
                    equals = equals && (val4 == null ? true : (val4.Length == keyValPair3.Value.Length));
                    equals = equals && (val4 == null ? true : val4 == keyValPair3.Value);
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_vect, DumpList(this.vect), separator);
        sb.AppendFormat(format, __internal.s_numResults, this.numResults, separator);
        sb.AppendFormat(format, __internal.s_extraParams, this.extraParams, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class HNSWSearchRequestFloat

/// <summary>
/// HNSWSearchResult
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class HNSWSearchResult : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required blob metadataBlob
    private BondBlob m_metadataBlob;

    // 2: Required float score
    private Single m_score;

    /// <summary>
    /// metadataBlob
    /// </summary>
    public BondBlob metadataBlob
    {
        get { return this.m_metadataBlob; }
        set { this.m_metadataBlob = value; }
    }

    /// <summary>
    /// score
    /// </summary>
    public Single score
    {
        get { return this.m_score; }
        set { this.m_score = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata metadataBlob_meta = new Metadata();
        public static readonly Metadata score_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("HNSWSearchResult");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // metadataBlob
            metadataBlob_meta.name = "metadataBlob";
            metadataBlob_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // score
            score_meta.name = "score";
            score_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            score_meta.default_value.double_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int metadataBlob = 1;
        public const int score = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_metadataBlob = "metadataBlob";
        public const String s_score = "score";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public HNSWSearchResult()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_metadataBlob = new BondBlob();
        m_score = 0F;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.HNSWSearchResult cloned = new global::ObjectStore.HNSWSearchResult();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.HNSWSearchResult that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: blob metadataBlob
        that.metadataBlob = this.metadataBlob.CloneData();
        // 2: float score
        that.score = this.score;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.metadataBlob = this.metadataBlob.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"metadataBlob\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.score = reader.ReadFloat();
        }
        else
        {
            throw new BondException("Missing required field \"score\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.metadataBlob:  // id=1
                    this.metadataBlob = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.metadataBlob, true);
                    break;
                case __ordinals.score:  // id=2
                    this.score = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    seenRequiredFields.Set(__ordinals.score, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.metadataBlob))
        {
            ok = false;
            missingFieldName = "metadataBlob";
            missingFieldId = __ordinals.metadataBlob;
        }
        if (ok && !seenFields.Get(__ordinals.score))
        {
            ok = false;
            missingFieldName = "score";
            missingFieldId = __ordinals.score;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(HNSWSearchResult))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.metadataBlob, Schema.metadataBlob_meta);
            UInt32 count1 = m_metadataBlob.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_metadataBlob.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.score, Schema.score_meta);
            writer.WriteFloat(m_score);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="metadataBlob";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="score";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        HNSWSearchResult that = obj as HNSWSearchResult;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(HNSWSearchResult other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(HNSWSearchResult that)
    {
        bool equals = true;
        
        equals = equals && (this.metadataBlob.GetCount() == that.metadataBlob.GetCount());
        equals = equals && ((Single.IsNaN(this.score) ? Single.IsNaN(that.score) : (this.score == that.score)));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(HNSWSearchResult that)
    {
        bool equals = true;
        
        equals = equals && this.metadataBlob.CompareData(that.metadataBlob);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_metadataBlob, this.metadataBlob, separator);
        sb.AppendFormat(format, __internal.s_score, this.score, separator);
        
        return sb.ToString();
    } // ToString()

}; // class HNSWSearchResult

/// <summary>
/// HNSWSearchResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class HNSWSearchResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<ObjectStore.HNSWSearchResult> results
    private List<global::ObjectStore.HNSWSearchResult> m_results;

    /// <summary>
    /// results
    /// </summary>
    public List<global::ObjectStore.HNSWSearchResult> results
    {
        get { return this.m_results; }
        set { this.m_results = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata results_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("HNSWSearchResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // results
            results_meta.name = "results";
            results_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int results = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_results = "results";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public HNSWSearchResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_results == null)
        {
            m_results = new List<global::ObjectStore.HNSWSearchResult>();
        }
        else
        {
            m_results.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.HNSWSearchResponse cloned = new global::ObjectStore.HNSWSearchResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.HNSWSearchResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<ObjectStore.HNSWSearchResult> results
        if (this.results != null)
        {
            if (that.results == null)
            {
                that.results = new List<global::ObjectStore.HNSWSearchResult>();
            }
            else
            {
                that.results.Clear();
            }
            foreach (var iter1 in this.results)
            {
                global::ObjectStore.HNSWSearchResult tmpItem2 = default(global::ObjectStore.HNSWSearchResult);
                tmpItem2 = (iter1 == null ? null : (global::ObjectStore.HNSWSearchResult)iter1.Clone());
                that.results.Add(tmpItem2);
            }
        }
        else
        {
            that.results = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_results(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"results\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.results:  // id=1
                    this.ReadField_impl_results(reader, type);
                    seenRequiredFields.Set(__ordinals.results, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_results(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_results.Capacity < count2)
        {
            this.m_results.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::ObjectStore.HNSWSearchResult element3 = new global::ObjectStore.HNSWSearchResult();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_results.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_results


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.results))
        {
            ok = false;
            missingFieldName = "results";
            missingFieldId = __ordinals.results;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(HNSWSearchResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.results, Schema.results_meta);
            UInt32 count2 = (m_results == null ? 0 : (UInt32)m_results.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_results[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="results";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::ObjectStore.HNSWSearchResult.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        HNSWSearchResponse that = obj as HNSWSearchResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(HNSWSearchResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(HNSWSearchResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.results == null) == (that.results == null));
        equals = equals && ((this.results == null) ? true : (this.results.Count == that.results.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(HNSWSearchResponse that)
    {
        bool equals = true;
        
        if (equals && this.results != null && this.results.Count != 0)
        {
            var enum_1_1 = this.results.GetEnumerator();
            var enum_2_2 = that.results.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_results, DumpList(this.results), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class HNSWSearchResponse

/// <summary>
/// HNSWSearchPartitionId
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class HNSWSearchPartitionId : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required uint32 id
    private UInt32 m_id;

    /// <summary>
    /// id
    /// </summary>
    public UInt32 id
    {
        get { return this.m_id; }
        set { this.m_id = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata id_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("HNSWSearchPartitionId");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStore." + meta.name;


            // id
            id_meta.name = "id";
            id_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            id_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int id = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_id = "id";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public HNSWSearchPartitionId()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_id = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStore.HNSWSearchPartitionId cloned = new global::ObjectStore.HNSWSearchPartitionId();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStore.HNSWSearchPartitionId that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: uint32 id
        that.id = this.id;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.id = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"id\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.id:  // id=1
                    this.id = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.id, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.id))
        {
            ok = false;
            missingFieldName = "id";
            missingFieldId = __ordinals.id;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(HNSWSearchPartitionId))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.id, Schema.id_meta);
            writer.WriteUInt32(m_id);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="id";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        HNSWSearchPartitionId that = obj as HNSWSearchPartitionId;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(HNSWSearchPartitionId other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(HNSWSearchPartitionId that)
    {
        bool equals = true;
        
        equals = equals && ((this.id == that.id));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(HNSWSearchPartitionId that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_id, this.id, separator);
        
        return sb.ToString();
    } // ToString()

}; // class HNSWSearchPartitionId
} // namespace ObjectStore
namespace Microsoft
{
namespace ObjectStore
{
namespace QueueService
{

/// <summary>
/// base for messages
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class VoidMessage : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("VoidMessage");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;

        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public VoidMessage()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.VoidMessage cloned = new global::Microsoft.ObjectStore.QueueService.VoidMessage();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.VoidMessage that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        
        Reset();
        

        reader.ReadStructBegin();
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(VoidMessage))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        VoidMessage that = obj as VoidMessage;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(VoidMessage other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(VoidMessage that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(VoidMessage that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        
        return sb.ToString();
    } // ToString()

}; // class VoidMessage

/// <summary>
/// QueueID
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class QueueID : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required string queueStringID
    private String m_queueStringID;

    /// <summary>
    /// queueStringID
    /// </summary>
    public String queueStringID
    {
        get { return this.m_queueStringID; }
        set { this.m_queueStringID = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata queueStringID_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("QueueID");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // queueStringID
            queueStringID_meta.name = "queueStringID";
            queueStringID_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int queueStringID = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_queueStringID = "queueStringID";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public QueueID()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_queueStringID = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.QueueID cloned = new global::Microsoft.ObjectStore.QueueService.QueueID();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.QueueID that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string queueStringID
        that.queueStringID = this.queueStringID;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.queueStringID = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"queueStringID\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.queueStringID:  // id=1
                    this.queueStringID = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.queueStringID, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.queueStringID))
        {
            ok = false;
            missingFieldName = "queueStringID";
            missingFieldId = __ordinals.queueStringID;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(QueueID))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.queueStringID, Schema.queueStringID_meta);
            writer.WriteString(m_queueStringID);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="queueStringID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        QueueID that = obj as QueueID;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(QueueID other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(QueueID that)
    {
        bool equals = true;
        
        equals = equals && ((this.queueStringID == null) == (that.queueStringID == null));
        equals = equals && (this.queueStringID == null ? true : (this.queueStringID.Length == that.queueStringID.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(QueueID that)
    {
        bool equals = true;
        
        equals = equals && (this.queueStringID == null ? true : this.queueStringID == that.queueStringID);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_queueStringID, this.queueStringID, separator);
        
        return sb.ToString();
    } // ToString()

}; // class QueueID

/// <summary>
/// QueueKeyBase
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class QueueKeyBase : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required uint64 f0
    private UInt64 m_f0;

    // 1: Required uint64 f1
    private UInt64 m_f1;

    // 2: Required uint32 f2
    private UInt32 m_f2;

    /// <summary>
    /// 20 bytes: HACK
    /// </summary>
    public UInt64 f0
    {
        get { return this.m_f0; }
        set { this.m_f0 = value; }
    }

    /// <summary>
    /// f1
    /// </summary>
    public UInt64 f1
    {
        get { return this.m_f1; }
        set { this.m_f1 = value; }
    }

    /// <summary>
    /// f2
    /// </summary>
    public UInt32 f2
    {
        get { return this.m_f2; }
        set { this.m_f2 = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata f0_meta = new Metadata();
        public static readonly Metadata f1_meta = new Metadata();
        public static readonly Metadata f2_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("QueueKeyBase");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // f0
            f0_meta.name = "f0";
            f0_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            f0_meta.default_value.uint_value = 0;

            // f1
            f1_meta.name = "f1";
            f1_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            f1_meta.default_value.uint_value = 0;

            // f2
            f2_meta.name = "f2";
            f2_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            f2_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int f0 = 0;
        public const int f1 = 1;
        public const int f2 = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_f0 = "f0";
        public const String s_f1 = "f1";
        public const String s_f2 = "f2";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public QueueKeyBase()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_f0 = 0;
        m_f1 = 0;
        m_f2 = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.QueueKeyBase cloned = new global::Microsoft.ObjectStore.QueueService.QueueKeyBase();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.QueueKeyBase that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: uint64 f0
        that.f0 = this.f0;
        // 1: uint64 f1
        that.f1 = this.f1;
        // 2: uint32 f2
        that.f2 = this.f2;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.f0 = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"f0\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.f1 = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"f1\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.f2 = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"f2\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.f0:  // id=0
                    this.f0 = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.f0, true);
                    break;
                case __ordinals.f1:  // id=1
                    this.f1 = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.f1, true);
                    break;
                case __ordinals.f2:  // id=2
                    this.f2 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.f2, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.f0))
        {
            ok = false;
            missingFieldName = "f0";
            missingFieldId = __ordinals.f0;
        }
        if (ok && !seenFields.Get(__ordinals.f1))
        {
            ok = false;
            missingFieldName = "f1";
            missingFieldId = __ordinals.f1;
        }
        if (ok && !seenFields.Get(__ordinals.f2))
        {
            ok = false;
            missingFieldName = "f2";
            missingFieldId = __ordinals.f2;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(QueueKeyBase))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.f0, Schema.f0_meta);
            writer.WriteUInt64(m_f0);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.f1, Schema.f1_meta);
            writer.WriteUInt64(m_f1);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.f2, Schema.f2_meta);
            writer.WriteUInt32(m_f2);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="f0";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="f1";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="f2";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        QueueKeyBase that = obj as QueueKeyBase;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(QueueKeyBase other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(QueueKeyBase that)
    {
        bool equals = true;
        
        equals = equals && ((this.f0 == that.f0));
        equals = equals && ((this.f1 == that.f1));
        equals = equals && ((this.f2 == that.f2));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(QueueKeyBase that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_f0, this.f0, separator);
        sb.AppendFormat(format, __internal.s_f1, this.f1, separator);
        sb.AppendFormat(format, __internal.s_f2, this.f2, separator);
        
        return sb.ToString();
    } // ToString()

}; // class QueueKeyBase

/// <summary>
/// QueueKeyTableBase
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class QueueKeyTableBase : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required uint64 f0
    private UInt64 m_f0;

    // 1: Required uint64 f1
    private UInt64 m_f1;

    // 2: Required uint32 f2
    private UInt32 m_f2;

    /// <summary>
    /// 20 bytes: HACK
    /// </summary>
    public UInt64 f0
    {
        get { return this.m_f0; }
        set { this.m_f0 = value; }
    }

    /// <summary>
    /// f1
    /// </summary>
    public UInt64 f1
    {
        get { return this.m_f1; }
        set { this.m_f1 = value; }
    }

    /// <summary>
    /// f2
    /// </summary>
    public UInt32 f2
    {
        get { return this.m_f2; }
        set { this.m_f2 = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata f0_meta = new Metadata();
        public static readonly Metadata f1_meta = new Metadata();
        public static readonly Metadata f2_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("QueueKeyTableBase");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // f0
            f0_meta.name = "f0";
            f0_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            f0_meta.default_value.uint_value = 0;

            // f1
            f1_meta.name = "f1";
            f1_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            f1_meta.default_value.uint_value = 0;

            // f2
            f2_meta.name = "f2";
            f2_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            f2_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int f0 = 0;
        public const int f1 = 1;
        public const int f2 = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_f0 = "f0";
        public const String s_f1 = "f1";
        public const String s_f2 = "f2";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public QueueKeyTableBase()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_f0 = 0;
        m_f1 = 0;
        m_f2 = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.QueueKeyTableBase cloned = new global::Microsoft.ObjectStore.QueueService.QueueKeyTableBase();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.QueueKeyTableBase that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: uint64 f0
        that.f0 = this.f0;
        // 1: uint64 f1
        that.f1 = this.f1;
        // 2: uint32 f2
        that.f2 = this.f2;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.f0 = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"f0\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.f1 = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"f1\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.f2 = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"f2\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.f0:  // id=0
                    this.f0 = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.f0, true);
                    break;
                case __ordinals.f1:  // id=1
                    this.f1 = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.f1, true);
                    break;
                case __ordinals.f2:  // id=2
                    this.f2 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.f2, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.f0))
        {
            ok = false;
            missingFieldName = "f0";
            missingFieldId = __ordinals.f0;
        }
        if (ok && !seenFields.Get(__ordinals.f1))
        {
            ok = false;
            missingFieldName = "f1";
            missingFieldId = __ordinals.f1;
        }
        if (ok && !seenFields.Get(__ordinals.f2))
        {
            ok = false;
            missingFieldName = "f2";
            missingFieldId = __ordinals.f2;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(QueueKeyTableBase))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.f0, Schema.f0_meta);
            writer.WriteUInt64(m_f0);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.f1, Schema.f1_meta);
            writer.WriteUInt64(m_f1);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.f2, Schema.f2_meta);
            writer.WriteUInt32(m_f2);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="f0";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="f1";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="f2";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        QueueKeyTableBase that = obj as QueueKeyTableBase;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(QueueKeyTableBase other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(QueueKeyTableBase that)
    {
        bool equals = true;
        
        equals = equals && ((this.f0 == that.f0));
        equals = equals && ((this.f1 == that.f1));
        equals = equals && ((this.f2 == that.f2));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(QueueKeyTableBase that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_f0, this.f0, separator);
        sb.AppendFormat(format, __internal.s_f1, this.f1, separator);
        sb.AppendFormat(format, __internal.s_f2, this.f2, separator);
        
        return sb.ToString();
    } // ToString()

}; // class QueueKeyTableBase

/// <summary>
/// VersionState
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class VersionState : global::Microsoft.ObjectStore.QueueService.VoidMessage
{
    //
    // Fields
    //

    // 1: Required uint64 versionCounter
    private UInt64 m_versionCounter;

    // 2: Optional nullable<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>> extraData
    private Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> m_extraData;

    /// <summary>
    /// versionCounter
    /// </summary>
    public UInt64 versionCounter
    {
        get { return this.m_versionCounter; }
        set { this.m_versionCounter = value; }
    }

    /// <summary>
    /// extraData
    /// </summary>
    public Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> extraData
    {
        get { return this.m_extraData; }
        set { this.m_extraData = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata versionCounter_meta = new Metadata();
        public static readonly Metadata extraData_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("VersionState");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // versionCounter
            versionCounter_meta.name = "versionCounter";
            versionCounter_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            versionCounter_meta.default_value.uint_value = 0;

            // extraData
            extraData_meta.name = "extraData";
            extraData_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int versionCounter = 1;
        public const int extraData = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_versionCounter = "versionCounter";
        public const String s_extraData = "extraData";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public VersionState()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_versionCounter = 0;
        m_extraData = default(Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.VersionState cloned = new global::Microsoft.ObjectStore.QueueService.VersionState();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.VersionState that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 1: uint64 versionCounter
        that.versionCounter = this.versionCounter;
        // 2: nullable<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>> extraData
        that.extraData = (this.extraData == null ? null : (Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>)this.extraData.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.versionCounter = reader.ReadUInt64();
        }
        else
        {
            throw new BondException("Missing required field \"versionCounter\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_extraData(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.versionCounter:  // id=1
                    this.versionCounter = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.versionCounter, true);
                    break;
                case __ordinals.extraData:  // id=2
                    this.ReadField_impl_extraData(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_extraData(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_extraData == null) { this.m_extraData = new Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>(); } 
            this.m_extraData.Read(reader);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_extraData


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.versionCounter))
        {
            ok = false;
            missingFieldName = "versionCounter";
            missingFieldId = __ordinals.versionCounter;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(VersionState))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.versionCounter, Schema.versionCounter_meta);
            writer.WriteUInt64(m_versionCounter);
        writer.WriteFieldEnd();
        UInt32 count1 = (UInt32)((m_extraData != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.extraData, Schema.extraData_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_extraData.Write(writer);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.extraData, Schema.extraData_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="versionCounter";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="extraData";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        field.type.element.bonded_type = true;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        VersionState that = obj as VersionState;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(VersionState other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(VersionState that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.versionCounter == that.versionCounter));
        equals = equals && ((this.extraData == null) == (that.extraData == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(VersionState that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        equals = equals && ((this.extraData == null) == (that.extraData == null));
        if (equals && !(this.extraData == null))
        {
                equals = equals && (this.extraData == null ? true : this.extraData.MemberwiseCompare(that.extraData));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_versionCounter, this.versionCounter, separator);
        sb.AppendFormat(format, __internal.s_extraData, this.extraData, separator);
        
        return sb.ToString();
    } // ToString()

}; // class VersionState

/// <summary>
/// VersionSlot
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class VersionSlot : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required bonded<Microsoft.ObjectStore.QueueService.VoidMessage> key
    private Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> m_key;

    // 2: Required Microsoft.ObjectStore.QueueService.VersionState state
    private global::Microsoft.ObjectStore.QueueService.VersionState m_state;

    /// <summary>
    /// key
    /// </summary>
    public Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> key
    {
        get { return this.m_key; }
        set { this.m_key = value; }
    }

    /// <summary>
    /// state
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.VersionState state
    {
        get { return this.m_state; }
        set { this.m_state = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata key_meta = new Metadata();
        public static readonly Metadata state_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("VersionSlot");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // key
            key_meta.name = "key";
            key_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // state
            state_meta.name = "state";
            state_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int key = 1;
        public const int state = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_key = "key";
        public const String s_state = "state";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public VersionSlot()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_key = new Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>();
        m_state = new global::Microsoft.ObjectStore.QueueService.VersionState();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.VersionSlot cloned = new global::Microsoft.ObjectStore.QueueService.VersionSlot();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.VersionSlot that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: bonded<Microsoft.ObjectStore.QueueService.VoidMessage> key
        that.key = (this.key == null ? null : (Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>)this.key.Clone());
        // 2: Microsoft.ObjectStore.QueueService.VersionState state
        that.state = (this.state == null ? null : (global::Microsoft.ObjectStore.QueueService.VersionState)this.state.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.key.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"key\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.state.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"state\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.key:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.key.Read(reader);
                    seenRequiredFields.Set(__ordinals.key, true);
                    break;
                case __ordinals.state:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.state.Read(reader);
                    seenRequiredFields.Set(__ordinals.state, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.key))
        {
            ok = false;
            missingFieldName = "key";
            missingFieldId = __ordinals.key;
        }
        if (ok && !seenFields.Get(__ordinals.state))
        {
            ok = false;
            missingFieldName = "state";
            missingFieldId = __ordinals.state;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(VersionSlot))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.key, Schema.key_meta);
            m_key.Write(writer);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.state, Schema.state_meta);
            m_state.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        field.type.bonded_type = true;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="state";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.VersionState.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        VersionSlot that = obj as VersionSlot;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(VersionSlot other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(VersionSlot that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(VersionSlot that)
    {
        bool equals = true;
        
            equals = equals && (this.key == null ? true : this.key.MemberwiseCompare(that.key));
        equals = equals && (this.state == null ? true : this.state.MemberwiseCompare(that.state));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_key, this.key, separator);
        sb.AppendFormat(format, __internal.s_state, this.state, separator);
        
        return sb.ToString();
    } // ToString()

}; // class VersionSlot

/// <summary>
/// VersionConditions
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class VersionConditions : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<Microsoft.ObjectStore.QueueService.VersionSlot> slots
    private List<global::Microsoft.ObjectStore.QueueService.VersionSlot> m_slots;

    // 2: Optional nullable<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>> extraData
    private Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> m_extraData;

    /// <summary>
    /// slots
    /// </summary>
    public List<global::Microsoft.ObjectStore.QueueService.VersionSlot> slots
    {
        get { return this.m_slots; }
        set { this.m_slots = value; }
    }

    /// <summary>
    /// extraData
    /// </summary>
    public Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> extraData
    {
        get { return this.m_extraData; }
        set { this.m_extraData = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata slots_meta = new Metadata();
        public static readonly Metadata extraData_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("VersionConditions");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // slots
            slots_meta.name = "slots";
            slots_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // extraData
            extraData_meta.name = "extraData";
            extraData_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int slots = 1;
        public const int extraData = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_slots = "slots";
        public const String s_extraData = "extraData";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public VersionConditions()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_slots == null)
        {
            m_slots = new List<global::Microsoft.ObjectStore.QueueService.VersionSlot>();
        }
        else
        {
            m_slots.Clear();
        }
        m_extraData = default(Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.VersionConditions cloned = new global::Microsoft.ObjectStore.QueueService.VersionConditions();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.VersionConditions that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<Microsoft.ObjectStore.QueueService.VersionSlot> slots
        if (this.slots != null)
        {
            if (that.slots == null)
            {
                that.slots = new List<global::Microsoft.ObjectStore.QueueService.VersionSlot>();
            }
            else
            {
                that.slots.Clear();
            }
            foreach (var iter1 in this.slots)
            {
                global::Microsoft.ObjectStore.QueueService.VersionSlot tmpItem2 = default(global::Microsoft.ObjectStore.QueueService.VersionSlot);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.QueueService.VersionSlot)iter1.Clone());
                that.slots.Add(tmpItem2);
            }
        }
        else
        {
            that.slots = null;
        }
        // 2: nullable<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>> extraData
        that.extraData = (this.extraData == null ? null : (Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>)this.extraData.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_slots(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"slots\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_extraData(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.slots:  // id=1
                    this.ReadField_impl_slots(reader, type);
                    seenRequiredFields.Set(__ordinals.slots, true);
                    break;
                case __ordinals.extraData:  // id=2
                    this.ReadField_impl_extraData(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_slots(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_slots.Capacity < count2)
        {
            this.m_slots.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.QueueService.VersionSlot element3 = new global::Microsoft.ObjectStore.QueueService.VersionSlot();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_slots.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_slots


    private void ReadField_impl_extraData(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_extraData == null) { this.m_extraData = new Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>(); } 
            this.m_extraData.Read(reader);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_extraData


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.slots))
        {
            ok = false;
            missingFieldName = "slots";
            missingFieldId = __ordinals.slots;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(VersionConditions))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.slots, Schema.slots_meta);
            UInt32 count2 = (m_slots == null ? 0 : (UInt32)m_slots.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_slots[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        UInt32 count3 = (UInt32)((m_extraData != null) ? 1 : 0);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.extraData, Schema.extraData_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count3 != 0)
                {
                        m_extraData.Write(writer);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.extraData, Schema.extraData_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="slots";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.VersionSlot.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="extraData";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        field.type.element.bonded_type = true;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        VersionConditions that = obj as VersionConditions;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(VersionConditions other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(VersionConditions that)
    {
        bool equals = true;
        
        equals = equals && ((this.slots == null) == (that.slots == null));
        equals = equals && ((this.slots == null) ? true : (this.slots.Count == that.slots.Count));
        equals = equals && ((this.extraData == null) == (that.extraData == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(VersionConditions that)
    {
        bool equals = true;
        
        if (equals && this.slots != null && this.slots.Count != 0)
        {
            var enum_1_1 = this.slots.GetEnumerator();
            var enum_2_2 = that.slots.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && ((this.extraData == null) == (that.extraData == null));
        if (equals && !(this.extraData == null))
        {
                equals = equals && (this.extraData == null ? true : this.extraData.MemberwiseCompare(that.extraData));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_slots, DumpList(this.slots), separator);
        sb.AppendFormat(format, __internal.s_extraData, this.extraData, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class VersionConditions

/// <summary>
/// record in messagetable
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class MessageEnvelope : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required bonded<Microsoft.ObjectStore.QueueService.VoidMessage> message
    private Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> m_message;

    // 2: Optional nullable<Microsoft.ObjectStore.QueueService.VersionConditions> versionConditions
    private global::Microsoft.ObjectStore.QueueService.VersionConditions m_versionConditions;

    // 3: Required uint32 timeoutCounter
    private UInt32 m_timeoutCounter;

    // 4: Optional vector<string> multiplex
    private List<String> m_multiplex;

    // 5: Optional bool deleteVersionSlotAuto
    private Boolean m_deleteVersionSlotAuto;

    // 6: Optional string loggableTraceID
    private String m_loggableTraceID;

    // 7: Optional int64 enqueueTimeTicks
    private Int64 m_enqueueTimeTicks;

    /// <summary>
    /// message
    /// </summary>
    public Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> message
    {
        get { return this.m_message; }
        set { this.m_message = value; }
    }

    /// <summary>
    /// versionConditions
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.VersionConditions versionConditions
    {
        get { return this.m_versionConditions; }
        set { this.m_versionConditions = value; }
    }

    /// <summary>
    /// timeoutCounter
    /// </summary>
    public UInt32 timeoutCounter
    {
        get { return this.m_timeoutCounter; }
        set { this.m_timeoutCounter = value; }
    }

    /// <summary>
    /// multiplex
    /// </summary>
    public List<String> multiplex
    {
        get { return this.m_multiplex; }
        set { this.m_multiplex = value; }
    }

    /// <summary>
    /// a list of multiplex. Multiplex starting with * are rule lookup requests (see comment below) on dequeue will contain a single multiplex name only (or nothing if no multiplex was specified in enqueue)
    /// </summary>
    public Boolean deleteVersionSlotAuto
    {
        get { return this.m_deleteVersionSlotAuto; }
        set { this.m_deleteVersionSlotAuto = value; }
    }

    /// <summary>
    /// If true, the VersionCondition slots will be deleted auto autodelete timeout
    /// </summary>
    public String loggableTraceID
    {
        get { return this.m_loggableTraceID; }
        set { this.m_loggableTraceID = value; }
    }

    /// <summary>
    /// A loggable traceid. See deployment specific schema for details (e.e. DLDWCoprocs.Types.bond)
    /// </summary>
    public Int64 enqueueTimeTicks
    {
        get { return this.m_enqueueTimeTicks; }
        set { this.m_enqueueTimeTicks = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata message_meta = new Metadata();
        public static readonly Metadata versionConditions_meta = new Metadata();
        public static readonly Metadata timeoutCounter_meta = new Metadata();
        public static readonly Metadata multiplex_meta = new Metadata();
        public static readonly Metadata deleteVersionSlotAuto_meta = new Metadata();
        public static readonly Metadata loggableTraceID_meta = new Metadata();
        public static readonly Metadata enqueueTimeTicks_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("MessageEnvelope");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // message
            message_meta.name = "message";
            message_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // versionConditions
            versionConditions_meta.name = "versionConditions";
            versionConditions_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // timeoutCounter
            timeoutCounter_meta.name = "timeoutCounter";
            timeoutCounter_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            timeoutCounter_meta.default_value.uint_value = 0;

            // multiplex
            multiplex_meta.name = "multiplex";
            multiplex_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // deleteVersionSlotAuto
            deleteVersionSlotAuto_meta.name = "deleteVersionSlotAuto";
            deleteVersionSlotAuto_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            deleteVersionSlotAuto_meta.default_value.uint_value = 1;

            // loggableTraceID
            loggableTraceID_meta.name = "loggableTraceID";
            loggableTraceID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // enqueueTimeTicks
            enqueueTimeTicks_meta.name = "enqueueTimeTicks";
            enqueueTimeTicks_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            enqueueTimeTicks_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int message = 1;
        public const int versionConditions = 2;
        public const int timeoutCounter = 3;
        public const int multiplex = 4;
        public const int deleteVersionSlotAuto = 5;
        public const int loggableTraceID = 6;
        public const int enqueueTimeTicks = 7;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_message = "message";
        public const String s_versionConditions = "versionConditions";
        public const String s_timeoutCounter = "timeoutCounter";
        public const String s_multiplex = "multiplex";
        public const String s_deleteVersionSlotAuto = "deleteVersionSlotAuto";
        public const String s_loggableTraceID = "loggableTraceID";
        public const String s_enqueueTimeTicks = "enqueueTimeTicks";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public MessageEnvelope()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_message = new Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>();
        m_versionConditions = default(global::Microsoft.ObjectStore.QueueService.VersionConditions);
        m_timeoutCounter = 0;
        if (m_multiplex == null)
        {
            m_multiplex = new List<String>();
        }
        else
        {
            m_multiplex.Clear();
        }
        m_deleteVersionSlotAuto = true;
        m_loggableTraceID = default(String);
        m_enqueueTimeTicks = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.MessageEnvelope cloned = new global::Microsoft.ObjectStore.QueueService.MessageEnvelope();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.MessageEnvelope that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: bonded<Microsoft.ObjectStore.QueueService.VoidMessage> message
        that.message = (this.message == null ? null : (Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>)this.message.Clone());
        // 2: nullable<Microsoft.ObjectStore.QueueService.VersionConditions> versionConditions
        that.versionConditions = (this.versionConditions == null ? null : (global::Microsoft.ObjectStore.QueueService.VersionConditions)this.versionConditions.Clone());
        // 3: uint32 timeoutCounter
        that.timeoutCounter = this.timeoutCounter;
        // 4: vector<string> multiplex
        if (this.multiplex != null)
        {
            if (that.multiplex == null)
            {
                that.multiplex = new List<String>();
            }
            else
            {
                that.multiplex.Clear();
            }
            foreach (var iter1 in this.multiplex)
            {
                String tmpItem2 = default(String);
                tmpItem2 = iter1;
                that.multiplex.Add(tmpItem2);
            }
        }
        else
        {
            that.multiplex = null;
        }
        // 5: bool deleteVersionSlotAuto
        that.deleteVersionSlotAuto = this.deleteVersionSlotAuto;
        // 6: string loggableTraceID
        that.loggableTraceID = this.loggableTraceID;
        // 7: int64 enqueueTimeTicks
        that.enqueueTimeTicks = this.enqueueTimeTicks;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.message.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"message\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_versionConditions(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.timeoutCounter = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"timeoutCounter\", id=3");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_multiplex(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.deleteVersionSlotAuto = reader.ReadBool();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.loggableTraceID = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.enqueueTimeTicks = reader.ReadInt64();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(4);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.message:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.message.Read(reader);
                    seenRequiredFields.Set(__ordinals.message, true);
                    break;
                case __ordinals.versionConditions:  // id=2
                    this.ReadField_impl_versionConditions(reader, type);
                    break;
                case __ordinals.timeoutCounter:  // id=3
                    this.timeoutCounter = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.timeoutCounter, true);
                    break;
                case __ordinals.multiplex:  // id=4
                    this.ReadField_impl_multiplex(reader, type);
                    break;
                case __ordinals.deleteVersionSlotAuto:  // id=5
                    this.deleteVersionSlotAuto = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                case __ordinals.loggableTraceID:  // id=6
                    this.loggableTraceID = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.enqueueTimeTicks:  // id=7
                    this.enqueueTimeTicks = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_versionConditions(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_versionConditions == null) { this.m_versionConditions = new global::Microsoft.ObjectStore.QueueService.VersionConditions(); } 
            ReadHelper.ReadStruct(reader, this.m_versionConditions, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_versionConditions


    private void ReadField_impl_multiplex(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_multiplex.Capacity < count2)
        {
            this.m_multiplex.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_multiplex.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_multiplex


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.message))
        {
            ok = false;
            missingFieldName = "message";
            missingFieldId = __ordinals.message;
        }
        if (ok && !seenFields.Get(__ordinals.timeoutCounter))
        {
            ok = false;
            missingFieldName = "timeoutCounter";
            missingFieldId = __ordinals.timeoutCounter;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(MessageEnvelope))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.message, Schema.message_meta);
            m_message.Write(writer);
        writer.WriteFieldEnd();
        UInt32 count1 = (UInt32)((m_versionConditions != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.versionConditions, Schema.versionConditions_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_versionConditions.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.versionConditions, Schema.versionConditions_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.timeoutCounter, Schema.timeoutCounter_meta);
            writer.WriteUInt32(m_timeoutCounter);
        writer.WriteFieldEnd();
        UInt32 count2 = ((UInt32)m_multiplex.Count);
        if (writeAllFields || count2 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.multiplex, Schema.multiplex_meta);
                writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx3 = 0; idx3 < count2; idx3++)
            {
                    writer.WriteString(m_multiplex[idx3]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.multiplex, Schema.multiplex_meta);
        }

        if (writeAllFields || (!Schema.deleteVersionSlotAuto_meta.default_value.Equals(m_deleteVersionSlotAuto)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.deleteVersionSlotAuto, Schema.deleteVersionSlotAuto_meta);
                writer.WriteBool(m_deleteVersionSlotAuto);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.deleteVersionSlotAuto, Schema.deleteVersionSlotAuto_meta);
        }

        if (writeAllFields || (m_loggableTraceID != null))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.loggableTraceID, Schema.loggableTraceID_meta);
                writer.WriteString(m_loggableTraceID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.loggableTraceID, Schema.loggableTraceID_meta);
        }

        if (writeAllFields || (!Schema.enqueueTimeTicks_meta.default_value.Equals(m_enqueueTimeTicks)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.enqueueTimeTicks, Schema.enqueueTimeTicks_meta);
                writer.WriteInt64(m_enqueueTimeTicks);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.enqueueTimeTicks, Schema.enqueueTimeTicks_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="message";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        field.type.bonded_type = true;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="versionConditions";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.VersionConditions.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="timeoutCounter";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="multiplex";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="deleteVersionSlotAuto";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = true?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 6;
        field.metadata.name="loggableTraceID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = true;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 7;
        field.metadata.name="enqueueTimeTicks";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        MessageEnvelope that = obj as MessageEnvelope;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(MessageEnvelope other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(MessageEnvelope that)
    {
        bool equals = true;
        
        equals = equals && ((this.versionConditions == null) == (that.versionConditions == null));
        equals = equals && ((this.timeoutCounter == that.timeoutCounter));
        equals = equals && ((this.multiplex == null) == (that.multiplex == null));
        equals = equals && ((this.multiplex == null) ? true : (this.multiplex.Count == that.multiplex.Count));
        equals = equals && ((this.deleteVersionSlotAuto == that.deleteVersionSlotAuto));
        equals = equals && ((this.loggableTraceID == null) == (that.loggableTraceID == null));
        equals = equals && (this.loggableTraceID == null ? true : (this.loggableTraceID.Length == that.loggableTraceID.Length));
        equals = equals && ((this.enqueueTimeTicks == that.enqueueTimeTicks));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(MessageEnvelope that)
    {
        bool equals = true;
        
            equals = equals && (this.message == null ? true : this.message.MemberwiseCompare(that.message));
        equals = equals && ((this.versionConditions == null) == (that.versionConditions == null));
        if (equals && !(this.versionConditions == null))
        {
            equals = equals && (this.versionConditions == null ? true : this.versionConditions.MemberwiseCompare(that.versionConditions));
        }
        if (equals && this.multiplex != null && this.multiplex.Count != 0)
        {
            var enum_1_1 = this.multiplex.GetEnumerator();
            var enum_2_2 = that.multiplex.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : (enum_1_1.Current.Length == enum_2_2.Current.Length));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current == enum_2_2.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.loggableTraceID == null ? true : this.loggableTraceID == that.loggableTraceID);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_message, this.message, separator);
        sb.AppendFormat(format, __internal.s_versionConditions, this.versionConditions, separator);
        sb.AppendFormat(format, __internal.s_timeoutCounter, this.timeoutCounter, separator);
        sb.AppendFormat(format, __internal.s_multiplex, DumpList(this.multiplex), separator);
        sb.AppendFormat(format, __internal.s_deleteVersionSlotAuto, this.deleteVersionSlotAuto, separator);
        sb.AppendFormat(format, __internal.s_loggableTraceID, this.loggableTraceID, separator);
        sb.AppendFormat(format, __internal.s_enqueueTimeTicks, this.enqueueTimeTicks, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class MessageEnvelope

/// <summary>
/// Format of a multiplex string on enqueue: No '*' prefix: taken literally, no lookup in multiplex rules '*' prefix: multiplex:='*'<RuleName>{[exclusionFilter]|[includeCandidate]}* exclusionFilter:='|-'<stringliteral> includeCandidate:='|+'<stringliteral> 1. retrieve candidate multiplex list from multiplex rules 2. remove any candidates matching any exclusionFilters (e.g. 'Experiment_*' or '*') 3. Add all includeList if they were present in candidates all string comparisons done with string after .ToLowerInvariant() DLDW specific example: "*email:0|-Experiment_*"                                     : All candidate multiplex not starting with "Experiment_" (all production plugins) "*email:0|-*|+Experiment_Plugin"                             : No production plugins, plus only "Experiment_Plugin" if was in candidates "*email:0|-Experiment_*|-ToDoExtractor|+Experiment_Plugin"   : All production plugins except "ToDoExtractor", plus only "Experiment_Plugin" if was in candidates request to create a queue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class CreateQueueRequestBase<A> : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional string logName
    private String m_logName;

    // 2: Required A applicationId
    private A m_applicationId;

    // 3: Required vector<A> allowedEnqueueApplicationIds
    private List<A> m_allowedEnqueueApplicationIds;

    // 4: Required vector<A> allowedDequeueApplicationIds
    private List<A> m_allowedDequeueApplicationIds;

    // 5: Optional int32 cloakTimeoutSeconds
    private Int32 m_cloakTimeoutSeconds;

    // 6: Optional int32 autoDeleteTimeoutCount
    private Int32 m_autoDeleteTimeoutCount;

    /// <summary>
    /// logName
    /// </summary>
    public String logName
    {
        get { return this.m_logName; }
        set { this.m_logName = value; }
    }

    /// <summary>
    /// queue name used for logging only
    /// </summary>
    public A applicationId
    {
        get { return this.m_applicationId; }
        set { this.m_applicationId = value; }
    }

    /// <summary>
    /// app id of queue creator. Can perform all queue operations
    /// </summary>
    public List<A> allowedEnqueueApplicationIds
    {
        get { return this.m_allowedEnqueueApplicationIds; }
        set { this.m_allowedEnqueueApplicationIds = value; }
    }

    /// <summary>
    /// these apps may enqueue only
    /// </summary>
    public List<A> allowedDequeueApplicationIds
    {
        get { return this.m_allowedDequeueApplicationIds; }
        set { this.m_allowedDequeueApplicationIds = value; }
    }

    /// <summary>
    /// these apps may dequeue and delete only
    /// </summary>
    public Int32 cloakTimeoutSeconds
    {
        get { return this.m_cloakTimeoutSeconds; }
        set { this.m_cloakTimeoutSeconds = value; }
    }

    /// <summary>
    /// timeout for how long a message stays cloaked after dequeueing
    /// </summary>
    public Int32 autoDeleteTimeoutCount
    {
        get { return this.m_autoDeleteTimeoutCount; }
        set { this.m_autoDeleteTimeoutCount = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata logName_meta = new Metadata();
        public static readonly Metadata applicationId_meta = new Metadata();
        public static readonly Metadata allowedEnqueueApplicationIds_meta = new Metadata();
        public static readonly Metadata allowedDequeueApplicationIds_meta = new Metadata();
        public static readonly Metadata cloakTimeoutSeconds_meta = new Metadata();
        public static readonly Metadata autoDeleteTimeoutCount_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("CreateQueueRequestBase");
            runtimeName.Append("<");
            runtimeName.Append(GenericHelper.GetIdlTypeName(typeof(A)));
            runtimeName.Append(">");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // logName
            logName_meta.name = "logName";
            logName_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // applicationId
            applicationId_meta.name = "applicationId";
            applicationId_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // allowedEnqueueApplicationIds
            allowedEnqueueApplicationIds_meta.name = "allowedEnqueueApplicationIds";
            allowedEnqueueApplicationIds_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // allowedDequeueApplicationIds
            allowedDequeueApplicationIds_meta.name = "allowedDequeueApplicationIds";
            allowedDequeueApplicationIds_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // cloakTimeoutSeconds
            cloakTimeoutSeconds_meta.name = "cloakTimeoutSeconds";
            cloakTimeoutSeconds_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            cloakTimeoutSeconds_meta.default_value.int_value = 0;

            // autoDeleteTimeoutCount
            autoDeleteTimeoutCount_meta.name = "autoDeleteTimeoutCount";
            autoDeleteTimeoutCount_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            autoDeleteTimeoutCount_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int logName = 1;
        public const int applicationId = 2;
        public const int allowedEnqueueApplicationIds = 3;
        public const int allowedDequeueApplicationIds = 4;
        public const int cloakTimeoutSeconds = 5;
        public const int autoDeleteTimeoutCount = 6;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_logName = "logName";
        public const String s_applicationId = "applicationId";
        public const String s_allowedEnqueueApplicationIds = "allowedEnqueueApplicationIds";
        public const String s_allowedDequeueApplicationIds = "allowedDequeueApplicationIds";
        public const String s_cloakTimeoutSeconds = "cloakTimeoutSeconds";
        public const String s_autoDeleteTimeoutCount = "autoDeleteTimeoutCount";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public CreateQueueRequestBase()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_logName = string.Empty;
        m_applicationId = GenericHelper.Create<A>();
        if (m_allowedEnqueueApplicationIds == null)
        {
            m_allowedEnqueueApplicationIds = new List<A>();
        }
        else
        {
            m_allowedEnqueueApplicationIds.Clear();
        }
        if (m_allowedDequeueApplicationIds == null)
        {
            m_allowedDequeueApplicationIds = new List<A>();
        }
        else
        {
            m_allowedDequeueApplicationIds.Clear();
        }
        m_cloakTimeoutSeconds = 0;
        m_autoDeleteTimeoutCount = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.CreateQueueRequestBase<A> cloned = new global::Microsoft.ObjectStore.QueueService.CreateQueueRequestBase<A>();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.CreateQueueRequestBase<A> that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string logName
        that.logName = this.logName;
        // 2: A applicationId
        that.applicationId = (A)global::Microsoft.Bond.GenericHelper.Clone(this.applicationId);
        // 3: vector<A> allowedEnqueueApplicationIds
        if (this.allowedEnqueueApplicationIds != null)
        {
            if (that.allowedEnqueueApplicationIds == null)
            {
                that.allowedEnqueueApplicationIds = new List<A>();
            }
            else
            {
                that.allowedEnqueueApplicationIds.Clear();
            }
            foreach (var iter1 in this.allowedEnqueueApplicationIds)
            {
                A tmpItem2 = default(A);
                tmpItem2 = (A)global::Microsoft.Bond.GenericHelper.Clone(iter1);
                that.allowedEnqueueApplicationIds.Add(tmpItem2);
            }
        }
        else
        {
            that.allowedEnqueueApplicationIds = null;
        }
        // 4: vector<A> allowedDequeueApplicationIds
        if (this.allowedDequeueApplicationIds != null)
        {
            if (that.allowedDequeueApplicationIds == null)
            {
                that.allowedDequeueApplicationIds = new List<A>();
            }
            else
            {
                that.allowedDequeueApplicationIds.Clear();
            }
            foreach (var iter3 in this.allowedDequeueApplicationIds)
            {
                A tmpItem4 = default(A);
                tmpItem4 = (A)global::Microsoft.Bond.GenericHelper.Clone(iter3);
                that.allowedDequeueApplicationIds.Add(tmpItem4);
            }
        }
        else
        {
            that.allowedDequeueApplicationIds = null;
        }
        // 5: int32 cloakTimeoutSeconds
        that.cloakTimeoutSeconds = this.cloakTimeoutSeconds;
        // 6: int32 autoDeleteTimeoutCount
        that.autoDeleteTimeoutCount = this.autoDeleteTimeoutCount;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.logName = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_applicationId(reader, global::Microsoft.Bond.GenericHelper.GetBondDataType(typeof(A)));
        }
        else
        {
            throw new BondException("Missing required field \"applicationId\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_allowedEnqueueApplicationIds(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"allowedEnqueueApplicationIds\", id=3");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_allowedDequeueApplicationIds(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"allowedDequeueApplicationIds\", id=4");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.cloakTimeoutSeconds = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.autoDeleteTimeoutCount = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(5);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.logName:  // id=1
                    this.logName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.applicationId:  // id=2
                    this.ReadField_impl_applicationId(reader, type);
                    seenRequiredFields.Set(__ordinals.applicationId, true);
                    break;
                case __ordinals.allowedEnqueueApplicationIds:  // id=3
                    this.ReadField_impl_allowedEnqueueApplicationIds(reader, type);
                    seenRequiredFields.Set(__ordinals.allowedEnqueueApplicationIds, true);
                    break;
                case __ordinals.allowedDequeueApplicationIds:  // id=4
                    this.ReadField_impl_allowedDequeueApplicationIds(reader, type);
                    seenRequiredFields.Set(__ordinals.allowedDequeueApplicationIds, true);
                    break;
                case __ordinals.cloakTimeoutSeconds:  // id=5
                    this.cloakTimeoutSeconds = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.autoDeleteTimeoutCount:  // id=6
                    this.autoDeleteTimeoutCount = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_applicationId(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
 
        global::Microsoft.Bond.GenericHelper.Read<A>(ref this.m_applicationId, reader, typeInPayload);
    } // ReadField_impl_applicationId


    private void ReadField_impl_allowedEnqueueApplicationIds(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_allowedEnqueueApplicationIds.Capacity < count2)
        {
            this.m_allowedEnqueueApplicationIds.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            A element3 = default(A);
             
            global::Microsoft.Bond.GenericHelper.Read<A>(ref element3, reader, elemType1);
            this.m_allowedEnqueueApplicationIds.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_allowedEnqueueApplicationIds


    private void ReadField_impl_allowedDequeueApplicationIds(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_allowedDequeueApplicationIds.Capacity < count2)
        {
            this.m_allowedDequeueApplicationIds.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            A element3 = default(A);
             
            global::Microsoft.Bond.GenericHelper.Read<A>(ref element3, reader, elemType1);
            this.m_allowedDequeueApplicationIds.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_allowedDequeueApplicationIds


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.applicationId))
        {
            ok = false;
            missingFieldName = "applicationId";
            missingFieldId = __ordinals.applicationId;
        }
        if (ok && !seenFields.Get(__ordinals.allowedEnqueueApplicationIds))
        {
            ok = false;
            missingFieldName = "allowedEnqueueApplicationIds";
            missingFieldId = __ordinals.allowedEnqueueApplicationIds;
        }
        if (ok && !seenFields.Get(__ordinals.allowedDequeueApplicationIds))
        {
            ok = false;
            missingFieldName = "allowedDequeueApplicationIds";
            missingFieldId = __ordinals.allowedDequeueApplicationIds;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(CreateQueueRequestBase<A>))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.logName_meta.default_value.Equals(m_logName)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.logName, Schema.logName_meta);
                writer.WriteString(m_logName);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.logName, Schema.logName_meta);
        }

                GenericHelper.WriteField(writer, __ordinals.applicationId, Schema.applicationId_meta, m_applicationId, typeof(A));
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.allowedEnqueueApplicationIds, Schema.allowedEnqueueApplicationIds_meta);
            UInt32 count2 = (m_allowedEnqueueApplicationIds == null ? 0 : (UInt32)m_allowedEnqueueApplicationIds.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.GenericHelper.GetBondDataType(typeof(A)));
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                        global::Microsoft.Bond.GenericHelper.Write(writer, m_allowedEnqueueApplicationIds[idx1], typeof(A));
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.allowedDequeueApplicationIds, Schema.allowedDequeueApplicationIds_meta);
            UInt32 count4 = (m_allowedDequeueApplicationIds == null ? 0 : (UInt32)m_allowedDequeueApplicationIds.Count);
            writer.WriteContainerBegin(count4, global::Microsoft.Bond.GenericHelper.GetBondDataType(typeof(A)));
            for (int idx3 = 0; idx3 < count4; idx3++)
            {
                        global::Microsoft.Bond.GenericHelper.Write(writer, m_allowedDequeueApplicationIds[idx3], typeof(A));
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.cloakTimeoutSeconds_meta.default_value.Equals(m_cloakTimeoutSeconds)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.cloakTimeoutSeconds, Schema.cloakTimeoutSeconds_meta);
                writer.WriteInt32(m_cloakTimeoutSeconds);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.cloakTimeoutSeconds, Schema.cloakTimeoutSeconds_meta);
        }

        if (writeAllFields || (!Schema.autoDeleteTimeoutCount_meta.default_value.Equals(m_autoDeleteTimeoutCount)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.autoDeleteTimeoutCount, Schema.autoDeleteTimeoutCount_meta);
                writer.WriteInt32(m_autoDeleteTimeoutCount);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.autoDeleteTimeoutCount, Schema.autoDeleteTimeoutCount_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="logName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="applicationId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = GenericHelper.CreateTypeDef(schema, typeof (A));

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="allowedEnqueueApplicationIds";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = GenericHelper.CreateTypeDef(schema, typeof (A));

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="allowedDequeueApplicationIds";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = GenericHelper.CreateTypeDef(schema, typeof (A));

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="cloakTimeoutSeconds";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 6;
        field.metadata.name="autoDeleteTimeoutCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        CreateQueueRequestBase<A> that = obj as CreateQueueRequestBase<A>;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(CreateQueueRequestBase<A> other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(CreateQueueRequestBase<A> that)
    {
        bool equals = true;
        
        equals = equals && ((this.logName == null) == (that.logName == null));
        equals = equals && (this.logName == null ? true : (this.logName.Length == that.logName.Length));
        equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(this.applicationId, that.applicationId));
        equals = equals && ((this.allowedEnqueueApplicationIds == null) == (that.allowedEnqueueApplicationIds == null));
        equals = equals && ((this.allowedEnqueueApplicationIds == null) ? true : (this.allowedEnqueueApplicationIds.Count == that.allowedEnqueueApplicationIds.Count));
        equals = equals && ((this.allowedDequeueApplicationIds == null) == (that.allowedDequeueApplicationIds == null));
        equals = equals && ((this.allowedDequeueApplicationIds == null) ? true : (this.allowedDequeueApplicationIds.Count == that.allowedDequeueApplicationIds.Count));
        equals = equals && ((this.cloakTimeoutSeconds == that.cloakTimeoutSeconds));
        equals = equals && ((this.autoDeleteTimeoutCount == that.autoDeleteTimeoutCount));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(CreateQueueRequestBase<A> that)
    {
        bool equals = true;
        
        equals = equals && (this.logName == null ? true : this.logName == that.logName);
        if (equals && this.allowedEnqueueApplicationIds != null && this.allowedEnqueueApplicationIds.Count != 0)
        {
            var enum_1_1 = this.allowedEnqueueApplicationIds.GetEnumerator();
            var enum_2_2 = that.allowedEnqueueApplicationIds.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(enum_1_1.Current, enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.allowedDequeueApplicationIds != null && this.allowedDequeueApplicationIds.Count != 0)
        {
            var enum_1_3 = this.allowedDequeueApplicationIds.GetEnumerator();
            var enum_2_4 = that.allowedDequeueApplicationIds.GetEnumerator();
            while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
            {
                    equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(enum_1_3.Current, enum_2_4.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_logName, this.logName, separator);
        sb.AppendFormat(format, __internal.s_applicationId, this.applicationId, separator);
        sb.AppendFormat(format, __internal.s_allowedEnqueueApplicationIds, DumpList(this.allowedEnqueueApplicationIds), separator);
        sb.AppendFormat(format, __internal.s_allowedDequeueApplicationIds, DumpList(this.allowedDequeueApplicationIds), separator);
        sb.AppendFormat(format, __internal.s_cloakTimeoutSeconds, this.cloakTimeoutSeconds, separator);
        sb.AppendFormat(format, __internal.s_autoDeleteTimeoutCount, this.autoDeleteTimeoutCount, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class CreateQueueRequestBase<A>

/// <summary>
/// Internal record to keep track of head and tail counters
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class QueueCounter : global::Microsoft.ObjectStore.QueueService.VoidMessage
{
    //
    // Fields
    //

    // 1: Required int64 counter
    private Int64 m_counter;

    /// <summary>
    /// counter
    /// </summary>
    public Int64 counter
    {
        get { return this.m_counter; }
        set { this.m_counter = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata counter_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("QueueCounter");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // counter
            counter_meta.name = "counter";
            counter_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            counter_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int counter = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_counter = "counter";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public QueueCounter()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_counter = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.QueueCounter cloned = new global::Microsoft.ObjectStore.QueueService.QueueCounter();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.QueueCounter that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 1: int64 counter
        that.counter = this.counter;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.counter = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"counter\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.counter:  // id=1
                    this.counter = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.counter, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.counter))
        {
            ok = false;
            missingFieldName = "counter";
            missingFieldId = __ordinals.counter;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(QueueCounter))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.counter, Schema.counter_meta);
            writer.WriteInt64(m_counter);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="counter";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        QueueCounter that = obj as QueueCounter;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(QueueCounter other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(QueueCounter that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.counter == that.counter));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(QueueCounter that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_counter, this.counter, separator);
        
        return sb.ToString();
    } // ToString()

}; // class QueueCounter

/// <summary>
/// Internal record to keep track of Multiplex rules for queue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class MultiplexRules : global::Microsoft.ObjectStore.QueueService.VoidMessage
{
    //
    // Fields
    //

    // 1: Required map<string, vector<string>> rules
    private Dictionary<String, List<String>> m_rules;

    // 2: Optional uint64 versionCounter
    private UInt64 m_versionCounter;

    // 3: Optional map<string, vector<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>>> metadata
    private Dictionary<String, List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>> m_metadata;

    /// <summary>
    /// rules
    /// </summary>
    public Dictionary<String, List<String>> rules
    {
        get { return this.m_rules; }
        set { this.m_rules = value; }
    }

    /// <summary>
    /// versionCounter
    /// </summary>
    public UInt64 versionCounter
    {
        get { return this.m_versionCounter; }
        set { this.m_versionCounter = value; }
    }

    /// <summary>
    /// metadata
    /// </summary>
    public Dictionary<String, List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>> metadata
    {
        get { return this.m_metadata; }
        set { this.m_metadata = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata rules_meta = new Metadata();
        public static readonly Metadata versionCounter_meta = new Metadata();
        public static readonly Metadata metadata_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("MultiplexRules");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // rules
            rules_meta.name = "rules";
            rules_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // versionCounter
            versionCounter_meta.name = "versionCounter";
            versionCounter_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            versionCounter_meta.default_value.uint_value = 0;

            // metadata
            metadata_meta.name = "metadata";
            metadata_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int rules = 1;
        public const int versionCounter = 2;
        public const int metadata = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_rules = "rules";
        public const String s_versionCounter = "versionCounter";
        public const String s_metadata = "metadata";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public MultiplexRules()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_rules == null)
        {
            m_rules = new Dictionary<String, List<String>>();
        }
        else
        {
            m_rules.Clear();
        }
        m_versionCounter = 0;
        if (m_metadata == null)
        {
            m_metadata = new Dictionary<String, List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>>();
        }
        else
        {
            m_metadata.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.MultiplexRules cloned = new global::Microsoft.ObjectStore.QueueService.MultiplexRules();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.MultiplexRules that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 1: map<string, vector<string>> rules
        if (this.rules != null)
        {
            if (that.rules == null)
            {
                that.rules = new Dictionary<String, List<String>>();
            }
            else
            {
                that.rules.Clear();
            }
            foreach (var keyValPair1 in this.rules)
            {
                String key2 = default(String);
                List<String> val3 = default(List<String>);
                key2 = keyValPair1.Key;
                if (keyValPair1.Value != null)
                {
                    if (val3 == null)
                    {
                        val3 = new List<String>();
                    }
                    else
                    {
                        val3.Clear();
                    }
                    foreach (var iter4 in keyValPair1.Value)
                    {
                        String tmpItem5 = default(String);
                        tmpItem5 = iter4;
                        val3.Add(tmpItem5);
                    }
                }
                else
                {
                    val3 = null;
                }
                that.rules[key2] = val3;
            }
        }
        else
        {
            that.rules = null;
        }
        // 2: uint64 versionCounter
        that.versionCounter = this.versionCounter;
        // 3: map<string, vector<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>>> metadata
        if (this.metadata != null)
        {
            if (that.metadata == null)
            {
                that.metadata = new Dictionary<String, List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>>();
            }
            else
            {
                that.metadata.Clear();
            }
            foreach (var keyValPair6 in this.metadata)
            {
                String key7 = default(String);
                List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>> val8 = default(List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>);
                key7 = keyValPair6.Key;
                if (keyValPair6.Value != null)
                {
                    if (val8 == null)
                    {
                        val8 = new List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>();
                    }
                    else
                    {
                        val8.Clear();
                    }
                    foreach (var iter9 in keyValPair6.Value)
                    {
                        Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> tmpItem10 = default(Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>);
                        tmpItem10 = (iter9 == null ? null : (Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>)iter9.Clone());
                        val8.Add(tmpItem10);
                    }
                }
                else
                {
                    val8 = null;
                }
                that.metadata[key7] = val8;
            }
        }
        else
        {
            that.metadata = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_rules(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }
        else
        {
            throw new BondException("Missing required field \"rules\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.versionCounter = reader.ReadUInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_metadata(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.rules:  // id=1
                    this.ReadField_impl_rules(reader, type);
                    seenRequiredFields.Set(__ordinals.rules, true);
                    break;
                case __ordinals.versionCounter:  // id=2
                    this.versionCounter = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    break;
                case __ordinals.metadata:  // id=3
                    this.ReadField_impl_metadata(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_rules(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(valueType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            List<String> val6 = new List<String>();
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            BondDataType elemType7;
            UInt32 count8;
        
            reader.ReadContainerBegin(out count8, out elemType7);
            if (val6.Capacity < count8)
            {
                val6.Capacity = (int)count8;
            }
        
            for (UInt32 i10 = 0; i10 < count8; i10++)
            {
                String element9 = default(String);
                 
                element9 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType7);
                val6.Add(element9);
            }
        
            reader.ReadContainerEnd();
            //
            this.m_rules[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_rules


    private void ReadField_impl_metadata(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(valueType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>> val6 = new List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>();
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            BondDataType elemType7;
            UInt32 count8;
        
            reader.ReadContainerBegin(out count8, out elemType7);
            global::Microsoft.Bond.ReadHelper.ValidateType(elemType7, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            if (val6.Capacity < count8)
            {
                val6.Capacity = (int)count8;
            }
        
            for (UInt32 i10 = 0; i10 < count8; i10++)
            {
                Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> element9 = new Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>();
                 
                element9.Read(reader);
                val6.Add(element9);
            }
        
            reader.ReadContainerEnd();
            //
            this.m_metadata[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_metadata


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.rules))
        {
            ok = false;
            missingFieldName = "rules";
            missingFieldId = __ordinals.rules;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(MultiplexRules))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.rules, Schema.rules_meta);
            UInt32 count2 = (m_rules == null ? 0 : (UInt32)m_rules.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_LIST);
            foreach (var iter1 in m_rules)
            {
                // Key
                    writer.WriteString(iter1.Key);
                // Value
                    UInt32 count4 = (iter1.Value == null ? 0 : (UInt32)iter1.Value.Count);
                        writer.WriteContainerBegin(count4, global::Microsoft.Bond.BondDataType.BT_STRING);
                        for (int idx3 = 0; idx3 < count4; idx3++)
                        {
                                writer.WriteString(iter1.Value[idx3]);
                        }
                        writer.WriteContainerEnd();
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.versionCounter_meta.default_value.Equals(m_versionCounter)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.versionCounter, Schema.versionCounter_meta);
                writer.WriteUInt64(m_versionCounter);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.versionCounter, Schema.versionCounter_meta);
        }

        UInt32 count5 = ((UInt32)m_metadata.Count);
        if (writeAllFields || count5 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.metadata, Schema.metadata_meta);
                writer.WriteContainerBegin(count5, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_LIST);
            foreach (var iter6 in m_metadata)
            {
                // Key
                    writer.WriteString(iter6.Key);
                // Value
                    UInt32 count8 = (iter6.Value == null ? 0 : (UInt32)iter6.Value.Count);
                        writer.WriteContainerBegin(count8, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                        for (int idx7 = 0; idx7 < count8; idx7++)
                        {
                                iter6.Value[idx7].Write(writer);
                        }
                        writer.WriteContainerEnd();
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.metadata, Schema.metadata_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="rules";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="versionCounter";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="metadata";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        field.type.element.element.bonded_type = true;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        MultiplexRules that = obj as MultiplexRules;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(MultiplexRules other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(MultiplexRules that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.rules == null) == (that.rules == null));
        equals = equals && ((this.rules == null) ? true : (this.rules.Count == that.rules.Count));
        equals = equals && ((this.versionCounter == that.versionCounter));
        equals = equals && ((this.metadata == null) == (that.metadata == null));
        equals = equals && ((this.metadata == null) ? true : (this.metadata.Count == that.metadata.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(MultiplexRules that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        if (equals && this.rules != null && this.rules.Count != 0)
        {
            foreach (var keyValPair1 in this.rules)
            {
                List<String> val2 = default(List<String>);
                equals = equals && that.rules.TryGetValue(keyValPair1.Key, out val2);
                if (equals)
                {
                        equals = equals && ((val2 == null) == (keyValPair1.Value == null));
                    equals = equals && ((val2 == null) ? true : (val2.Count == keyValPair1.Value.Count));
                    if (equals && val2 != null && val2.Count != 0)
                    {
                        var enum_1_3 = val2.GetEnumerator();
                        var enum_2_4 = keyValPair1.Value.GetEnumerator();
                        while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
                        {
                                equals = equals && ((enum_1_3.Current == null) == (enum_2_4.Current == null));
                            equals = equals && (enum_1_3.Current == null ? true : (enum_1_3.Current.Length == enum_2_4.Current.Length));
                            equals = equals && (enum_1_3.Current == null ? true : enum_1_3.Current == enum_2_4.Current);
                            if (!equals)
                            {
                                break;
                            }
                        }
                    }
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.metadata != null && this.metadata.Count != 0)
        {
            foreach (var keyValPair5 in this.metadata)
            {
                List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>> val6 = default(List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>);
                equals = equals && that.metadata.TryGetValue(keyValPair5.Key, out val6);
                if (equals)
                {
                        equals = equals && ((val6 == null) == (keyValPair5.Value == null));
                    equals = equals && ((val6 == null) ? true : (val6.Count == keyValPair5.Value.Count));
                    if (equals && val6 != null && val6.Count != 0)
                    {
                        var enum_1_7 = val6.GetEnumerator();
                        var enum_2_8 = keyValPair5.Value.GetEnumerator();
                        while (enum_1_7.MoveNext() && enum_2_8.MoveNext())
                        {
                                equals = equals && ((enum_1_7.Current == null) == (enum_2_8.Current == null));
                                equals = equals && (enum_1_7.Current == null ? true : enum_1_7.Current.MemberwiseCompare(enum_2_8.Current));
                            if (!equals)
                            {
                                break;
                            }
                        }
                    }
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_rules, this.rules, separator);
        sb.AppendFormat(format, __internal.s_versionCounter, this.versionCounter, separator);
        sb.AppendFormat(format, __internal.s_metadata, this.metadata, separator);
        
        return sb.ToString();
    } // ToString()

}; // class MultiplexRules

/// <summary>
/// For simple typed messages, such as string
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SimpleTypeHolder<T> : global::Microsoft.ObjectStore.QueueService.VoidMessage
{
    //
    // Fields
    //

    // 1: Required T value
    private T m_value;

    /// <summary>
    /// value
    /// </summary>
    public T value
    {
        get { return this.m_value; }
        set { this.m_value = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata value_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SimpleTypeHolder");
            runtimeName.Append("<");
            runtimeName.Append(GenericHelper.GetIdlTypeName(typeof(T)));
            runtimeName.Append(">");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // value
            value_meta.name = "value";
            value_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int value = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_value = "value";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SimpleTypeHolder()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_value = GenericHelper.Create<T>();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.SimpleTypeHolder<T> cloned = new global::Microsoft.ObjectStore.QueueService.SimpleTypeHolder<T>();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.SimpleTypeHolder<T> that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 1: T value
        that.value = (T)global::Microsoft.Bond.GenericHelper.Clone(this.value);
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_value(reader, global::Microsoft.Bond.GenericHelper.GetBondDataType(typeof(T)));
        }
        else
        {
            throw new BondException("Missing required field \"value\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.value:  // id=1
                    this.ReadField_impl_value(reader, type);
                    seenRequiredFields.Set(__ordinals.value, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_value(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
 
        global::Microsoft.Bond.GenericHelper.Read<T>(ref this.m_value, reader, typeInPayload);
    } // ReadField_impl_value


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.value))
        {
            ok = false;
            missingFieldName = "value";
            missingFieldId = __ordinals.value;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SimpleTypeHolder<T>))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

                GenericHelper.WriteField(writer, __ordinals.value, Schema.value_meta, m_value, typeof(T));
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="value";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = GenericHelper.CreateTypeDef(schema, typeof (T));

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SimpleTypeHolder<T> that = obj as SimpleTypeHolder<T>;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SimpleTypeHolder<T> other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SimpleTypeHolder<T> that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(this.value, that.value));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SimpleTypeHolder<T> that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_value, this.value, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SimpleTypeHolder<T>

/// <summary>
/// enumeration for queue creation result status
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum CreateQueueResponseStatus
{
                    
    CreateQueueResponseStatus_Success = 0,
/// <summary>
/// queue created successfully
/// </summary>
    CreateQueueResponseStatus_QueueExists,
/// <summary>
/// queue was not created because it already exists
/// </summary>
    CreateQueueResponseStatus_NotAllowed,
/// <summary>
/// queue was not created because CreateQueue call is disabled
/// </summary>
    CreateQueueResponseStatus_FailedQueueIDNotProvided,
/// <summary>
/// queue was not created because queueStringID was not provided
/// </summary>
    CreateQueueResponseStatus_Failed,
}; // enum CreateQueueResponseStatus


/// <summary>
/// response from CreateQueue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class CreateQueueResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus status
    private global::Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus m_status;

    /// <summary>
    /// status
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus status
    {
        get { return this.m_status; }
        set { this.m_status = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata status_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("CreateQueueResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // status
            status_meta.name = "status";
            status_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            status_meta.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus.CreateQueueResponseStatus_Success);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int status = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_status = "status";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public CreateQueueResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_status = global::Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus.CreateQueueResponseStatus_Success;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.CreateQueueResponse cloned = new global::Microsoft.ObjectStore.QueueService.CreateQueueResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.CreateQueueResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus status
        that.status = this.status;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.status = (global::Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus)reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"status\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.status:  // id=1
                    this.status = (global::Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.status, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.status))
        {
            ok = false;
            missingFieldName = "status";
            missingFieldId = __ordinals.status;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(CreateQueueResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.status, Schema.status_meta);
            writer.WriteInt32((Int32)m_status);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="status";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.CreateQueueResponseStatus.CreateQueueResponseStatus_Success);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        CreateQueueResponse that = obj as CreateQueueResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(CreateQueueResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(CreateQueueResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.status == that.status));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(CreateQueueResponse that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_status, this.status, separator);
        
        return sb.ToString();
    } // ToString()

}; // class CreateQueueResponse

/// <summary>
/// client passes one of these for each message to be deleted
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DeleteMessage : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required int64 messageId
    private Int64 m_messageId;

    // 2: Required int64 messageDeleteToken
    private Int64 m_messageDeleteToken;

    /// <summary>
    /// messageId
    /// </summary>
    public Int64 messageId
    {
        get { return this.m_messageId; }
        set { this.m_messageId = value; }
    }

    /// <summary>
    /// as returned by DequeueMessage
    /// </summary>
    public Int64 messageDeleteToken
    {
        get { return this.m_messageDeleteToken; }
        set { this.m_messageDeleteToken = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata messageId_meta = new Metadata();
        public static readonly Metadata messageDeleteToken_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DeleteMessage");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // messageId
            messageId_meta.name = "messageId";
            messageId_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            messageId_meta.default_value.int_value = 0;

            // messageDeleteToken
            messageDeleteToken_meta.name = "messageDeleteToken";
            messageDeleteToken_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            messageDeleteToken_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int messageId = 1;
        public const int messageDeleteToken = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_messageId = "messageId";
        public const String s_messageDeleteToken = "messageDeleteToken";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DeleteMessage()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_messageId = 0;
        m_messageDeleteToken = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DeleteMessage cloned = new global::Microsoft.ObjectStore.QueueService.DeleteMessage();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DeleteMessage that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int64 messageId
        that.messageId = this.messageId;
        // 2: int64 messageDeleteToken
        that.messageDeleteToken = this.messageDeleteToken;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.messageId = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"messageId\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.messageDeleteToken = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"messageDeleteToken\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.messageId:  // id=1
                    this.messageId = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.messageId, true);
                    break;
                case __ordinals.messageDeleteToken:  // id=2
                    this.messageDeleteToken = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.messageDeleteToken, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.messageId))
        {
            ok = false;
            missingFieldName = "messageId";
            missingFieldId = __ordinals.messageId;
        }
        if (ok && !seenFields.Get(__ordinals.messageDeleteToken))
        {
            ok = false;
            missingFieldName = "messageDeleteToken";
            missingFieldId = __ordinals.messageDeleteToken;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DeleteMessage))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.messageId, Schema.messageId_meta);
            writer.WriteInt64(m_messageId);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.messageDeleteToken, Schema.messageDeleteToken_meta);
            writer.WriteInt64(m_messageDeleteToken);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="messageId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="messageDeleteToken";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DeleteMessage that = obj as DeleteMessage;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DeleteMessage other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DeleteMessage that)
    {
        bool equals = true;
        
        equals = equals && ((this.messageId == that.messageId));
        equals = equals && ((this.messageDeleteToken == that.messageDeleteToken));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DeleteMessage that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_messageId, this.messageId, separator);
        sb.AppendFormat(format, __internal.s_messageDeleteToken, this.messageDeleteToken, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DeleteMessage

/// <summary>
/// request for message deletion
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DeleteMessageRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<Microsoft.ObjectStore.QueueService.DeleteMessage> messages
    private List<global::Microsoft.ObjectStore.QueueService.DeleteMessage> m_messages;

    // 2: Optional uint64 versionCounter
    private UInt64 m_versionCounter;

    /// <summary>
    /// messages
    /// </summary>
    public List<global::Microsoft.ObjectStore.QueueService.DeleteMessage> messages
    {
        get { return this.m_messages; }
        set { this.m_messages = value; }
    }

    /// <summary>
    /// multiple DeleteMessage arguments
    /// </summary>
    public UInt64 versionCounter
    {
        get { return this.m_versionCounter; }
        set { this.m_versionCounter = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata messages_meta = new Metadata();
        public static readonly Metadata versionCounter_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DeleteMessageRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // messages
            messages_meta.name = "messages";
            messages_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // versionCounter
            versionCounter_meta.name = "versionCounter";
            versionCounter_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            versionCounter_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int messages = 1;
        public const int versionCounter = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_messages = "messages";
        public const String s_versionCounter = "versionCounter";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DeleteMessageRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_messages == null)
        {
            m_messages = new List<global::Microsoft.ObjectStore.QueueService.DeleteMessage>();
        }
        else
        {
            m_messages.Clear();
        }
        m_versionCounter = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DeleteMessageRequest cloned = new global::Microsoft.ObjectStore.QueueService.DeleteMessageRequest();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DeleteMessageRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<Microsoft.ObjectStore.QueueService.DeleteMessage> messages
        if (this.messages != null)
        {
            if (that.messages == null)
            {
                that.messages = new List<global::Microsoft.ObjectStore.QueueService.DeleteMessage>();
            }
            else
            {
                that.messages.Clear();
            }
            foreach (var iter1 in this.messages)
            {
                global::Microsoft.ObjectStore.QueueService.DeleteMessage tmpItem2 = default(global::Microsoft.ObjectStore.QueueService.DeleteMessage);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.QueueService.DeleteMessage)iter1.Clone());
                that.messages.Add(tmpItem2);
            }
        }
        else
        {
            that.messages = null;
        }
        // 2: uint64 versionCounter
        that.versionCounter = this.versionCounter;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_messages(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"messages\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.versionCounter = reader.ReadUInt64();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.messages:  // id=1
                    this.ReadField_impl_messages(reader, type);
                    seenRequiredFields.Set(__ordinals.messages, true);
                    break;
                case __ordinals.versionCounter:  // id=2
                    this.versionCounter = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_messages(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_messages.Capacity < count2)
        {
            this.m_messages.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.QueueService.DeleteMessage element3 = new global::Microsoft.ObjectStore.QueueService.DeleteMessage();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_messages.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_messages


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.messages))
        {
            ok = false;
            missingFieldName = "messages";
            missingFieldId = __ordinals.messages;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DeleteMessageRequest))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.messages, Schema.messages_meta);
            UInt32 count2 = (m_messages == null ? 0 : (UInt32)m_messages.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_messages[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.versionCounter_meta.default_value.Equals(m_versionCounter)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.versionCounter, Schema.versionCounter_meta);
                writer.WriteUInt64(m_versionCounter);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.versionCounter, Schema.versionCounter_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="messages";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.DeleteMessage.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="versionCounter";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DeleteMessageRequest that = obj as DeleteMessageRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DeleteMessageRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DeleteMessageRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.messages == null) == (that.messages == null));
        equals = equals && ((this.messages == null) ? true : (this.messages.Count == that.messages.Count));
        equals = equals && ((this.versionCounter == that.versionCounter));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DeleteMessageRequest that)
    {
        bool equals = true;
        
        if (equals && this.messages != null && this.messages.Count != 0)
        {
            var enum_1_1 = this.messages.GetEnumerator();
            var enum_2_2 = that.messages.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_messages, DumpList(this.messages), separator);
        sb.AppendFormat(format, __internal.s_versionCounter, this.versionCounter, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class DeleteMessageRequest

/// <summary>
/// enumeration for DeleteMessage result status
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum DeleteMessageResponseStatus
{
                    
    DeleteMessageResponseStatus_Success = 0,
/// <summary>
/// DeleteMessage succeeded
/// </summary>
    DeleteMessageResponseStatus_MessageNotFound,
/// <summary>
/// an unknown messageId was passed in. Maybe message got already deleted, or messageId is greater than the head
/// </summary>
    DeleteMessageResponseStatus_TimeoutExpired,
/// <summary>
/// the message is known, but by the time the client called this, the cloaking timeout had already expired
/// </summary>
    DeleteMessageResponseStatus_NotAuthorized,
/// <summary>
/// the caller is not authorized to perform the delete operation
/// </summary>
    DeleteMessageResponseStatus_QueueNotFound,
}; // enum DeleteMessageResponseStatus


/// <summary>
/// response from DeleteMessage
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DeleteMessageResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus> status
    private List<global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus> m_status;

    /// <summary>
    /// status
    /// </summary>
    public List<global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus> status
    {
        get { return this.m_status; }
        set { this.m_status = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata status_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DeleteMessageResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // status
            status_meta.name = "status";
            status_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int status = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_status = "status";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DeleteMessageResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_status == null)
        {
            m_status = new List<global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus>();
        }
        else
        {
            m_status.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DeleteMessageResponse cloned = new global::Microsoft.ObjectStore.QueueService.DeleteMessageResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DeleteMessageResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus> status
        if (this.status != null)
        {
            if (that.status == null)
            {
                that.status = new List<global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus>();
            }
            else
            {
                that.status.Clear();
            }
            foreach (var iter1 in this.status)
            {
                global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus tmpItem2 = default(global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus);
                tmpItem2 = iter1;
                that.status.Add(tmpItem2);
            }
        }
        else
        {
            that.status = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_status(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"status\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.status:  // id=1
                    this.ReadField_impl_status(reader, type);
                    seenRequiredFields.Set(__ordinals.status, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_status(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_INT32);
        if (this.m_status.Capacity < count2)
        {
            this.m_status.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus element3 = default(global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus);
             
            Int32 tmp5 = reader.ReadInt32();
            element3 = (global::Microsoft.ObjectStore.QueueService.DeleteMessageResponseStatus)tmp5;
            this.m_status.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_status


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.status))
        {
            ok = false;
            missingFieldName = "status";
            missingFieldId = __ordinals.status;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DeleteMessageResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.status, Schema.status_meta);
            UInt32 count2 = (m_status == null ? 0 : (UInt32)m_status.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_INT32);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    writer.WriteInt32((Int32)m_status[idx1]);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="status";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DeleteMessageResponse that = obj as DeleteMessageResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DeleteMessageResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DeleteMessageResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.status == null) == (that.status == null));
        equals = equals && ((this.status == null) ? true : (this.status.Count == that.status.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DeleteMessageResponse that)
    {
        bool equals = true;
        
        if (equals && this.status != null && this.status.Count != 0)
        {
            var enum_1_1 = this.status.GetEnumerator();
            var enum_2_2 = that.status.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_status, DumpList(this.status), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class DeleteMessageResponse

/// <summary>
/// The request type for DequeueMessages
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DequeueRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required uint32 messageCount
    private UInt32 m_messageCount;

    // 2: Required bool peekOnly
    private Boolean m_peekOnly;

    // 3: Optional string useAllPartitionsOnHost
    private String m_useAllPartitionsOnHost;

    /// <summary>
    /// messageCount
    /// </summary>
    public UInt32 messageCount
    {
        get { return this.m_messageCount; }
        set { this.m_messageCount = value; }
    }

    /// <summary>
    /// retrieve at most these many messages. Maybe 0 if only interested in queue stats
    /// </summary>
    public Boolean peekOnly
    {
        get { return this.m_peekOnly; }
        set { this.m_peekOnly = value; }
    }

    /// <summary>
    /// set this to true if only want to peek at messages without cloaking. Will not receive a valid delete token.
    /// </summary>
    public String useAllPartitionsOnHost
    {
        get { return this.m_useAllPartitionsOnHost; }
        set { this.m_useAllPartitionsOnHost = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata messageCount_meta = new Metadata();
        public static readonly Metadata peekOnly_meta = new Metadata();
        public static readonly Metadata useAllPartitionsOnHost_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DequeueRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // messageCount
            messageCount_meta.name = "messageCount";
            messageCount_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            messageCount_meta.default_value.uint_value = 0;

            // peekOnly
            peekOnly_meta.name = "peekOnly";
            peekOnly_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            peekOnly_meta.default_value.uint_value = 0;

            // useAllPartitionsOnHost
            useAllPartitionsOnHost_meta.name = "useAllPartitionsOnHost";
            useAllPartitionsOnHost_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int messageCount = 1;
        public const int peekOnly = 2;
        public const int useAllPartitionsOnHost = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_messageCount = "messageCount";
        public const String s_peekOnly = "peekOnly";
        public const String s_useAllPartitionsOnHost = "useAllPartitionsOnHost";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DequeueRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_messageCount = 0;
        m_peekOnly = false;
        m_useAllPartitionsOnHost = default(String);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DequeueRequest cloned = new global::Microsoft.ObjectStore.QueueService.DequeueRequest();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DequeueRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: uint32 messageCount
        that.messageCount = this.messageCount;
        // 2: bool peekOnly
        that.peekOnly = this.peekOnly;
        // 3: string useAllPartitionsOnHost
        that.useAllPartitionsOnHost = this.useAllPartitionsOnHost;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.messageCount = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"messageCount\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.peekOnly = reader.ReadBool();
        }
        else
        {
            throw new BondException("Missing required field \"peekOnly\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.useAllPartitionsOnHost = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.messageCount:  // id=1
                    this.messageCount = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.messageCount, true);
                    break;
                case __ordinals.peekOnly:  // id=2
                    this.peekOnly = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    seenRequiredFields.Set(__ordinals.peekOnly, true);
                    break;
                case __ordinals.useAllPartitionsOnHost:  // id=3
                    this.useAllPartitionsOnHost = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.messageCount))
        {
            ok = false;
            missingFieldName = "messageCount";
            missingFieldId = __ordinals.messageCount;
        }
        if (ok && !seenFields.Get(__ordinals.peekOnly))
        {
            ok = false;
            missingFieldName = "peekOnly";
            missingFieldId = __ordinals.peekOnly;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DequeueRequest))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.messageCount, Schema.messageCount_meta);
            writer.WriteUInt32(m_messageCount);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.peekOnly, Schema.peekOnly_meta);
            writer.WriteBool(m_peekOnly);
        writer.WriteFieldEnd();
        if (writeAllFields || (m_useAllPartitionsOnHost != null))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.useAllPartitionsOnHost, Schema.useAllPartitionsOnHost_meta);
                writer.WriteString(m_useAllPartitionsOnHost);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.useAllPartitionsOnHost, Schema.useAllPartitionsOnHost_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="messageCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="peekOnly";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="useAllPartitionsOnHost";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = true;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DequeueRequest that = obj as DequeueRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DequeueRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DequeueRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.messageCount == that.messageCount));
        equals = equals && ((this.peekOnly == that.peekOnly));
        equals = equals && ((this.useAllPartitionsOnHost == null) == (that.useAllPartitionsOnHost == null));
        equals = equals && (this.useAllPartitionsOnHost == null ? true : (this.useAllPartitionsOnHost.Length == that.useAllPartitionsOnHost.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DequeueRequest that)
    {
        bool equals = true;
        
        equals = equals && (this.useAllPartitionsOnHost == null ? true : this.useAllPartitionsOnHost == that.useAllPartitionsOnHost);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_messageCount, this.messageCount, separator);
        sb.AppendFormat(format, __internal.s_peekOnly, this.peekOnly, separator);
        sb.AppendFormat(format, __internal.s_useAllPartitionsOnHost, this.useAllPartitionsOnHost, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DequeueRequest

/// <summary>
/// enumeration for DequeueMessage result status
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum DequeueResponseStatus
{
                    
    DequeueResponseStatus_Success = 0,
/// <summary>
/// DequeueMessage succeeded
/// </summary>
    DequeueResponseStatus_NoMessagesAvailable,
/// <summary>
/// DequeueMessage succeeded, but the caller requested at least one message, and there is none available
/// </summary>
    DequeueResponseStatus_NotAuthorized,
/// <summary>
/// the caller is not authorized to perform the dequeue operation
/// </summary>
    DequeueResponseStatus_QueueNotFound,
}; // enum DequeueResponseStatus


/// <summary>
/// all the details of a dequeued message
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DequeuedMessage : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required int64 messageId
    private Int64 m_messageId;

    // 2: Required int64 messageDeleteToken
    private Int64 m_messageDeleteToken;

    // 3: Required Microsoft.ObjectStore.QueueService.MessageEnvelope messageEnvelope
    private global::Microsoft.ObjectStore.QueueService.MessageEnvelope m_messageEnvelope;

    /// <summary>
    /// messageId
    /// </summary>
    public Int64 messageId
    {
        get { return this.m_messageId; }
        set { this.m_messageId = value; }
    }

    /// <summary>
    /// the message id
    /// </summary>
    public Int64 messageDeleteToken
    {
        get { return this.m_messageDeleteToken; }
        set { this.m_messageDeleteToken = value; }
    }

    /// <summary>
    /// the delete token
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.MessageEnvelope messageEnvelope
    {
        get { return this.m_messageEnvelope; }
        set { this.m_messageEnvelope = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata messageId_meta = new Metadata();
        public static readonly Metadata messageDeleteToken_meta = new Metadata();
        public static readonly Metadata messageEnvelope_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DequeuedMessage");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // messageId
            messageId_meta.name = "messageId";
            messageId_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            messageId_meta.default_value.int_value = 0;

            // messageDeleteToken
            messageDeleteToken_meta.name = "messageDeleteToken";
            messageDeleteToken_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            messageDeleteToken_meta.default_value.int_value = 0;

            // messageEnvelope
            messageEnvelope_meta.name = "messageEnvelope";
            messageEnvelope_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int messageId = 1;
        public const int messageDeleteToken = 2;
        public const int messageEnvelope = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_messageId = "messageId";
        public const String s_messageDeleteToken = "messageDeleteToken";
        public const String s_messageEnvelope = "messageEnvelope";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DequeuedMessage()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_messageId = 0;
        m_messageDeleteToken = 0;
        m_messageEnvelope = new global::Microsoft.ObjectStore.QueueService.MessageEnvelope();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DequeuedMessage cloned = new global::Microsoft.ObjectStore.QueueService.DequeuedMessage();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DequeuedMessage that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: int64 messageId
        that.messageId = this.messageId;
        // 2: int64 messageDeleteToken
        that.messageDeleteToken = this.messageDeleteToken;
        // 3: Microsoft.ObjectStore.QueueService.MessageEnvelope messageEnvelope
        that.messageEnvelope = (this.messageEnvelope == null ? null : (global::Microsoft.ObjectStore.QueueService.MessageEnvelope)this.messageEnvelope.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.messageId = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"messageId\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.messageDeleteToken = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"messageDeleteToken\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.messageEnvelope.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"messageEnvelope\", id=3");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(4);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.messageId:  // id=1
                    this.messageId = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.messageId, true);
                    break;
                case __ordinals.messageDeleteToken:  // id=2
                    this.messageDeleteToken = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.messageDeleteToken, true);
                    break;
                case __ordinals.messageEnvelope:  // id=3
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.messageEnvelope.Read(reader);
                    seenRequiredFields.Set(__ordinals.messageEnvelope, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.messageId))
        {
            ok = false;
            missingFieldName = "messageId";
            missingFieldId = __ordinals.messageId;
        }
        if (ok && !seenFields.Get(__ordinals.messageDeleteToken))
        {
            ok = false;
            missingFieldName = "messageDeleteToken";
            missingFieldId = __ordinals.messageDeleteToken;
        }
        if (ok && !seenFields.Get(__ordinals.messageEnvelope))
        {
            ok = false;
            missingFieldName = "messageEnvelope";
            missingFieldId = __ordinals.messageEnvelope;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DequeuedMessage))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.messageId, Schema.messageId_meta);
            writer.WriteInt64(m_messageId);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.messageDeleteToken, Schema.messageDeleteToken_meta);
            writer.WriteInt64(m_messageDeleteToken);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.messageEnvelope, Schema.messageEnvelope_meta);
            m_messageEnvelope.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="messageId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="messageDeleteToken";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="messageEnvelope";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.MessageEnvelope.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DequeuedMessage that = obj as DequeuedMessage;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DequeuedMessage other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DequeuedMessage that)
    {
        bool equals = true;
        
        equals = equals && ((this.messageId == that.messageId));
        equals = equals && ((this.messageDeleteToken == that.messageDeleteToken));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DequeuedMessage that)
    {
        bool equals = true;
        
        equals = equals && (this.messageEnvelope == null ? true : this.messageEnvelope.MemberwiseCompare(that.messageEnvelope));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_messageId, this.messageId, separator);
        sb.AppendFormat(format, __internal.s_messageDeleteToken, this.messageDeleteToken, separator);
        sb.AppendFormat(format, __internal.s_messageEnvelope, this.messageEnvelope, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DequeuedMessage

/// <summary>
/// response from DequeueMessage
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DequeueResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.ObjectStore.QueueService.DequeueResponseStatus status
    private global::Microsoft.ObjectStore.QueueService.DequeueResponseStatus m_status;

    // 2: Required int64 approximateAvailableMessages
    private Int64 m_approximateAvailableMessages;

    // 3: Required int64 approximateCloakedMessages
    private Int64 m_approximateCloakedMessages;

    // 4: Required vector<Microsoft.ObjectStore.QueueService.DequeuedMessage> messages
    private List<global::Microsoft.ObjectStore.QueueService.DequeuedMessage> m_messages;

    /// <summary>
    /// status
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.DequeueResponseStatus status
    {
        get { return this.m_status; }
        set { this.m_status = value; }
    }

    /// <summary>
    /// approximateAvailableMessages
    /// </summary>
    public Int64 approximateAvailableMessages
    {
        get { return this.m_approximateAvailableMessages; }
        set { this.m_approximateAvailableMessages = value; }
    }

    /// <summary>
    /// roughly these many messages are available for dequeue
    /// </summary>
    public Int64 approximateCloakedMessages
    {
        get { return this.m_approximateCloakedMessages; }
        set { this.m_approximateCloakedMessages = value; }
    }

    /// <summary>
    /// roughly these many messages are current cloaked (being processed by clients)
    /// </summary>
    public List<global::Microsoft.ObjectStore.QueueService.DequeuedMessage> messages
    {
        get { return this.m_messages; }
        set { this.m_messages = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata status_meta = new Metadata();
        public static readonly Metadata approximateAvailableMessages_meta = new Metadata();
        public static readonly Metadata approximateCloakedMessages_meta = new Metadata();
        public static readonly Metadata messages_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DequeueResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // status
            status_meta.name = "status";
            status_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            status_meta.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.DequeueResponseStatus.DequeueResponseStatus_Success);

            // approximateAvailableMessages
            approximateAvailableMessages_meta.name = "approximateAvailableMessages";
            approximateAvailableMessages_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            approximateAvailableMessages_meta.default_value.int_value = 0;

            // approximateCloakedMessages
            approximateCloakedMessages_meta.name = "approximateCloakedMessages";
            approximateCloakedMessages_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            approximateCloakedMessages_meta.default_value.int_value = 0;

            // messages
            messages_meta.name = "messages";
            messages_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int status = 1;
        public const int approximateAvailableMessages = 2;
        public const int approximateCloakedMessages = 3;
        public const int messages = 4;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_status = "status";
        public const String s_approximateAvailableMessages = "approximateAvailableMessages";
        public const String s_approximateCloakedMessages = "approximateCloakedMessages";
        public const String s_messages = "messages";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DequeueResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_status = global::Microsoft.ObjectStore.QueueService.DequeueResponseStatus.DequeueResponseStatus_Success;
        m_approximateAvailableMessages = 0;
        m_approximateCloakedMessages = 0;
        if (m_messages == null)
        {
            m_messages = new List<global::Microsoft.ObjectStore.QueueService.DequeuedMessage>();
        }
        else
        {
            m_messages.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DequeueResponse cloned = new global::Microsoft.ObjectStore.QueueService.DequeueResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DequeueResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.QueueService.DequeueResponseStatus status
        that.status = this.status;
        // 2: int64 approximateAvailableMessages
        that.approximateAvailableMessages = this.approximateAvailableMessages;
        // 3: int64 approximateCloakedMessages
        that.approximateCloakedMessages = this.approximateCloakedMessages;
        // 4: vector<Microsoft.ObjectStore.QueueService.DequeuedMessage> messages
        if (this.messages != null)
        {
            if (that.messages == null)
            {
                that.messages = new List<global::Microsoft.ObjectStore.QueueService.DequeuedMessage>();
            }
            else
            {
                that.messages.Clear();
            }
            foreach (var iter1 in this.messages)
            {
                global::Microsoft.ObjectStore.QueueService.DequeuedMessage tmpItem2 = default(global::Microsoft.ObjectStore.QueueService.DequeuedMessage);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.QueueService.DequeuedMessage)iter1.Clone());
                that.messages.Add(tmpItem2);
            }
        }
        else
        {
            that.messages = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.status = (global::Microsoft.ObjectStore.QueueService.DequeueResponseStatus)reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"status\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.approximateAvailableMessages = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"approximateAvailableMessages\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.approximateCloakedMessages = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"approximateCloakedMessages\", id=3");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_messages(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"messages\", id=4");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(5);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.status:  // id=1
                    this.status = (global::Microsoft.ObjectStore.QueueService.DequeueResponseStatus)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.status, true);
                    break;
                case __ordinals.approximateAvailableMessages:  // id=2
                    this.approximateAvailableMessages = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.approximateAvailableMessages, true);
                    break;
                case __ordinals.approximateCloakedMessages:  // id=3
                    this.approximateCloakedMessages = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.approximateCloakedMessages, true);
                    break;
                case __ordinals.messages:  // id=4
                    this.ReadField_impl_messages(reader, type);
                    seenRequiredFields.Set(__ordinals.messages, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_messages(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_messages.Capacity < count2)
        {
            this.m_messages.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.QueueService.DequeuedMessage element3 = new global::Microsoft.ObjectStore.QueueService.DequeuedMessage();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_messages.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_messages


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.status))
        {
            ok = false;
            missingFieldName = "status";
            missingFieldId = __ordinals.status;
        }
        if (ok && !seenFields.Get(__ordinals.approximateAvailableMessages))
        {
            ok = false;
            missingFieldName = "approximateAvailableMessages";
            missingFieldId = __ordinals.approximateAvailableMessages;
        }
        if (ok && !seenFields.Get(__ordinals.approximateCloakedMessages))
        {
            ok = false;
            missingFieldName = "approximateCloakedMessages";
            missingFieldId = __ordinals.approximateCloakedMessages;
        }
        if (ok && !seenFields.Get(__ordinals.messages))
        {
            ok = false;
            missingFieldName = "messages";
            missingFieldId = __ordinals.messages;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DequeueResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.status, Schema.status_meta);
            writer.WriteInt32((Int32)m_status);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.approximateAvailableMessages, Schema.approximateAvailableMessages_meta);
            writer.WriteInt64(m_approximateAvailableMessages);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.approximateCloakedMessages, Schema.approximateCloakedMessages_meta);
            writer.WriteInt64(m_approximateCloakedMessages);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.messages, Schema.messages_meta);
            UInt32 count2 = (m_messages == null ? 0 : (UInt32)m_messages.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_messages[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="status";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.DequeueResponseStatus.DequeueResponseStatus_Success);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="approximateAvailableMessages";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="approximateCloakedMessages";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="messages";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.DequeuedMessage.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DequeueResponse that = obj as DequeueResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DequeueResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DequeueResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.status == that.status));
        equals = equals && ((this.approximateAvailableMessages == that.approximateAvailableMessages));
        equals = equals && ((this.approximateCloakedMessages == that.approximateCloakedMessages));
        equals = equals && ((this.messages == null) == (that.messages == null));
        equals = equals && ((this.messages == null) ? true : (this.messages.Count == that.messages.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DequeueResponse that)
    {
        bool equals = true;
        
        if (equals && this.messages != null && this.messages.Count != 0)
        {
            var enum_1_1 = this.messages.GetEnumerator();
            var enum_2_2 = that.messages.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_status, this.status, separator);
        sb.AppendFormat(format, __internal.s_approximateAvailableMessages, this.approximateAvailableMessages, separator);
        sb.AppendFormat(format, __internal.s_approximateCloakedMessages, this.approximateCloakedMessages, separator);
        sb.AppendFormat(format, __internal.s_messages, DumpList(this.messages), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class DequeueResponse

/// <summary>
/// The request structure for EnqueueMesssages
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class EnqueueRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<Microsoft.ObjectStore.QueueService.MessageEnvelope> messageEnvelopes
    private List<global::Microsoft.ObjectStore.QueueService.MessageEnvelope> m_messageEnvelopes;

    // 2: Optional bool retainVersions
    private Boolean m_retainVersions;

    /// <summary>
    /// messageEnvelopes
    /// </summary>
    public List<global::Microsoft.ObjectStore.QueueService.MessageEnvelope> messageEnvelopes
    {
        get { return this.m_messageEnvelopes; }
        set { this.m_messageEnvelopes = value; }
    }

    /// <summary>
    /// retainVersions
    /// </summary>
    public Boolean retainVersions
    {
        get { return this.m_retainVersions; }
        set { this.m_retainVersions = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata messageEnvelopes_meta = new Metadata();
        public static readonly Metadata retainVersions_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("EnqueueRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // messageEnvelopes
            messageEnvelopes_meta.name = "messageEnvelopes";
            messageEnvelopes_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // retainVersions
            retainVersions_meta.name = "retainVersions";
            retainVersions_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            retainVersions_meta.default_value.uint_value = 1;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int messageEnvelopes = 1;
        public const int retainVersions = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_messageEnvelopes = "messageEnvelopes";
        public const String s_retainVersions = "retainVersions";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public EnqueueRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_messageEnvelopes == null)
        {
            m_messageEnvelopes = new List<global::Microsoft.ObjectStore.QueueService.MessageEnvelope>();
        }
        else
        {
            m_messageEnvelopes.Clear();
        }
        m_retainVersions = true;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.EnqueueRequest cloned = new global::Microsoft.ObjectStore.QueueService.EnqueueRequest();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.EnqueueRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<Microsoft.ObjectStore.QueueService.MessageEnvelope> messageEnvelopes
        if (this.messageEnvelopes != null)
        {
            if (that.messageEnvelopes == null)
            {
                that.messageEnvelopes = new List<global::Microsoft.ObjectStore.QueueService.MessageEnvelope>();
            }
            else
            {
                that.messageEnvelopes.Clear();
            }
            foreach (var iter1 in this.messageEnvelopes)
            {
                global::Microsoft.ObjectStore.QueueService.MessageEnvelope tmpItem2 = default(global::Microsoft.ObjectStore.QueueService.MessageEnvelope);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.QueueService.MessageEnvelope)iter1.Clone());
                that.messageEnvelopes.Add(tmpItem2);
            }
        }
        else
        {
            that.messageEnvelopes = null;
        }
        // 2: bool retainVersions
        that.retainVersions = this.retainVersions;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_messageEnvelopes(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"messageEnvelopes\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.retainVersions = reader.ReadBool();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.messageEnvelopes:  // id=1
                    this.ReadField_impl_messageEnvelopes(reader, type);
                    seenRequiredFields.Set(__ordinals.messageEnvelopes, true);
                    break;
                case __ordinals.retainVersions:  // id=2
                    this.retainVersions = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_messageEnvelopes(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_messageEnvelopes.Capacity < count2)
        {
            this.m_messageEnvelopes.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.QueueService.MessageEnvelope element3 = new global::Microsoft.ObjectStore.QueueService.MessageEnvelope();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_messageEnvelopes.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_messageEnvelopes


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.messageEnvelopes))
        {
            ok = false;
            missingFieldName = "messageEnvelopes";
            missingFieldId = __ordinals.messageEnvelopes;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(EnqueueRequest))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.messageEnvelopes, Schema.messageEnvelopes_meta);
            UInt32 count2 = (m_messageEnvelopes == null ? 0 : (UInt32)m_messageEnvelopes.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_messageEnvelopes[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.retainVersions_meta.default_value.Equals(m_retainVersions)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.retainVersions, Schema.retainVersions_meta);
                writer.WriteBool(m_retainVersions);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.retainVersions, Schema.retainVersions_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="messageEnvelopes";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.MessageEnvelope.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="retainVersions";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = true?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        EnqueueRequest that = obj as EnqueueRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(EnqueueRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(EnqueueRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.messageEnvelopes == null) == (that.messageEnvelopes == null));
        equals = equals && ((this.messageEnvelopes == null) ? true : (this.messageEnvelopes.Count == that.messageEnvelopes.Count));
        equals = equals && ((this.retainVersions == that.retainVersions));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(EnqueueRequest that)
    {
        bool equals = true;
        
        if (equals && this.messageEnvelopes != null && this.messageEnvelopes.Count != 0)
        {
            var enum_1_1 = this.messageEnvelopes.GetEnumerator();
            var enum_2_2 = that.messageEnvelopes.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_messageEnvelopes, DumpList(this.messageEnvelopes), separator);
        sb.AppendFormat(format, __internal.s_retainVersions, this.retainVersions, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class EnqueueRequest

/// <summary>
/// enumeration for EnqueueMessage result status
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum EnqueueResponseStatus
{
                    
    EnqueueResponseStatus_Success = 0,
/// <summary>
/// EnqueueMessages succeeded
/// </summary>
    EnqueueResponseStatus_FailedVersionCheck,
/// <summary>
/// EnqueueMessages due to a uniqueness conflict, compare details.versionState with passed in versionState for reason
/// </summary>
    EnqueueResponseStatus_Failed,
/// <summary>
/// EnqueueMessages failed
/// </summary>
    EnqueueResponseStatus_NotAuthorized,
/// <summary>
/// the caller is not authorized to perform the enqueue operation
/// </summary>
    EnqueueResponseStatus_QueueNotFound,
/// <summary>
/// The requested queue/partition combination does not exist
/// </summary>
    EnqueueResponseStatus_UnknownMultiplexRule,
/// <summary>
/// The requested multiplex rule does not exist
/// </summary>
    EnqueueResponseStatus_VersionKeyMissing,
}; // enum EnqueueResponseStatus


/// <summary>
/// EnqueueResponseDetails
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class EnqueueResponseDetails : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.ObjectStore.QueueService.EnqueueResponseStatus status
    private global::Microsoft.ObjectStore.QueueService.EnqueueResponseStatus m_status;

    // 2: Optional nullable<vector<Microsoft.ObjectStore.QueueService.VersionState>> versionStates
    private List<global::Microsoft.ObjectStore.QueueService.VersionState> m_versionStates;

    // 3: Optional vector<string> loggableTraceIDs
    private List<String> m_loggableTraceIDs;

    // 4: Optional int64 enqueueTimeTicks
    private Int64 m_enqueueTimeTicks;

    /// <summary>
    /// status
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.EnqueueResponseStatus status
    {
        get { return this.m_status; }
        set { this.m_status = value; }
    }

    /// <summary>
    /// versionStates
    /// </summary>
    public List<global::Microsoft.ObjectStore.QueueService.VersionState> versionStates
    {
        get { return this.m_versionStates; }
        set { this.m_versionStates = value; }
    }

    /// <summary>
    /// loggableTraceIDs
    /// </summary>
    public List<String> loggableTraceIDs
    {
        get { return this.m_loggableTraceIDs; }
        set { this.m_loggableTraceIDs = value; }
    }

    /// <summary>
    /// A list of loggable traceids (could be more than one due to multiplexing). See deployment specific schema for details (e.e. DLDWCoprocs.Types.bond)
    /// </summary>
    public Int64 enqueueTimeTicks
    {
        get { return this.m_enqueueTimeTicks; }
        set { this.m_enqueueTimeTicks = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata status_meta = new Metadata();
        public static readonly Metadata versionStates_meta = new Metadata();
        public static readonly Metadata loggableTraceIDs_meta = new Metadata();
        public static readonly Metadata enqueueTimeTicks_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("EnqueueResponseDetails");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // status
            status_meta.name = "status";
            status_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            status_meta.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.EnqueueResponseStatus.EnqueueResponseStatus_Success);

            // versionStates
            versionStates_meta.name = "versionStates";
            versionStates_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // loggableTraceIDs
            loggableTraceIDs_meta.name = "loggableTraceIDs";
            loggableTraceIDs_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // enqueueTimeTicks
            enqueueTimeTicks_meta.name = "enqueueTimeTicks";
            enqueueTimeTicks_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            enqueueTimeTicks_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int status = 1;
        public const int versionStates = 2;
        public const int loggableTraceIDs = 3;
        public const int enqueueTimeTicks = 4;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_status = "status";
        public const String s_versionStates = "versionStates";
        public const String s_loggableTraceIDs = "loggableTraceIDs";
        public const String s_enqueueTimeTicks = "enqueueTimeTicks";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public EnqueueResponseDetails()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_status = global::Microsoft.ObjectStore.QueueService.EnqueueResponseStatus.EnqueueResponseStatus_Success;
        m_versionStates = default(List<global::Microsoft.ObjectStore.QueueService.VersionState>);
        if (m_loggableTraceIDs == null)
        {
            m_loggableTraceIDs = new List<String>();
        }
        else
        {
            m_loggableTraceIDs.Clear();
        }
        m_enqueueTimeTicks = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails cloned = new global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.QueueService.EnqueueResponseStatus status
        that.status = this.status;
        // 2: nullable<vector<Microsoft.ObjectStore.QueueService.VersionState>> versionStates
        if (this.versionStates != null)
        {
            if (that.versionStates == null)
            {
                that.versionStates = new List<global::Microsoft.ObjectStore.QueueService.VersionState>();
            }
            else
            {
                that.versionStates.Clear();
            }
            foreach (var iter1 in this.versionStates)
            {
                global::Microsoft.ObjectStore.QueueService.VersionState tmpItem2 = default(global::Microsoft.ObjectStore.QueueService.VersionState);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.QueueService.VersionState)iter1.Clone());
                that.versionStates.Add(tmpItem2);
            }
        }
        else
        {
            that.versionStates = null;
        }
        // 3: vector<string> loggableTraceIDs
        if (this.loggableTraceIDs != null)
        {
            if (that.loggableTraceIDs == null)
            {
                that.loggableTraceIDs = new List<String>();
            }
            else
            {
                that.loggableTraceIDs.Clear();
            }
            foreach (var iter3 in this.loggableTraceIDs)
            {
                String tmpItem4 = default(String);
                tmpItem4 = iter3;
                that.loggableTraceIDs.Add(tmpItem4);
            }
        }
        else
        {
            that.loggableTraceIDs = null;
        }
        // 4: int64 enqueueTimeTicks
        that.enqueueTimeTicks = this.enqueueTimeTicks;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.status = (global::Microsoft.ObjectStore.QueueService.EnqueueResponseStatus)reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"status\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_versionStates(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_loggableTraceIDs(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.enqueueTimeTicks = reader.ReadInt64();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.status:  // id=1
                    this.status = (global::Microsoft.ObjectStore.QueueService.EnqueueResponseStatus)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.status, true);
                    break;
                case __ordinals.versionStates:  // id=2
                    this.ReadField_impl_versionStates(reader, type);
                    break;
                case __ordinals.loggableTraceIDs:  // id=3
                    this.ReadField_impl_loggableTraceIDs(reader, type);
                    break;
                case __ordinals.enqueueTimeTicks:  // id=4
                    this.enqueueTimeTicks = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_versionStates(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_LIST);
    
        if (size1 == 1)
        {
            if (this.m_versionStates == null) { this.m_versionStates = new List<global::Microsoft.ObjectStore.QueueService.VersionState>(); } 
            BondDataType elemType3;
            UInt32 count4;
        
            reader.ReadContainerBegin(out count4, out elemType3);
            global::Microsoft.Bond.ReadHelper.ValidateType(elemType3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            if (this.m_versionStates.Capacity < count4)
            {
                this.m_versionStates.Capacity = (int)count4;
            }
        
            for (UInt32 i6 = 0; i6 < count4; i6++)
            {
                global::Microsoft.ObjectStore.QueueService.VersionState element5 = new global::Microsoft.ObjectStore.QueueService.VersionState();
                 
                ReadHelper.ReadStruct(reader, element5, elemType3);
                this.m_versionStates.Add(element5);
            }
        
            reader.ReadContainerEnd();
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_versionStates


    private void ReadField_impl_loggableTraceIDs(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_loggableTraceIDs.Capacity < count2)
        {
            this.m_loggableTraceIDs.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_loggableTraceIDs.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_loggableTraceIDs


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.status))
        {
            ok = false;
            missingFieldName = "status";
            missingFieldId = __ordinals.status;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(EnqueueResponseDetails))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.status, Schema.status_meta);
            writer.WriteInt32((Int32)m_status);
        writer.WriteFieldEnd();
        UInt32 count1 = (UInt32)((m_versionStates != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.versionStates, Schema.versionStates_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_LIST);
                if (count1 != 0)
                {
                        UInt32 count3 = (m_versionStates == null ? 0 : (UInt32)m_versionStates.Count);
                    writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    for (int idx2 = 0; idx2 < count3; idx2++)
                    {
                            m_versionStates[idx2].Write(writer, true);
                    }
                    writer.WriteContainerEnd();
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.versionStates, Schema.versionStates_meta);
        }

        UInt32 count4 = ((UInt32)m_loggableTraceIDs.Count);
        if (writeAllFields || count4 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.loggableTraceIDs, Schema.loggableTraceIDs_meta);
                writer.WriteContainerBegin(count4, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx5 = 0; idx5 < count4; idx5++)
            {
                    writer.WriteString(m_loggableTraceIDs[idx5]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.loggableTraceIDs, Schema.loggableTraceIDs_meta);
        }

        if (writeAllFields || (!Schema.enqueueTimeTicks_meta.default_value.Equals(m_enqueueTimeTicks)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.enqueueTimeTicks, Schema.enqueueTimeTicks_meta);
                writer.WriteInt64(m_enqueueTimeTicks);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.enqueueTimeTicks, Schema.enqueueTimeTicks_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="status";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.EnqueueResponseStatus.EnqueueResponseStatus_Success);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="versionStates";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.element = global::Microsoft.ObjectStore.QueueService.VersionState.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="loggableTraceIDs";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="enqueueTimeTicks";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        EnqueueResponseDetails that = obj as EnqueueResponseDetails;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(EnqueueResponseDetails other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(EnqueueResponseDetails that)
    {
        bool equals = true;
        
        equals = equals && ((this.status == that.status));
        equals = equals && ((this.versionStates == null) == (that.versionStates == null));
        equals = equals && ((this.loggableTraceIDs == null) == (that.loggableTraceIDs == null));
        equals = equals && ((this.loggableTraceIDs == null) ? true : (this.loggableTraceIDs.Count == that.loggableTraceIDs.Count));
        equals = equals && ((this.enqueueTimeTicks == that.enqueueTimeTicks));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(EnqueueResponseDetails that)
    {
        bool equals = true;
        
        equals = equals && ((this.versionStates == null) == (that.versionStates == null));
        if (equals && !(this.versionStates == null))
        {
            if (equals && this.versionStates != null && this.versionStates.Count != 0)
            {
                var enum_1_1 = this.versionStates.GetEnumerator();
                var enum_2_2 = that.versionStates.GetEnumerator();
                while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
                {
                        equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                    equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                    if (!equals)
                    {
                        break;
                    }
                }
            }
        }
        if (equals && this.loggableTraceIDs != null && this.loggableTraceIDs.Count != 0)
        {
            var enum_1_3 = this.loggableTraceIDs.GetEnumerator();
            var enum_2_4 = that.loggableTraceIDs.GetEnumerator();
            while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
            {
                    equals = equals && ((enum_1_3.Current == null) == (enum_2_4.Current == null));
                equals = equals && (enum_1_3.Current == null ? true : (enum_1_3.Current.Length == enum_2_4.Current.Length));
                equals = equals && (enum_1_3.Current == null ? true : enum_1_3.Current == enum_2_4.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_status, this.status, separator);
        sb.AppendFormat(format, __internal.s_versionStates, this.versionStates, separator);
        sb.AppendFormat(format, __internal.s_loggableTraceIDs, DumpList(this.loggableTraceIDs), separator);
        sb.AppendFormat(format, __internal.s_enqueueTimeTicks, this.enqueueTimeTicks, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class EnqueueResponseDetails

/// <summary>
/// response from EnqueueMessage
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class EnqueueResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<Microsoft.ObjectStore.QueueService.EnqueueResponseDetails> details
    private List<global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails> m_details;

    /// <summary>
    /// details
    /// </summary>
    public List<global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails> details
    {
        get { return this.m_details; }
        set { this.m_details = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata details_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("EnqueueResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // details
            details_meta.name = "details";
            details_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int details = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_details = "details";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public EnqueueResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_details == null)
        {
            m_details = new List<global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails>();
        }
        else
        {
            m_details.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.EnqueueResponse cloned = new global::Microsoft.ObjectStore.QueueService.EnqueueResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.EnqueueResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<Microsoft.ObjectStore.QueueService.EnqueueResponseDetails> details
        if (this.details != null)
        {
            if (that.details == null)
            {
                that.details = new List<global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails>();
            }
            else
            {
                that.details.Clear();
            }
            foreach (var iter1 in this.details)
            {
                global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails tmpItem2 = default(global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails)iter1.Clone());
                that.details.Add(tmpItem2);
            }
        }
        else
        {
            that.details = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_details(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"details\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.details:  // id=1
                    this.ReadField_impl_details(reader, type);
                    seenRequiredFields.Set(__ordinals.details, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_details(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_details.Capacity < count2)
        {
            this.m_details.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails element3 = new global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_details.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_details


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.details))
        {
            ok = false;
            missingFieldName = "details";
            missingFieldId = __ordinals.details;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(EnqueueResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.details, Schema.details_meta);
            UInt32 count2 = (m_details == null ? 0 : (UInt32)m_details.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_details[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="details";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.EnqueueResponseDetails.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        EnqueueResponse that = obj as EnqueueResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(EnqueueResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(EnqueueResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.details == null) == (that.details == null));
        equals = equals && ((this.details == null) ? true : (this.details.Count == that.details.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(EnqueueResponse that)
    {
        bool equals = true;
        
        if (equals && this.details != null && this.details.Count != 0)
        {
            var enum_1_1 = this.details.GetEnumerator();
            var enum_2_2 = that.details.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_details, DumpList(this.details), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class EnqueueResponse

/// <summary>
/// SetMultiplexRuleRequest
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SetMultiplexRuleRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required string ruleName
    private String m_ruleName;

    // 2: Required vector<string> multiplex
    private List<String> m_multiplex;

    // 3: Optional uint64 versionCounter
    private UInt64 m_versionCounter;

    // 4: Optional string useAllPartitionsOnHost
    private String m_useAllPartitionsOnHost;

    // 5: Optional vector<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>> metadata
    private List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>> m_metadata;

    /// <summary>
    /// ruleName
    /// </summary>
    public String ruleName
    {
        get { return this.m_ruleName; }
        set { this.m_ruleName = value; }
    }

    /// <summary>
    /// multiplex
    /// </summary>
    public List<String> multiplex
    {
        get { return this.m_multiplex; }
        set { this.m_multiplex = value; }
    }

    /// <summary>
    /// versionCounter
    /// </summary>
    public UInt64 versionCounter
    {
        get { return this.m_versionCounter; }
        set { this.m_versionCounter = value; }
    }

    /// <summary>
    /// useAllPartitionsOnHost
    /// </summary>
    public String useAllPartitionsOnHost
    {
        get { return this.m_useAllPartitionsOnHost; }
        set { this.m_useAllPartitionsOnHost = value; }
    }

    /// <summary>
    /// If this is set to a machine name, subscribe to all queue partitions on that machine. This will create a covering set if called once from all machines
    /// </summary>
    public List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>> metadata
    {
        get { return this.m_metadata; }
        set { this.m_metadata = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata ruleName_meta = new Metadata();
        public static readonly Metadata multiplex_meta = new Metadata();
        public static readonly Metadata versionCounter_meta = new Metadata();
        public static readonly Metadata useAllPartitionsOnHost_meta = new Metadata();
        public static readonly Metadata metadata_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SetMultiplexRuleRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // ruleName
            ruleName_meta.name = "ruleName";
            ruleName_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // multiplex
            multiplex_meta.name = "multiplex";
            multiplex_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // versionCounter
            versionCounter_meta.name = "versionCounter";
            versionCounter_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            versionCounter_meta.default_value.uint_value = 0;

            // useAllPartitionsOnHost
            useAllPartitionsOnHost_meta.name = "useAllPartitionsOnHost";
            useAllPartitionsOnHost_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // metadata
            metadata_meta.name = "metadata";
            metadata_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int ruleName = 1;
        public const int multiplex = 2;
        public const int versionCounter = 3;
        public const int useAllPartitionsOnHost = 4;
        public const int metadata = 5;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_ruleName = "ruleName";
        public const String s_multiplex = "multiplex";
        public const String s_versionCounter = "versionCounter";
        public const String s_useAllPartitionsOnHost = "useAllPartitionsOnHost";
        public const String s_metadata = "metadata";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SetMultiplexRuleRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_ruleName = string.Empty;
        if (m_multiplex == null)
        {
            m_multiplex = new List<String>();
        }
        else
        {
            m_multiplex.Clear();
        }
        m_versionCounter = 0;
        m_useAllPartitionsOnHost = default(String);
        if (m_metadata == null)
        {
            m_metadata = new List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>();
        }
        else
        {
            m_metadata.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleRequest cloned = new global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleRequest();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string ruleName
        that.ruleName = this.ruleName;
        // 2: vector<string> multiplex
        if (this.multiplex != null)
        {
            if (that.multiplex == null)
            {
                that.multiplex = new List<String>();
            }
            else
            {
                that.multiplex.Clear();
            }
            foreach (var iter1 in this.multiplex)
            {
                String tmpItem2 = default(String);
                tmpItem2 = iter1;
                that.multiplex.Add(tmpItem2);
            }
        }
        else
        {
            that.multiplex = null;
        }
        // 3: uint64 versionCounter
        that.versionCounter = this.versionCounter;
        // 4: string useAllPartitionsOnHost
        that.useAllPartitionsOnHost = this.useAllPartitionsOnHost;
        // 5: vector<bonded<Microsoft.ObjectStore.QueueService.VoidMessage>> metadata
        if (this.metadata != null)
        {
            if (that.metadata == null)
            {
                that.metadata = new List<Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>>();
            }
            else
            {
                that.metadata.Clear();
            }
            foreach (var iter3 in this.metadata)
            {
                Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> tmpItem4 = default(Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>);
                tmpItem4 = (iter3 == null ? null : (Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>)iter3.Clone());
                that.metadata.Add(tmpItem4);
            }
        }
        else
        {
            that.metadata = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ruleName = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"ruleName\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_multiplex(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"multiplex\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.versionCounter = reader.ReadUInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.useAllPartitionsOnHost = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_metadata(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.ruleName:  // id=1
                    this.ruleName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.ruleName, true);
                    break;
                case __ordinals.multiplex:  // id=2
                    this.ReadField_impl_multiplex(reader, type);
                    seenRequiredFields.Set(__ordinals.multiplex, true);
                    break;
                case __ordinals.versionCounter:  // id=3
                    this.versionCounter = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    break;
                case __ordinals.useAllPartitionsOnHost:  // id=4
                    this.useAllPartitionsOnHost = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.metadata:  // id=5
                    this.ReadField_impl_metadata(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_multiplex(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_multiplex.Capacity < count2)
        {
            this.m_multiplex.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            String element3 = default(String);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadString(reader, elemType1);
            this.m_multiplex.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_multiplex


    private void ReadField_impl_metadata(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_metadata.Capacity < count2)
        {
            this.m_metadata.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage> element3 = new Bonded<global::Microsoft.ObjectStore.QueueService.VoidMessage>();
             
            element3.Read(reader);
            this.m_metadata.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_metadata


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.ruleName))
        {
            ok = false;
            missingFieldName = "ruleName";
            missingFieldId = __ordinals.ruleName;
        }
        if (ok && !seenFields.Get(__ordinals.multiplex))
        {
            ok = false;
            missingFieldName = "multiplex";
            missingFieldId = __ordinals.multiplex;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SetMultiplexRuleRequest))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.ruleName, Schema.ruleName_meta);
            writer.WriteString(m_ruleName);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.multiplex, Schema.multiplex_meta);
            UInt32 count2 = (m_multiplex == null ? 0 : (UInt32)m_multiplex.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRING);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    writer.WriteString(m_multiplex[idx1]);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.versionCounter_meta.default_value.Equals(m_versionCounter)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.versionCounter, Schema.versionCounter_meta);
                writer.WriteUInt64(m_versionCounter);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.versionCounter, Schema.versionCounter_meta);
        }

        if (writeAllFields || (m_useAllPartitionsOnHost != null))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.useAllPartitionsOnHost, Schema.useAllPartitionsOnHost_meta);
                writer.WriteString(m_useAllPartitionsOnHost);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.useAllPartitionsOnHost, Schema.useAllPartitionsOnHost_meta);
        }

        UInt32 count3 = ((UInt32)m_metadata.Count);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.metadata, Schema.metadata_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx4 = 0; idx4 < count3; idx4++)
            {
                    m_metadata[idx4].Write(writer);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.metadata, Schema.metadata_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="ruleName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="multiplex";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="versionCounter";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="useAllPartitionsOnHost";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = true;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="metadata";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.QueueService.VoidMessage.GetTypeDef(schema);
        field.type.element.bonded_type = true;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SetMultiplexRuleRequest that = obj as SetMultiplexRuleRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SetMultiplexRuleRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SetMultiplexRuleRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.ruleName == null) == (that.ruleName == null));
        equals = equals && (this.ruleName == null ? true : (this.ruleName.Length == that.ruleName.Length));
        equals = equals && ((this.multiplex == null) == (that.multiplex == null));
        equals = equals && ((this.multiplex == null) ? true : (this.multiplex.Count == that.multiplex.Count));
        equals = equals && ((this.versionCounter == that.versionCounter));
        equals = equals && ((this.useAllPartitionsOnHost == null) == (that.useAllPartitionsOnHost == null));
        equals = equals && (this.useAllPartitionsOnHost == null ? true : (this.useAllPartitionsOnHost.Length == that.useAllPartitionsOnHost.Length));
        equals = equals && ((this.metadata == null) == (that.metadata == null));
        equals = equals && ((this.metadata == null) ? true : (this.metadata.Count == that.metadata.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SetMultiplexRuleRequest that)
    {
        bool equals = true;
        
        equals = equals && (this.ruleName == null ? true : this.ruleName == that.ruleName);
        if (equals && this.multiplex != null && this.multiplex.Count != 0)
        {
            var enum_1_1 = this.multiplex.GetEnumerator();
            var enum_2_2 = that.multiplex.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : (enum_1_1.Current.Length == enum_2_2.Current.Length));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current == enum_2_2.Current);
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.useAllPartitionsOnHost == null ? true : this.useAllPartitionsOnHost == that.useAllPartitionsOnHost);
        if (equals && this.metadata != null && this.metadata.Count != 0)
        {
            var enum_1_3 = this.metadata.GetEnumerator();
            var enum_2_4 = that.metadata.GetEnumerator();
            while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
            {
                    equals = equals && ((enum_1_3.Current == null) == (enum_2_4.Current == null));
                    equals = equals && (enum_1_3.Current == null ? true : enum_1_3.Current.MemberwiseCompare(enum_2_4.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_ruleName, this.ruleName, separator);
        sb.AppendFormat(format, __internal.s_multiplex, DumpList(this.multiplex), separator);
        sb.AppendFormat(format, __internal.s_versionCounter, this.versionCounter, separator);
        sb.AppendFormat(format, __internal.s_useAllPartitionsOnHost, this.useAllPartitionsOnHost, separator);
        sb.AppendFormat(format, __internal.s_metadata, DumpList(this.metadata), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class SetMultiplexRuleRequest

/// <summary>
/// SetMultiplexRuleResponseStatus
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum SetMultiplexRuleResponseStatus
{
                    
    SetMultiplexRuleResponseStatus_Success = 0,
    SetMultiplexRuleResponseStatus_Failed,
    SetMultiplexRuleResponseStatus_NotAuthorized,
/// <summary>
/// the caller is not authorized to perform the enqueue operation
/// </summary>
    SetMultiplexRuleResponseStatus_QueueNotFound,
/// <summary>
/// The requested queue/partition combination does not exist
/// </summary>
    SetMultiplexRuleResponseStatus_VersionConflict,
}; // enum SetMultiplexRuleResponseStatus


/// <summary>
/// SetMultiplexRuleResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class SetMultiplexRuleResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus status
    private global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus m_status;

    /// <summary>
    /// status
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus status
    {
        get { return this.m_status; }
        set { this.m_status = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata status_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("SetMultiplexRuleResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // status
            status_meta.name = "status";
            status_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            status_meta.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus.SetMultiplexRuleResponseStatus_Success);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int status = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_status = "status";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public SetMultiplexRuleResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_status = global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus.SetMultiplexRuleResponseStatus_Success;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponse cloned = new global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus status
        that.status = this.status;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.status = (global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus)reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"status\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.status:  // id=1
                    this.status = (global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.status, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.status))
        {
            ok = false;
            missingFieldName = "status";
            missingFieldId = __ordinals.status;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(SetMultiplexRuleResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.status, Schema.status_meta);
            writer.WriteInt32((Int32)m_status);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="status";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.SetMultiplexRuleResponseStatus.SetMultiplexRuleResponseStatus_Success);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        SetMultiplexRuleResponse that = obj as SetMultiplexRuleResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(SetMultiplexRuleResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(SetMultiplexRuleResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.status == that.status));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(SetMultiplexRuleResponse that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_status, this.status, separator);
        
        return sb.ToString();
    } // ToString()

}; // class SetMultiplexRuleResponse

/// <summary>
/// GetMultiplexRulesResponseStatus
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum GetMultiplexRulesResponseStatus
{
                    
    GetMultiplexRulesResponseStatus_Success = 0,
    GetMultiplexRulesResponseStatus_Failed,
    GetMultiplexRulesResponseStatus_NotAuthorized,
/// <summary>
/// the caller is not authorized to perform the enqueue operation
/// </summary>
    GetMultiplexRulesResponseStatus_QueueNotFound,
}; // enum GetMultiplexRulesResponseStatus


/// <summary>
/// GetMultiplexRulesResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class GetMultiplexRulesResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus status
    private global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus m_status;

    // 2: Required Microsoft.ObjectStore.QueueService.MultiplexRules multiplexRules
    private global::Microsoft.ObjectStore.QueueService.MultiplexRules m_multiplexRules;

    /// <summary>
    /// status
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus status
    {
        get { return this.m_status; }
        set { this.m_status = value; }
    }

    /// <summary>
    /// multiplexRules
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.MultiplexRules multiplexRules
    {
        get { return this.m_multiplexRules; }
        set { this.m_multiplexRules = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata status_meta = new Metadata();
        public static readonly Metadata multiplexRules_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("GetMultiplexRulesResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // status
            status_meta.name = "status";
            status_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            status_meta.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus.GetMultiplexRulesResponseStatus_Success);

            // multiplexRules
            multiplexRules_meta.name = "multiplexRules";
            multiplexRules_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int status = 1;
        public const int multiplexRules = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_status = "status";
        public const String s_multiplexRules = "multiplexRules";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public GetMultiplexRulesResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_status = global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus.GetMultiplexRulesResponseStatus_Success;
        m_multiplexRules = new global::Microsoft.ObjectStore.QueueService.MultiplexRules();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponse cloned = new global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus status
        that.status = this.status;
        // 2: Microsoft.ObjectStore.QueueService.MultiplexRules multiplexRules
        that.multiplexRules = (this.multiplexRules == null ? null : (global::Microsoft.ObjectStore.QueueService.MultiplexRules)this.multiplexRules.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.status = (global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus)reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"status\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.multiplexRules.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"multiplexRules\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.status:  // id=1
                    this.status = (global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.status, true);
                    break;
                case __ordinals.multiplexRules:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.multiplexRules.Read(reader);
                    seenRequiredFields.Set(__ordinals.multiplexRules, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.status))
        {
            ok = false;
            missingFieldName = "status";
            missingFieldId = __ordinals.status;
        }
        if (ok && !seenFields.Get(__ordinals.multiplexRules))
        {
            ok = false;
            missingFieldName = "multiplexRules";
            missingFieldId = __ordinals.multiplexRules;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(GetMultiplexRulesResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.status, Schema.status_meta);
            writer.WriteInt32((Int32)m_status);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.multiplexRules, Schema.multiplexRules_meta);
            m_multiplexRules.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="status";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.GetMultiplexRulesResponseStatus.GetMultiplexRulesResponseStatus_Success);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="multiplexRules";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.MultiplexRules.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        GetMultiplexRulesResponse that = obj as GetMultiplexRulesResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(GetMultiplexRulesResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(GetMultiplexRulesResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.status == that.status));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(GetMultiplexRulesResponse that)
    {
        bool equals = true;
        
        equals = equals && (this.multiplexRules == null ? true : this.multiplexRules.MemberwiseCompare(that.multiplexRules));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_status, this.status, separator);
        sb.AppendFormat(format, __internal.s_multiplexRules, this.multiplexRules, separator);
        
        return sb.ToString();
    } // ToString()

}; // class GetMultiplexRulesResponse

/// <summary>
/// The following types are used for test requests only
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PartitionKeyTestResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required string primaryMachineName
    private String m_primaryMachineName;

    /// <summary>
    /// primaryMachineName
    /// </summary>
    public String primaryMachineName
    {
        get { return this.m_primaryMachineName; }
        set { this.m_primaryMachineName = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata primaryMachineName_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PartitionKeyTestResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // primaryMachineName
            primaryMachineName_meta.name = "primaryMachineName";
            primaryMachineName_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int primaryMachineName = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_primaryMachineName = "primaryMachineName";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PartitionKeyTestResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_primaryMachineName = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.PartitionKeyTestResponse cloned = new global::Microsoft.ObjectStore.QueueService.PartitionKeyTestResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.PartitionKeyTestResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string primaryMachineName
        that.primaryMachineName = this.primaryMachineName;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.primaryMachineName = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"primaryMachineName\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.primaryMachineName:  // id=1
                    this.primaryMachineName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.primaryMachineName, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.primaryMachineName))
        {
            ok = false;
            missingFieldName = "primaryMachineName";
            missingFieldId = __ordinals.primaryMachineName;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PartitionKeyTestResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.primaryMachineName, Schema.primaryMachineName_meta);
            writer.WriteString(m_primaryMachineName);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="primaryMachineName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PartitionKeyTestResponse that = obj as PartitionKeyTestResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PartitionKeyTestResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PartitionKeyTestResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.primaryMachineName == null) == (that.primaryMachineName == null));
        equals = equals && (this.primaryMachineName == null ? true : (this.primaryMachineName.Length == that.primaryMachineName.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PartitionKeyTestResponse that)
    {
        bool equals = true;
        
        equals = equals && (this.primaryMachineName == null ? true : this.primaryMachineName == that.primaryMachineName);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_primaryMachineName, this.primaryMachineName, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PartitionKeyTestResponse

/// <summary>
/// The request structure for DRIVersionConditionsRequest
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DRIVersionConditionsRequest : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional Microsoft.ObjectStore.QueueService.VersionConditions versionConditions
    private global::Microsoft.ObjectStore.QueueService.VersionConditions m_versionConditions;

    // 2: Optional bool clear
    private Boolean m_clear;

    /// <summary>
    /// versionConditions
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.VersionConditions versionConditions
    {
        get { return this.m_versionConditions; }
        set { this.m_versionConditions = value; }
    }

    /// <summary>
    /// clear
    /// </summary>
    public Boolean clear
    {
        get { return this.m_clear; }
        set { this.m_clear = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata versionConditions_meta = new Metadata();
        public static readonly Metadata clear_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DRIVersionConditionsRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // versionConditions
            versionConditions_meta.name = "versionConditions";
            versionConditions_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // clear
            clear_meta.name = "clear";
            clear_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            clear_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int versionConditions = 1;
        public const int clear = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_versionConditions = "versionConditions";
        public const String s_clear = "clear";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DRIVersionConditionsRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_versionConditions = new global::Microsoft.ObjectStore.QueueService.VersionConditions();
        m_clear = false;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsRequest cloned = new global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsRequest();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.QueueService.VersionConditions versionConditions
        that.versionConditions = (this.versionConditions == null ? null : (global::Microsoft.ObjectStore.QueueService.VersionConditions)this.versionConditions.Clone());
        // 2: bool clear
        that.clear = this.clear;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.versionConditions.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.clear = reader.ReadBool();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.versionConditions:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.versionConditions.Read(reader);
                    break;
                case __ordinals.clear:  // id=2
                    this.clear = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DRIVersionConditionsRequest))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.versionConditions, Schema.versionConditions_meta);
            m_versionConditions.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.clear_meta.default_value.Equals(m_clear)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.clear, Schema.clear_meta);
                writer.WriteBool(m_clear);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.clear, Schema.clear_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="versionConditions";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.VersionConditions.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="clear";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DRIVersionConditionsRequest that = obj as DRIVersionConditionsRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DRIVersionConditionsRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DRIVersionConditionsRequest that)
    {
        bool equals = true;
        
        equals = equals && ((this.clear == that.clear));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DRIVersionConditionsRequest that)
    {
        bool equals = true;
        
        equals = equals && (this.versionConditions == null ? true : this.versionConditions.MemberwiseCompare(that.versionConditions));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_versionConditions, this.versionConditions, separator);
        sb.AppendFormat(format, __internal.s_clear, this.clear, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DRIVersionConditionsRequest

/// <summary>
/// enumeration for DRIVersionConditions result status
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum DRIVersionConditionsResponseStatus
{
                    
    DRIVersionConditionsResponseStatus_Success = 0,
/// <summary>
/// DRIVersionConditions succeeded
/// </summary>
    DRIVersionConditionsResponseStatus_Failed,
/// <summary>
/// DRIVersionConditions failed
/// </summary>
    DRIVersionConditionsResponseStatus_NotAuthorized,
/// <summary>
/// the caller is not authorized to perform the enqueue operation
/// </summary>
    DRIVersionConditionsResponseStatus_QueueNotFound,
/// <summary>
/// The requested queue/partition combination does not exist
/// </summary>
    DRIVersionConditionsResponseStatus_VersionKeyMissing,
}; // enum DRIVersionConditionsResponseStatus


/// <summary>
/// The response structure for DRIVersionConditionsRequest
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DRIVersionConditionsResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional Microsoft.ObjectStore.QueueService.VersionConditions versionConditions
    private global::Microsoft.ObjectStore.QueueService.VersionConditions m_versionConditions;

    // 2: Required Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus status
    private global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus m_status;

    /// <summary>
    /// versionConditions
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.VersionConditions versionConditions
    {
        get { return this.m_versionConditions; }
        set { this.m_versionConditions = value; }
    }

    /// <summary>
    /// status
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus status
    {
        get { return this.m_status; }
        set { this.m_status = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata versionConditions_meta = new Metadata();
        public static readonly Metadata status_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DRIVersionConditionsResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService." + meta.name;


            // versionConditions
            versionConditions_meta.name = "versionConditions";
            versionConditions_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // status
            status_meta.name = "status";
            status_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            status_meta.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus.DRIVersionConditionsResponseStatus_Success);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int versionConditions = 1;
        public const int status = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_versionConditions = "versionConditions";
        public const String s_status = "status";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DRIVersionConditionsResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_versionConditions = new global::Microsoft.ObjectStore.QueueService.VersionConditions();
        m_status = global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus.DRIVersionConditionsResponseStatus_Success;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponse cloned = new global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.QueueService.VersionConditions versionConditions
        that.versionConditions = (this.versionConditions == null ? null : (global::Microsoft.ObjectStore.QueueService.VersionConditions)this.versionConditions.Clone());
        // 2: Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus status
        that.status = this.status;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.versionConditions.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.status = (global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus)reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"status\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.versionConditions:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.versionConditions.Read(reader);
                    break;
                case __ordinals.status:  // id=2
                    this.status = (global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.status, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.status))
        {
            ok = false;
            missingFieldName = "status";
            missingFieldId = __ordinals.status;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DRIVersionConditionsResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.versionConditions, Schema.versionConditions_meta);
            m_versionConditions.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.status, Schema.status_meta);
            writer.WriteInt32((Int32)m_status);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="versionConditions";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.VersionConditions.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="status";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::Microsoft.ObjectStore.QueueService.DRIVersionConditionsResponseStatus.DRIVersionConditionsResponseStatus_Success);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DRIVersionConditionsResponse that = obj as DRIVersionConditionsResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DRIVersionConditionsResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DRIVersionConditionsResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.status == that.status));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DRIVersionConditionsResponse that)
    {
        bool equals = true;
        
        equals = equals && (this.versionConditions == null ? true : this.versionConditions.MemberwiseCompare(that.versionConditions));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_versionConditions, this.versionConditions, separator);
        sb.AppendFormat(format, __internal.s_status, this.status, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DRIVersionConditionsResponse
namespace Multi
{

/// <summary>
/// key types for multi-tennant service
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class AppID : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required string appID
    private String m_appID;

    /// <summary>
    /// appID
    /// </summary>
    public String appID
    {
        get { return this.m_appID; }
        set { this.m_appID = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata appID_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("AppID");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService.Multi." + meta.name;


            // appID
            appID_meta.name = "appID";
            appID_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int appID = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_appID = "appID";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public AppID()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_appID = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.Multi.AppID cloned = new global::Microsoft.ObjectStore.QueueService.Multi.AppID();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.Multi.AppID that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string appID
        that.appID = this.appID;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.appID = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"appID\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.appID:  // id=1
                    this.appID = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.appID, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.appID))
        {
            ok = false;
            missingFieldName = "appID";
            missingFieldId = __ordinals.appID;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(AppID))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.appID, Schema.appID_meta);
            writer.WriteString(m_appID);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="appID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        AppID that = obj as AppID;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(AppID other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(AppID that)
    {
        bool equals = true;
        
        equals = equals && ((this.appID == null) == (that.appID == null));
        equals = equals && (this.appID == null ? true : (this.appID.Length == that.appID.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(AppID that)
    {
        bool equals = true;
        
        equals = equals && (this.appID == null ? true : this.appID == that.appID);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_appID, this.appID, separator);
        
        return sb.ToString();
    } // ToString()

}; // class AppID

/// <summary>
/// key for requests
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class QueueKey : global::Microsoft.ObjectStore.QueueService.QueueKeyBase
{
    //
    // Fields
    //

    // 100: Required vector<uint8> messageKey
    private List<Byte> m_messageKey;

    // 200: Required Microsoft.ObjectStore.QueueService.QueueID queueID
    private global::Microsoft.ObjectStore.QueueService.QueueID m_queueID;

    /// <summary>
    /// messageKey
    /// </summary>
    public List<Byte> messageKey
    {
        get { return this.m_messageKey; }
        set { this.m_messageKey = value; }
    }

    /// <summary>
    /// hack
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.QueueID queueID
    {
        get { return this.m_queueID; }
        set { this.m_queueID = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata messageKey_meta = new Metadata();
        public static readonly Metadata queueID_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("QueueKey");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService.Multi." + meta.name;


            // messageKey
            messageKey_meta.name = "messageKey";
            messageKey_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // queueID
            queueID_meta.name = "queueID";
            queueID_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            queueID_meta.attributes["KeyMetadata"] = "PartitionKey";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int messageKey = 100;
        public const int queueID = 200;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_messageKey = "messageKey";
        public const String s_queueID = "queueID";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public QueueKey()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_messageKey == null)
        {
            m_messageKey = new List<Byte>();
        }
        else
        {
            m_messageKey.Clear();
        }
        m_queueID = new global::Microsoft.ObjectStore.QueueService.QueueID();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.Multi.QueueKey cloned = new global::Microsoft.ObjectStore.QueueService.Multi.QueueKey();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.Multi.QueueKey that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 100: vector<uint8> messageKey
        if (this.messageKey != null)
        {
            if (that.messageKey == null)
            {
                that.messageKey = new List<Byte>();
            }
            else
            {
                that.messageKey.Clear();
            }
            foreach (var iter1 in this.messageKey)
            {
                Byte tmpItem2 = default(Byte);
                tmpItem2 = iter1;
                that.messageKey.Add(tmpItem2);
            }
        }
        else
        {
            that.messageKey = null;
        }
        // 200: Microsoft.ObjectStore.QueueService.QueueID queueID
        that.queueID = (this.queueID == null ? null : (global::Microsoft.ObjectStore.QueueService.QueueID)this.queueID.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_messageKey(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"messageKey\", id=100");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.queueID.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"queueID\", id=200");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        
        BitArray seenRequiredFields = new BitArray(201);

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.messageKey:  // id=100
                    this.ReadField_impl_messageKey(reader, type);
                    seenRequiredFields.Set(__ordinals.messageKey, true);
                    break;
                case __ordinals.queueID:  // id=200
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.queueID.Read(reader);
                    seenRequiredFields.Set(__ordinals.queueID, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_messageKey(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_messageKey.Capacity < count2)
        {
            this.m_messageKey.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Byte element3 = default(Byte);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType1);
            this.m_messageKey.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_messageKey


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.messageKey))
        {
            ok = false;
            missingFieldName = "messageKey";
            missingFieldId = __ordinals.messageKey;
        }
        if (ok && !seenFields.Get(__ordinals.queueID))
        {
            ok = false;
            missingFieldName = "queueID";
            missingFieldId = __ordinals.queueID;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(QueueKey))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.messageKey, Schema.messageKey_meta);
            UInt32 count2 = (m_messageKey == null ? 0 : (UInt32)m_messageKey.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_UINT8);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    writer.WriteUInt8(m_messageKey[idx1]);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.queueID, Schema.queueID_meta);
            m_queueID.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Microsoft.ObjectStore.QueueService.QueueKeyBase.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 100;
        field.metadata.name="messageKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 200;
        field.metadata.name="queueID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.QueueID.GetTypeDef(schema);
        field.metadata.attributes["KeyMetadata"] = "PartitionKey";

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        QueueKey that = obj as QueueKey;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(QueueKey other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(QueueKey that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.messageKey == null) == (that.messageKey == null));
        equals = equals && ((this.messageKey == null) ? true : (this.messageKey.Count == that.messageKey.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(QueueKey that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        if (equals && this.messageKey != null && this.messageKey.Count != 0)
        {
            var enum_1_1 = this.messageKey.GetEnumerator();
            var enum_2_2 = that.messageKey.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.queueID == null ? true : this.queueID.MemberwiseCompare(that.queueID));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_messageKey, DumpList(this.messageKey), separator);
        sb.AppendFormat(format, __internal.s_queueID, this.queueID, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class QueueKey

/// <summary>
/// HACKstruct QueueKeyTable:Microsoft.ObjectStore.QueueService.QueueKeyTableBase{    100: required vector<uint8> messageKey;    [KeyMetadata("PartitionKey")]    200: required Microsoft.ObjectStore.QueueService.QueueID queueID;   // name of queue, must be unique. Must match preconfigured queue if CreateQueue is disabled                                                                        // PartitionKey attribute must be match (on partitionSelector or queueID) in QueueKey and QueueKeyTable}
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class CreateQueueRequest : global::Microsoft.ObjectStore.QueueService.CreateQueueRequestBase<global::Microsoft.ObjectStore.QueueService.Multi.AppID>
{
    //
    // Fields
    //

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("CreateQueueRequest");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.QueueService.Multi." + meta.name;

        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public CreateQueueRequest()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.QueueService.Multi.CreateQueueRequest cloned = new global::Microsoft.ObjectStore.QueueService.Multi.CreateQueueRequest();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.QueueService.Multi.CreateQueueRequest that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(CreateQueueRequest))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Microsoft.ObjectStore.QueueService.CreateQueueRequestBase<global::Microsoft.ObjectStore.QueueService.Multi.AppID>.GetTypeDef(schema);
        

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        CreateQueueRequest that = obj as CreateQueueRequest;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(CreateQueueRequest other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(CreateQueueRequest that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(CreateQueueRequest that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        
        return sb.ToString();
    } // ToString()

}; // class CreateQueueRequest
} // namespace Multi
} // namespace QueueService
namespace Schema
{

/// <summary>
/// ================================== Define Schema metadata ==================================
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class TableIdentifier : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required string NamespaceName
    private String m_NamespaceName;

    // 2: Required string TableName
    private String m_TableName;

    /// <summary>
    /// NamespaceName
    /// </summary>
    public String NamespaceName
    {
        get { return this.m_NamespaceName; }
        set { this.m_NamespaceName = value; }
    }

    /// <summary>
    /// TableName
    /// </summary>
    public String TableName
    {
        get { return this.m_TableName; }
        set { this.m_TableName = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata NamespaceName_meta = new Metadata();
        public static readonly Metadata TableName_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("TableIdentifier");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // NamespaceName
            NamespaceName_meta.name = "NamespaceName";
            NamespaceName_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // TableName
            TableName_meta.name = "TableName";
            TableName_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int NamespaceName = 1;
        public const int TableName = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_NamespaceName = "NamespaceName";
        public const String s_TableName = "TableName";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public TableIdentifier()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_NamespaceName = string.Empty;
        m_TableName = string.Empty;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.TableIdentifier cloned = new global::Microsoft.ObjectStore.Schema.TableIdentifier();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.TableIdentifier that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: string NamespaceName
        that.NamespaceName = this.NamespaceName;
        // 2: string TableName
        that.TableName = this.TableName;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.NamespaceName = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"NamespaceName\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TableName = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"TableName\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.NamespaceName:  // id=1
                    this.NamespaceName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.NamespaceName, true);
                    break;
                case __ordinals.TableName:  // id=2
                    this.TableName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.TableName, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.NamespaceName))
        {
            ok = false;
            missingFieldName = "NamespaceName";
            missingFieldId = __ordinals.NamespaceName;
        }
        if (ok && !seenFields.Get(__ordinals.TableName))
        {
            ok = false;
            missingFieldName = "TableName";
            missingFieldId = __ordinals.TableName;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(TableIdentifier))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.NamespaceName, Schema.NamespaceName_meta);
            writer.WriteString(m_NamespaceName);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TableName, Schema.TableName_meta);
            writer.WriteString(m_TableName);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="NamespaceName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="TableName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        TableIdentifier that = obj as TableIdentifier;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(TableIdentifier other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(TableIdentifier that)
    {
        bool equals = true;
        
        equals = equals && ((this.NamespaceName == null) == (that.NamespaceName == null));
        equals = equals && (this.NamespaceName == null ? true : (this.NamespaceName.Length == that.NamespaceName.Length));
        equals = equals && ((this.TableName == null) == (that.TableName == null));
        equals = equals && (this.TableName == null ? true : (this.TableName.Length == that.TableName.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(TableIdentifier that)
    {
        bool equals = true;
        
        equals = equals && (this.NamespaceName == null ? true : this.NamespaceName == that.NamespaceName);
        equals = equals && (this.TableName == null ? true : this.TableName == that.TableName);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_NamespaceName, this.NamespaceName, separator);
        sb.AppendFormat(format, __internal.s_TableName, this.TableName, separator);
        
        return sb.ToString();
    } // ToString()

}; // class TableIdentifier

/// <summary>
/// TableSchemaDef
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class TableSchemaDef : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.Bond.SchemaDef KeySchema
    private global::Microsoft.Bond.SchemaDef m_KeySchema;

    // 2: Required Microsoft.Bond.SchemaDef ValueSchema
    private global::Microsoft.Bond.SchemaDef m_ValueSchema;

    // 3: Optional vector<Microsoft.Bond.SchemaDef> PublishedSchemas
    private List<global::Microsoft.Bond.SchemaDef> m_PublishedSchemas;

    /// <summary>
    /// KeySchema
    /// </summary>
    public global::Microsoft.Bond.SchemaDef KeySchema
    {
        get { return this.m_KeySchema; }
        set { this.m_KeySchema = value; }
    }

    /// <summary>
    /// ValueSchema
    /// </summary>
    public global::Microsoft.Bond.SchemaDef ValueSchema
    {
        get { return this.m_ValueSchema; }
        set { this.m_ValueSchema = value; }
    }

    /// <summary>
    /// PublishedSchemas
    /// </summary>
    public List<global::Microsoft.Bond.SchemaDef> PublishedSchemas
    {
        get { return this.m_PublishedSchemas; }
        set { this.m_PublishedSchemas = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata KeySchema_meta = new Metadata();
        public static readonly Metadata ValueSchema_meta = new Metadata();
        public static readonly Metadata PublishedSchemas_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("TableSchemaDef");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // KeySchema
            KeySchema_meta.name = "KeySchema";
            KeySchema_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // ValueSchema
            ValueSchema_meta.name = "ValueSchema";
            ValueSchema_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // PublishedSchemas
            PublishedSchemas_meta.name = "PublishedSchemas";
            PublishedSchemas_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int KeySchema = 1;
        public const int ValueSchema = 2;
        public const int PublishedSchemas = 3;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_KeySchema = "KeySchema";
        public const String s_ValueSchema = "ValueSchema";
        public const String s_PublishedSchemas = "PublishedSchemas";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public TableSchemaDef()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_KeySchema = new global::Microsoft.Bond.SchemaDef();
        m_ValueSchema = new global::Microsoft.Bond.SchemaDef();
        if (m_PublishedSchemas == null)
        {
            m_PublishedSchemas = new List<global::Microsoft.Bond.SchemaDef>();
        }
        else
        {
            m_PublishedSchemas.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.TableSchemaDef cloned = new global::Microsoft.ObjectStore.Schema.TableSchemaDef();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.TableSchemaDef that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.Bond.SchemaDef KeySchema
        that.KeySchema = (this.KeySchema == null ? null : (global::Microsoft.Bond.SchemaDef)this.KeySchema.Clone());
        // 2: Microsoft.Bond.SchemaDef ValueSchema
        that.ValueSchema = (this.ValueSchema == null ? null : (global::Microsoft.Bond.SchemaDef)this.ValueSchema.Clone());
        // 3: vector<Microsoft.Bond.SchemaDef> PublishedSchemas
        if (this.PublishedSchemas != null)
        {
            if (that.PublishedSchemas == null)
            {
                that.PublishedSchemas = new List<global::Microsoft.Bond.SchemaDef>();
            }
            else
            {
                that.PublishedSchemas.Clear();
            }
            foreach (var iter1 in this.PublishedSchemas)
            {
                global::Microsoft.Bond.SchemaDef tmpItem2 = default(global::Microsoft.Bond.SchemaDef);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.Bond.SchemaDef)iter1.Clone());
                that.PublishedSchemas.Add(tmpItem2);
            }
        }
        else
        {
            that.PublishedSchemas = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.KeySchema.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"KeySchema\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ValueSchema.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"ValueSchema\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_PublishedSchemas(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.KeySchema:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.KeySchema.Read(reader);
                    seenRequiredFields.Set(__ordinals.KeySchema, true);
                    break;
                case __ordinals.ValueSchema:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.ValueSchema.Read(reader);
                    seenRequiredFields.Set(__ordinals.ValueSchema, true);
                    break;
                case __ordinals.PublishedSchemas:  // id=3
                    this.ReadField_impl_PublishedSchemas(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_PublishedSchemas(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_PublishedSchemas.Capacity < count2)
        {
            this.m_PublishedSchemas.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.Bond.SchemaDef element3 = new global::Microsoft.Bond.SchemaDef();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_PublishedSchemas.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_PublishedSchemas


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.KeySchema))
        {
            ok = false;
            missingFieldName = "KeySchema";
            missingFieldId = __ordinals.KeySchema;
        }
        if (ok && !seenFields.Get(__ordinals.ValueSchema))
        {
            ok = false;
            missingFieldName = "ValueSchema";
            missingFieldId = __ordinals.ValueSchema;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(TableSchemaDef))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.KeySchema, Schema.KeySchema_meta);
            m_KeySchema.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.ValueSchema, Schema.ValueSchema_meta);
            m_ValueSchema.Write(writer, true);
        writer.WriteFieldEnd();
        UInt32 count1 = ((UInt32)m_PublishedSchemas.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublishedSchemas, Schema.PublishedSchemas_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx2 = 0; idx2 < count1; idx2++)
            {
                    m_PublishedSchemas[idx2].Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.PublishedSchemas, Schema.PublishedSchemas_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="KeySchema";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.SchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="ValueSchema";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.SchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="PublishedSchemas";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.SchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        TableSchemaDef that = obj as TableSchemaDef;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(TableSchemaDef other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(TableSchemaDef that)
    {
        bool equals = true;
        
        equals = equals && ((this.PublishedSchemas == null) == (that.PublishedSchemas == null));
        equals = equals && ((this.PublishedSchemas == null) ? true : (this.PublishedSchemas.Count == that.PublishedSchemas.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(TableSchemaDef that)
    {
        bool equals = true;
        
        equals = equals && (this.KeySchema == null ? true : this.KeySchema.MemberwiseCompare(that.KeySchema));
        equals = equals && (this.ValueSchema == null ? true : this.ValueSchema.MemberwiseCompare(that.ValueSchema));
        if (equals && this.PublishedSchemas != null && this.PublishedSchemas.Count != 0)
        {
            var enum_1_1 = this.PublishedSchemas.GetEnumerator();
            var enum_2_2 = that.PublishedSchemas.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_KeySchema, this.KeySchema, separator);
        sb.AppendFormat(format, __internal.s_ValueSchema, this.ValueSchema, separator);
        sb.AppendFormat(format, __internal.s_PublishedSchemas, DumpList(this.PublishedSchemas), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class TableSchemaDef

/// <summary>
/// TableSchemaEntry
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class TableSchemaEntry : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.ObjectStore.Schema.TableIdentifier TableIdentifier
    private global::Microsoft.ObjectStore.Schema.TableIdentifier m_TableIdentifier;

    // 2: Optional nullable<Microsoft.ObjectStore.Schema.TableSchemaDef> TableSchemaDef
    private global::Microsoft.ObjectStore.Schema.TableSchemaDef m_TableSchemaDef;

    /// <summary>
    /// TableIdentifier
    /// </summary>
    public global::Microsoft.ObjectStore.Schema.TableIdentifier TableIdentifier
    {
        get { return this.m_TableIdentifier; }
        set { this.m_TableIdentifier = value; }
    }

    /// <summary>
    /// TableSchemaDef
    /// </summary>
    public global::Microsoft.ObjectStore.Schema.TableSchemaDef TableSchemaDef
    {
        get { return this.m_TableSchemaDef; }
        set { this.m_TableSchemaDef = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata TableIdentifier_meta = new Metadata();
        public static readonly Metadata TableSchemaDef_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("TableSchemaEntry");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // TableIdentifier
            TableIdentifier_meta.name = "TableIdentifier";
            TableIdentifier_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // TableSchemaDef
            TableSchemaDef_meta.name = "TableSchemaDef";
            TableSchemaDef_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int TableIdentifier = 1;
        public const int TableSchemaDef = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_TableIdentifier = "TableIdentifier";
        public const String s_TableSchemaDef = "TableSchemaDef";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public TableSchemaEntry()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_TableIdentifier = new global::Microsoft.ObjectStore.Schema.TableIdentifier();
        m_TableSchemaDef = default(global::Microsoft.ObjectStore.Schema.TableSchemaDef);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.TableSchemaEntry cloned = new global::Microsoft.ObjectStore.Schema.TableSchemaEntry();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.TableSchemaEntry that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.Schema.TableIdentifier TableIdentifier
        that.TableIdentifier = (this.TableIdentifier == null ? null : (global::Microsoft.ObjectStore.Schema.TableIdentifier)this.TableIdentifier.Clone());
        // 2: nullable<Microsoft.ObjectStore.Schema.TableSchemaDef> TableSchemaDef
        that.TableSchemaDef = (this.TableSchemaDef == null ? null : (global::Microsoft.ObjectStore.Schema.TableSchemaDef)this.TableSchemaDef.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TableIdentifier.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"TableIdentifier\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_TableSchemaDef(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.TableIdentifier:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.TableIdentifier.Read(reader);
                    seenRequiredFields.Set(__ordinals.TableIdentifier, true);
                    break;
                case __ordinals.TableSchemaDef:  // id=2
                    this.ReadField_impl_TableSchemaDef(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_TableSchemaDef(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_TableSchemaDef == null) { this.m_TableSchemaDef = new global::Microsoft.ObjectStore.Schema.TableSchemaDef(); } 
            ReadHelper.ReadStruct(reader, this.m_TableSchemaDef, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_TableSchemaDef


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.TableIdentifier))
        {
            ok = false;
            missingFieldName = "TableIdentifier";
            missingFieldId = __ordinals.TableIdentifier;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(TableSchemaEntry))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.TableIdentifier, Schema.TableIdentifier_meta);
            m_TableIdentifier.Write(writer, true);
        writer.WriteFieldEnd();
        UInt32 count1 = (UInt32)((m_TableSchemaDef != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.TableSchemaDef, Schema.TableSchemaDef_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_TableSchemaDef.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.TableSchemaDef, Schema.TableSchemaDef_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="TableIdentifier";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.Schema.TableIdentifier.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="TableSchemaDef";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.Schema.TableSchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        TableSchemaEntry that = obj as TableSchemaEntry;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(TableSchemaEntry other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(TableSchemaEntry that)
    {
        bool equals = true;
        
        equals = equals && ((this.TableSchemaDef == null) == (that.TableSchemaDef == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(TableSchemaEntry that)
    {
        bool equals = true;
        
        equals = equals && (this.TableIdentifier == null ? true : this.TableIdentifier.MemberwiseCompare(that.TableIdentifier));
        equals = equals && ((this.TableSchemaDef == null) == (that.TableSchemaDef == null));
        if (equals && !(this.TableSchemaDef == null))
        {
            equals = equals && (this.TableSchemaDef == null ? true : this.TableSchemaDef.MemberwiseCompare(that.TableSchemaDef));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_TableIdentifier, this.TableIdentifier, separator);
        sb.AppendFormat(format, __internal.s_TableSchemaDef, this.TableSchemaDef, separator);
        
        return sb.ToString();
    } // ToString()

}; // class TableSchemaEntry

/// <summary>
/// TableSchemaEntries
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class TableSchemaEntries : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<Microsoft.ObjectStore.Schema.TableSchemaEntry> Entries
    private List<global::Microsoft.ObjectStore.Schema.TableSchemaEntry> m_Entries;

    /// <summary>
    /// Entries
    /// </summary>
    public List<global::Microsoft.ObjectStore.Schema.TableSchemaEntry> Entries
    {
        get { return this.m_Entries; }
        set { this.m_Entries = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Entries_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("TableSchemaEntries");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // Entries
            Entries_meta.name = "Entries";
            Entries_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Entries = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Entries = "Entries";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public TableSchemaEntries()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_Entries == null)
        {
            m_Entries = new List<global::Microsoft.ObjectStore.Schema.TableSchemaEntry>();
        }
        else
        {
            m_Entries.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.TableSchemaEntries cloned = new global::Microsoft.ObjectStore.Schema.TableSchemaEntries();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.TableSchemaEntries that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<Microsoft.ObjectStore.Schema.TableSchemaEntry> Entries
        if (this.Entries != null)
        {
            if (that.Entries == null)
            {
                that.Entries = new List<global::Microsoft.ObjectStore.Schema.TableSchemaEntry>();
            }
            else
            {
                that.Entries.Clear();
            }
            foreach (var iter1 in this.Entries)
            {
                global::Microsoft.ObjectStore.Schema.TableSchemaEntry tmpItem2 = default(global::Microsoft.ObjectStore.Schema.TableSchemaEntry);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.Schema.TableSchemaEntry)iter1.Clone());
                that.Entries.Add(tmpItem2);
            }
        }
        else
        {
            that.Entries = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Entries(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"Entries\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Entries:  // id=1
                    this.ReadField_impl_Entries(reader, type);
                    seenRequiredFields.Set(__ordinals.Entries, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_Entries(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_Entries.Capacity < count2)
        {
            this.m_Entries.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.Schema.TableSchemaEntry element3 = new global::Microsoft.ObjectStore.Schema.TableSchemaEntry();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_Entries.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Entries


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Entries))
        {
            ok = false;
            missingFieldName = "Entries";
            missingFieldId = __ordinals.Entries;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(TableSchemaEntries))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Entries, Schema.Entries_meta);
            UInt32 count2 = (m_Entries == null ? 0 : (UInt32)m_Entries.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_Entries[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Entries";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.Schema.TableSchemaEntry.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        TableSchemaEntries that = obj as TableSchemaEntries;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(TableSchemaEntries other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(TableSchemaEntries that)
    {
        bool equals = true;
        
        equals = equals && ((this.Entries == null) == (that.Entries == null));
        equals = equals && ((this.Entries == null) ? true : (this.Entries.Count == that.Entries.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(TableSchemaEntries that)
    {
        bool equals = true;
        
        if (equals && this.Entries != null && this.Entries.Count != 0)
        {
            var enum_1_1 = this.Entries.GetEnumerator();
            var enum_2_2 = that.Entries.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Entries, DumpList(this.Entries), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class TableSchemaEntries

/// <summary>
/// CoprocSchemaDef
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class CoprocSchemaDef : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.Bond.SchemaDef KeySchema
    private global::Microsoft.Bond.SchemaDef m_KeySchema;

    // 2: Required Microsoft.Bond.SchemaDef ResponseSchema
    private global::Microsoft.Bond.SchemaDef m_ResponseSchema;

    // 3: Optional nullable<Microsoft.Bond.SchemaDef> KeyParamSchema
    private global::Microsoft.Bond.SchemaDef m_KeyParamSchema;

    // 4: Optional nullable<Microsoft.Bond.SchemaDef> RequestParamSchema
    private global::Microsoft.Bond.SchemaDef m_RequestParamSchema;

    /// <summary>
    /// KeySchema
    /// </summary>
    public global::Microsoft.Bond.SchemaDef KeySchema
    {
        get { return this.m_KeySchema; }
        set { this.m_KeySchema = value; }
    }

    /// <summary>
    /// ResponseSchema
    /// </summary>
    public global::Microsoft.Bond.SchemaDef ResponseSchema
    {
        get { return this.m_ResponseSchema; }
        set { this.m_ResponseSchema = value; }
    }

    /// <summary>
    /// KeyParamSchema
    /// </summary>
    public global::Microsoft.Bond.SchemaDef KeyParamSchema
    {
        get { return this.m_KeyParamSchema; }
        set { this.m_KeyParamSchema = value; }
    }

    /// <summary>
    /// RequestParamSchema
    /// </summary>
    public global::Microsoft.Bond.SchemaDef RequestParamSchema
    {
        get { return this.m_RequestParamSchema; }
        set { this.m_RequestParamSchema = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata KeySchema_meta = new Metadata();
        public static readonly Metadata ResponseSchema_meta = new Metadata();
        public static readonly Metadata KeyParamSchema_meta = new Metadata();
        public static readonly Metadata RequestParamSchema_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("CoprocSchemaDef");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // KeySchema
            KeySchema_meta.name = "KeySchema";
            KeySchema_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // ResponseSchema
            ResponseSchema_meta.name = "ResponseSchema";
            ResponseSchema_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // KeyParamSchema
            KeyParamSchema_meta.name = "KeyParamSchema";
            KeyParamSchema_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // RequestParamSchema
            RequestParamSchema_meta.name = "RequestParamSchema";
            RequestParamSchema_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int KeySchema = 1;
        public const int ResponseSchema = 2;
        public const int KeyParamSchema = 3;
        public const int RequestParamSchema = 4;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_KeySchema = "KeySchema";
        public const String s_ResponseSchema = "ResponseSchema";
        public const String s_KeyParamSchema = "KeyParamSchema";
        public const String s_RequestParamSchema = "RequestParamSchema";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public CoprocSchemaDef()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_KeySchema = new global::Microsoft.Bond.SchemaDef();
        m_ResponseSchema = new global::Microsoft.Bond.SchemaDef();
        m_KeyParamSchema = default(global::Microsoft.Bond.SchemaDef);
        m_RequestParamSchema = default(global::Microsoft.Bond.SchemaDef);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.CoprocSchemaDef cloned = new global::Microsoft.ObjectStore.Schema.CoprocSchemaDef();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.CoprocSchemaDef that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.Bond.SchemaDef KeySchema
        that.KeySchema = (this.KeySchema == null ? null : (global::Microsoft.Bond.SchemaDef)this.KeySchema.Clone());
        // 2: Microsoft.Bond.SchemaDef ResponseSchema
        that.ResponseSchema = (this.ResponseSchema == null ? null : (global::Microsoft.Bond.SchemaDef)this.ResponseSchema.Clone());
        // 3: nullable<Microsoft.Bond.SchemaDef> KeyParamSchema
        that.KeyParamSchema = (this.KeyParamSchema == null ? null : (global::Microsoft.Bond.SchemaDef)this.KeyParamSchema.Clone());
        // 4: nullable<Microsoft.Bond.SchemaDef> RequestParamSchema
        that.RequestParamSchema = (this.RequestParamSchema == null ? null : (global::Microsoft.Bond.SchemaDef)this.RequestParamSchema.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.KeySchema.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"KeySchema\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ResponseSchema.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"ResponseSchema\", id=2");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_KeyParamSchema(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_RequestParamSchema(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.KeySchema:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.KeySchema.Read(reader);
                    seenRequiredFields.Set(__ordinals.KeySchema, true);
                    break;
                case __ordinals.ResponseSchema:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.ResponseSchema.Read(reader);
                    seenRequiredFields.Set(__ordinals.ResponseSchema, true);
                    break;
                case __ordinals.KeyParamSchema:  // id=3
                    this.ReadField_impl_KeyParamSchema(reader, type);
                    break;
                case __ordinals.RequestParamSchema:  // id=4
                    this.ReadField_impl_RequestParamSchema(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_KeyParamSchema(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_KeyParamSchema == null) { this.m_KeyParamSchema = new global::Microsoft.Bond.SchemaDef(); } 
            ReadHelper.ReadStruct(reader, this.m_KeyParamSchema, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_KeyParamSchema


    private void ReadField_impl_RequestParamSchema(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_RequestParamSchema == null) { this.m_RequestParamSchema = new global::Microsoft.Bond.SchemaDef(); } 
            ReadHelper.ReadStruct(reader, this.m_RequestParamSchema, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_RequestParamSchema


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.KeySchema))
        {
            ok = false;
            missingFieldName = "KeySchema";
            missingFieldId = __ordinals.KeySchema;
        }
        if (ok && !seenFields.Get(__ordinals.ResponseSchema))
        {
            ok = false;
            missingFieldName = "ResponseSchema";
            missingFieldId = __ordinals.ResponseSchema;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(CoprocSchemaDef))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.KeySchema, Schema.KeySchema_meta);
            m_KeySchema.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.ResponseSchema, Schema.ResponseSchema_meta);
            m_ResponseSchema.Write(writer, true);
        writer.WriteFieldEnd();
        UInt32 count1 = (UInt32)((m_KeyParamSchema != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.KeyParamSchema, Schema.KeyParamSchema_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_KeyParamSchema.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.KeyParamSchema, Schema.KeyParamSchema_meta);
        }

        UInt32 count2 = (UInt32)((m_RequestParamSchema != null) ? 1 : 0);
        if (writeAllFields || count2 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RequestParamSchema, Schema.RequestParamSchema_meta);
                writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count2 != 0)
                {
                        m_RequestParamSchema.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.RequestParamSchema, Schema.RequestParamSchema_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="KeySchema";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.SchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="ResponseSchema";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.Bond.SchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="KeyParamSchema";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.SchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="RequestParamSchema";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.SchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        CoprocSchemaDef that = obj as CoprocSchemaDef;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(CoprocSchemaDef other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(CoprocSchemaDef that)
    {
        bool equals = true;
        
        equals = equals && ((this.KeyParamSchema == null) == (that.KeyParamSchema == null));
        equals = equals && ((this.RequestParamSchema == null) == (that.RequestParamSchema == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(CoprocSchemaDef that)
    {
        bool equals = true;
        
        equals = equals && (this.KeySchema == null ? true : this.KeySchema.MemberwiseCompare(that.KeySchema));
        equals = equals && (this.ResponseSchema == null ? true : this.ResponseSchema.MemberwiseCompare(that.ResponseSchema));
        equals = equals && ((this.KeyParamSchema == null) == (that.KeyParamSchema == null));
        if (equals && !(this.KeyParamSchema == null))
        {
            equals = equals && (this.KeyParamSchema == null ? true : this.KeyParamSchema.MemberwiseCompare(that.KeyParamSchema));
        }
        equals = equals && ((this.RequestParamSchema == null) == (that.RequestParamSchema == null));
        if (equals && !(this.RequestParamSchema == null))
        {
            equals = equals && (this.RequestParamSchema == null ? true : this.RequestParamSchema.MemberwiseCompare(that.RequestParamSchema));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_KeySchema, this.KeySchema, separator);
        sb.AppendFormat(format, __internal.s_ResponseSchema, this.ResponseSchema, separator);
        sb.AppendFormat(format, __internal.s_KeyParamSchema, this.KeyParamSchema, separator);
        sb.AppendFormat(format, __internal.s_RequestParamSchema, this.RequestParamSchema, separator);
        
        return sb.ToString();
    } // ToString()

}; // class CoprocSchemaDef

/// <summary>
/// ServiceSchemaDef
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ServiceSchemaDef : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required map<string, Microsoft.ObjectStore.Schema.CoprocSchemaDef> CoprocSchemaDefs
    private Dictionary<String, global::Microsoft.ObjectStore.Schema.CoprocSchemaDef> m_CoprocSchemaDefs;

    /// <summary>
    /// CoprocName (without Service) -> Coproc schema def
    /// </summary>
    public Dictionary<String, global::Microsoft.ObjectStore.Schema.CoprocSchemaDef> CoprocSchemaDefs
    {
        get { return this.m_CoprocSchemaDefs; }
        set { this.m_CoprocSchemaDefs = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata CoprocSchemaDefs_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ServiceSchemaDef");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // CoprocSchemaDefs
            CoprocSchemaDefs_meta.name = "CoprocSchemaDefs";
            CoprocSchemaDefs_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int CoprocSchemaDefs = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_CoprocSchemaDefs = "CoprocSchemaDefs";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ServiceSchemaDef()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_CoprocSchemaDefs == null)
        {
            m_CoprocSchemaDefs = new Dictionary<String, global::Microsoft.ObjectStore.Schema.CoprocSchemaDef>();
        }
        else
        {
            m_CoprocSchemaDefs.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.ServiceSchemaDef cloned = new global::Microsoft.ObjectStore.Schema.ServiceSchemaDef();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.ServiceSchemaDef that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: map<string, Microsoft.ObjectStore.Schema.CoprocSchemaDef> CoprocSchemaDefs
        if (this.CoprocSchemaDefs != null)
        {
            if (that.CoprocSchemaDefs == null)
            {
                that.CoprocSchemaDefs = new Dictionary<String, global::Microsoft.ObjectStore.Schema.CoprocSchemaDef>();
            }
            else
            {
                that.CoprocSchemaDefs.Clear();
            }
            foreach (var keyValPair1 in this.CoprocSchemaDefs)
            {
                String key2 = default(String);
                global::Microsoft.ObjectStore.Schema.CoprocSchemaDef val3 = default(global::Microsoft.ObjectStore.Schema.CoprocSchemaDef);
                key2 = keyValPair1.Key;
                val3 = (keyValPair1.Value == null ? null : (global::Microsoft.ObjectStore.Schema.CoprocSchemaDef)keyValPair1.Value.Clone());
                that.CoprocSchemaDefs[key2] = val3;
            }
        }
        else
        {
            that.CoprocSchemaDefs = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_CoprocSchemaDefs(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }
        else
        {
            throw new BondException("Missing required field \"CoprocSchemaDefs\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.CoprocSchemaDefs:  // id=1
                    this.ReadField_impl_CoprocSchemaDefs(reader, type);
                    seenRequiredFields.Set(__ordinals.CoprocSchemaDefs, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_CoprocSchemaDefs(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(valueType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            global::Microsoft.ObjectStore.Schema.CoprocSchemaDef val6 = new global::Microsoft.ObjectStore.Schema.CoprocSchemaDef();
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            ReadHelper.ReadStruct(reader, val6, valueType2);
            //
            this.m_CoprocSchemaDefs[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_CoprocSchemaDefs


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.CoprocSchemaDefs))
        {
            ok = false;
            missingFieldName = "CoprocSchemaDefs";
            missingFieldId = __ordinals.CoprocSchemaDefs;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ServiceSchemaDef))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.CoprocSchemaDefs, Schema.CoprocSchemaDefs_meta);
            UInt32 count2 = (m_CoprocSchemaDefs == null ? 0 : (UInt32)m_CoprocSchemaDefs.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            foreach (var iter1 in m_CoprocSchemaDefs)
            {
                // Key
                    writer.WriteString(iter1.Key);
                // Value
                    iter1.Value.Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="CoprocSchemaDefs";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element = global::Microsoft.ObjectStore.Schema.CoprocSchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ServiceSchemaDef that = obj as ServiceSchemaDef;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ServiceSchemaDef other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ServiceSchemaDef that)
    {
        bool equals = true;
        
        equals = equals && ((this.CoprocSchemaDefs == null) == (that.CoprocSchemaDefs == null));
        equals = equals && ((this.CoprocSchemaDefs == null) ? true : (this.CoprocSchemaDefs.Count == that.CoprocSchemaDefs.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ServiceSchemaDef that)
    {
        bool equals = true;
        
        if (equals && this.CoprocSchemaDefs != null && this.CoprocSchemaDefs.Count != 0)
        {
            foreach (var keyValPair1 in this.CoprocSchemaDefs)
            {
                global::Microsoft.ObjectStore.Schema.CoprocSchemaDef val2 = default(global::Microsoft.ObjectStore.Schema.CoprocSchemaDef);
                equals = equals && that.CoprocSchemaDefs.TryGetValue(keyValPair1.Key, out val2);
                if (equals)
                {
                        equals = equals && ((val2 == null) == (keyValPair1.Value == null));
                    equals = equals && (val2 == null ? true : val2.MemberwiseCompare(keyValPair1.Value));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_CoprocSchemaDefs, this.CoprocSchemaDefs, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ServiceSchemaDef

/// <summary>
/// TableServiceSchemaEntry
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class TableServiceSchemaEntry : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required Microsoft.ObjectStore.Schema.TableIdentifier TableIdentifier
    private global::Microsoft.ObjectStore.Schema.TableIdentifier m_TableIdentifier;

    // 2: Optional map<string, Microsoft.ObjectStore.Schema.ServiceSchemaDef> ServiceSchemaDefs
    private Dictionary<String, global::Microsoft.ObjectStore.Schema.ServiceSchemaDef> m_ServiceSchemaDefs;

    /// <summary>
    /// TableIdentifier
    /// </summary>
    public global::Microsoft.ObjectStore.Schema.TableIdentifier TableIdentifier
    {
        get { return this.m_TableIdentifier; }
        set { this.m_TableIdentifier = value; }
    }

    /// <summary>
    /// ServiceSchemaDefs
    /// </summary>
    public Dictionary<String, global::Microsoft.ObjectStore.Schema.ServiceSchemaDef> ServiceSchemaDefs
    {
        get { return this.m_ServiceSchemaDefs; }
        set { this.m_ServiceSchemaDefs = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata TableIdentifier_meta = new Metadata();
        public static readonly Metadata ServiceSchemaDefs_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("TableServiceSchemaEntry");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // TableIdentifier
            TableIdentifier_meta.name = "TableIdentifier";
            TableIdentifier_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // ServiceSchemaDefs
            ServiceSchemaDefs_meta.name = "ServiceSchemaDefs";
            ServiceSchemaDefs_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int TableIdentifier = 1;
        public const int ServiceSchemaDefs = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_TableIdentifier = "TableIdentifier";
        public const String s_ServiceSchemaDefs = "ServiceSchemaDefs";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public TableServiceSchemaEntry()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_TableIdentifier = new global::Microsoft.ObjectStore.Schema.TableIdentifier();
        if (m_ServiceSchemaDefs == null)
        {
            m_ServiceSchemaDefs = new Dictionary<String, global::Microsoft.ObjectStore.Schema.ServiceSchemaDef>();
        }
        else
        {
            m_ServiceSchemaDefs.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry cloned = new global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: Microsoft.ObjectStore.Schema.TableIdentifier TableIdentifier
        that.TableIdentifier = (this.TableIdentifier == null ? null : (global::Microsoft.ObjectStore.Schema.TableIdentifier)this.TableIdentifier.Clone());
        // 2: map<string, Microsoft.ObjectStore.Schema.ServiceSchemaDef> ServiceSchemaDefs
        if (this.ServiceSchemaDefs != null)
        {
            if (that.ServiceSchemaDefs == null)
            {
                that.ServiceSchemaDefs = new Dictionary<String, global::Microsoft.ObjectStore.Schema.ServiceSchemaDef>();
            }
            else
            {
                that.ServiceSchemaDefs.Clear();
            }
            foreach (var keyValPair1 in this.ServiceSchemaDefs)
            {
                String key2 = default(String);
                global::Microsoft.ObjectStore.Schema.ServiceSchemaDef val3 = default(global::Microsoft.ObjectStore.Schema.ServiceSchemaDef);
                key2 = keyValPair1.Key;
                val3 = (keyValPair1.Value == null ? null : (global::Microsoft.ObjectStore.Schema.ServiceSchemaDef)keyValPair1.Value.Clone());
                that.ServiceSchemaDefs[key2] = val3;
            }
        }
        else
        {
            that.ServiceSchemaDefs = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TableIdentifier.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"TableIdentifier\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_ServiceSchemaDefs(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.TableIdentifier:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.TableIdentifier.Read(reader);
                    seenRequiredFields.Set(__ordinals.TableIdentifier, true);
                    break;
                case __ordinals.ServiceSchemaDefs:  // id=2
                    this.ReadField_impl_ServiceSchemaDefs(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_ServiceSchemaDefs(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(valueType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            global::Microsoft.ObjectStore.Schema.ServiceSchemaDef val6 = new global::Microsoft.ObjectStore.Schema.ServiceSchemaDef();
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            ReadHelper.ReadStruct(reader, val6, valueType2);
            //
            this.m_ServiceSchemaDefs[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_ServiceSchemaDefs


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.TableIdentifier))
        {
            ok = false;
            missingFieldName = "TableIdentifier";
            missingFieldId = __ordinals.TableIdentifier;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(TableServiceSchemaEntry))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.TableIdentifier, Schema.TableIdentifier_meta);
            m_TableIdentifier.Write(writer, true);
        writer.WriteFieldEnd();
        UInt32 count1 = ((UInt32)m_ServiceSchemaDefs.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.ServiceSchemaDefs, Schema.ServiceSchemaDefs_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            foreach (var iter2 in m_ServiceSchemaDefs)
            {
                // Key
                    writer.WriteString(iter2.Key);
                // Value
                    iter2.Value.Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.ServiceSchemaDefs, Schema.ServiceSchemaDefs_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="TableIdentifier";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.Schema.TableIdentifier.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="ServiceSchemaDefs";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element = global::Microsoft.ObjectStore.Schema.ServiceSchemaDef.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        TableServiceSchemaEntry that = obj as TableServiceSchemaEntry;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(TableServiceSchemaEntry other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(TableServiceSchemaEntry that)
    {
        bool equals = true;
        
        equals = equals && ((this.ServiceSchemaDefs == null) == (that.ServiceSchemaDefs == null));
        equals = equals && ((this.ServiceSchemaDefs == null) ? true : (this.ServiceSchemaDefs.Count == that.ServiceSchemaDefs.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(TableServiceSchemaEntry that)
    {
        bool equals = true;
        
        equals = equals && (this.TableIdentifier == null ? true : this.TableIdentifier.MemberwiseCompare(that.TableIdentifier));
        if (equals && this.ServiceSchemaDefs != null && this.ServiceSchemaDefs.Count != 0)
        {
            foreach (var keyValPair1 in this.ServiceSchemaDefs)
            {
                global::Microsoft.ObjectStore.Schema.ServiceSchemaDef val2 = default(global::Microsoft.ObjectStore.Schema.ServiceSchemaDef);
                equals = equals && that.ServiceSchemaDefs.TryGetValue(keyValPair1.Key, out val2);
                if (equals)
                {
                        equals = equals && ((val2 == null) == (keyValPair1.Value == null));
                    equals = equals && (val2 == null ? true : val2.MemberwiseCompare(keyValPair1.Value));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_TableIdentifier, this.TableIdentifier, separator);
        sb.AppendFormat(format, __internal.s_ServiceSchemaDefs, this.ServiceSchemaDefs, separator);
        
        return sb.ToString();
    } // ToString()

}; // class TableServiceSchemaEntry

/// <summary>
/// TableServiceSchemaEntries
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class TableServiceSchemaEntries : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Required vector<Microsoft.ObjectStore.Schema.TableServiceSchemaEntry> Entries
    private List<global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry> m_Entries;

    /// <summary>
    /// Entries
    /// </summary>
    public List<global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry> Entries
    {
        get { return this.m_Entries; }
        set { this.m_Entries = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Entries_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("TableServiceSchemaEntries");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Microsoft.ObjectStore.Schema." + meta.name;


            // Entries
            Entries_meta.name = "Entries";
            Entries_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Entries = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Entries = "Entries";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public TableServiceSchemaEntries()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_Entries == null)
        {
            m_Entries = new List<global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry>();
        }
        else
        {
            m_Entries.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntries cloned = new global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntries();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntries that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: vector<Microsoft.ObjectStore.Schema.TableServiceSchemaEntry> Entries
        if (this.Entries != null)
        {
            if (that.Entries == null)
            {
                that.Entries = new List<global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry>();
            }
            else
            {
                that.Entries.Clear();
            }
            foreach (var iter1 in this.Entries)
            {
                global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry tmpItem2 = default(global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry);
                tmpItem2 = (iter1 == null ? null : (global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry)iter1.Clone());
                that.Entries.Add(tmpItem2);
            }
        }
        else
        {
            that.Entries = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Entries(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"Entries\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Entries:  // id=1
                    this.ReadField_impl_Entries(reader, type);
                    seenRequiredFields.Set(__ordinals.Entries, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_Entries(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_Entries.Capacity < count2)
        {
            this.m_Entries.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry element3 = new global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_Entries.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_Entries


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Entries))
        {
            ok = false;
            missingFieldName = "Entries";
            missingFieldId = __ordinals.Entries;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(TableServiceSchemaEntries))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.Entries, Schema.Entries_meta);
            UInt32 count2 = (m_Entries == null ? 0 : (UInt32)m_Entries.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_Entries[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="Entries";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.ObjectStore.Schema.TableServiceSchemaEntry.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        TableServiceSchemaEntries that = obj as TableServiceSchemaEntries;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(TableServiceSchemaEntries other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(TableServiceSchemaEntries that)
    {
        bool equals = true;
        
        equals = equals && ((this.Entries == null) == (that.Entries == null));
        equals = equals && ((this.Entries == null) ? true : (this.Entries.Count == that.Entries.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(TableServiceSchemaEntries that)
    {
        bool equals = true;
        
        if (equals && this.Entries != null && this.Entries.Count != 0)
        {
            var enum_1_1 = this.Entries.GetEnumerator();
            var enum_2_2 = that.Entries.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Entries, DumpList(this.Entries), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class TableServiceSchemaEntries
} // namespace Schema
} // namespace ObjectStore
} // namespace Microsoft
namespace H_
{

// [A("\0\0\0\0\0\0\0\0")]
/// <summary>
/// key types for multi-tennant service
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class H : global::Microsoft.ObjectStore.QueueService.QueueKeyTableBase
{
    //
    // Fields
    //

    // 100: Required vector<uint8> messageKey
    private List<Byte> m_messageKey;

    // 200: Required Microsoft.ObjectStore.QueueService.QueueID queueID
    private global::Microsoft.ObjectStore.QueueService.QueueID m_queueID;

    /// <summary>
    /// messageKey
    /// </summary>
    public List<Byte> messageKey
    {
        get { return this.m_messageKey; }
        set { this.m_messageKey = value; }
    }

    /// <summary>
    /// queueID
    /// </summary>
    public global::Microsoft.ObjectStore.QueueService.QueueID queueID
    {
        get { return this.m_queueID; }
        set { this.m_queueID = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata messageKey_meta = new Metadata();
        public static readonly Metadata queueID_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("H");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "H_." + meta.name;

            meta.attributes["A"] = "\0\0\0\0\0\0\0\0";

            // messageKey
            messageKey_meta.name = "messageKey";
            messageKey_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // queueID
            queueID_meta.name = "queueID";
            queueID_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            queueID_meta.attributes["KeyMetadata"] = "PartitionKey";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int messageKey = 100;
        public const int queueID = 200;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_messageKey = "messageKey";
        public const String s_queueID = "queueID";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public H()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_messageKey == null)
        {
            m_messageKey = new List<Byte>();
        }
        else
        {
            m_messageKey.Clear();
        }
        m_queueID = new global::Microsoft.ObjectStore.QueueService.QueueID();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::H_.H cloned = new global::H_.H();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::H_.H that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 100: vector<uint8> messageKey
        if (this.messageKey != null)
        {
            if (that.messageKey == null)
            {
                that.messageKey = new List<Byte>();
            }
            else
            {
                that.messageKey.Clear();
            }
            foreach (var iter1 in this.messageKey)
            {
                Byte tmpItem2 = default(Byte);
                tmpItem2 = iter1;
                that.messageKey.Add(tmpItem2);
            }
        }
        else
        {
            that.messageKey = null;
        }
        // 200: Microsoft.ObjectStore.QueueService.QueueID queueID
        that.queueID = (this.queueID == null ? null : (global::Microsoft.ObjectStore.QueueService.QueueID)this.queueID.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_messageKey(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"messageKey\", id=100");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.queueID.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"queueID\", id=200");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        
        BitArray seenRequiredFields = new BitArray(201);

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.messageKey:  // id=100
                    this.ReadField_impl_messageKey(reader, type);
                    seenRequiredFields.Set(__ordinals.messageKey, true);
                    break;
                case __ordinals.queueID:  // id=200
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.queueID.Read(reader);
                    seenRequiredFields.Set(__ordinals.queueID, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_messageKey(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_messageKey.Capacity < count2)
        {
            this.m_messageKey.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Byte element3 = default(Byte);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType1);
            this.m_messageKey.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_messageKey


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.messageKey))
        {
            ok = false;
            missingFieldName = "messageKey";
            missingFieldId = __ordinals.messageKey;
        }
        if (ok && !seenFields.Get(__ordinals.queueID))
        {
            ok = false;
            missingFieldName = "queueID";
            missingFieldId = __ordinals.queueID;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(H))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.messageKey, Schema.messageKey_meta);
            UInt32 count2 = (m_messageKey == null ? 0 : (UInt32)m_messageKey.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_UINT8);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    writer.WriteUInt8(m_messageKey[idx1]);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.queueID, Schema.queueID_meta);
            m_queueID.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Microsoft.ObjectStore.QueueService.QueueKeyTableBase.GetTypeDef(schema);
        
        structDef.metadata.attributes["A"] = "\0\0\0\0\0\0\0\0";

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 100;
        field.metadata.name="messageKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 200;
        field.metadata.name="queueID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::Microsoft.ObjectStore.QueueService.QueueID.GetTypeDef(schema);
        field.metadata.attributes["KeyMetadata"] = "PartitionKey";

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        H that = obj as H;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(H other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(H that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.messageKey == null) == (that.messageKey == null));
        equals = equals && ((this.messageKey == null) ? true : (this.messageKey.Count == that.messageKey.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(H that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        if (equals && this.messageKey != null && this.messageKey.Count != 0)
        {
            var enum_1_1 = this.messageKey.GetEnumerator();
            var enum_2_2 = that.messageKey.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.queueID == null ? true : this.queueID.MemberwiseCompare(that.queueID));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_messageKey, DumpList(this.messageKey), separator);
        sb.AppendFormat(format, __internal.s_queueID, this.queueID, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class H
} // namespace H_
// Coproc related types
namespace IndexService
{

/// <summary>
/// ResponseCode
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum ResponseCode
{
                    
    Failure = 0,
    SuccessKeyPresent,
    SuccessKeyNotPresent,
    UnknownResponseCode,
}; // enum ResponseCode


/// <summary>
/// MarkerIndexValue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class MarkerIndexValue : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional uint16 m_markerIndex
    private UInt16 m_m_markerIndex;

    // 2: Optional uint32 m_markerValue
    private UInt32 m_m_markerValue;

    /// <summary>
    /// m_markerIndex
    /// </summary>
    public UInt16 m_markerIndex
    {
        get { return this.m_m_markerIndex; }
        set { this.m_m_markerIndex = value; }
    }

    /// <summary>
    /// m_markerValue
    /// </summary>
    public UInt32 m_markerValue
    {
        get { return this.m_m_markerValue; }
        set { this.m_m_markerValue = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_markerIndex_meta = new Metadata();
        public static readonly Metadata m_markerValue_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("MarkerIndexValue");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // m_markerIndex
            m_markerIndex_meta.name = "m_markerIndex";
            m_markerIndex_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_markerIndex_meta.default_value.uint_value = 0;

            // m_markerValue
            m_markerValue_meta.name = "m_markerValue";
            m_markerValue_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_markerValue_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_markerIndex = 1;
        public const int m_markerValue = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_markerIndex = "m_markerIndex";
        public const String s_m_markerValue = "m_markerValue";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public MarkerIndexValue()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_markerIndex = 0;
        m_m_markerValue = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.MarkerIndexValue cloned = new global::IndexService.MarkerIndexValue();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.MarkerIndexValue that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: uint16 m_markerIndex
        that.m_markerIndex = this.m_markerIndex;
        // 2: uint32 m_markerValue
        that.m_markerValue = this.m_markerValue;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_markerIndex = reader.ReadUInt16();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_markerValue = reader.ReadUInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_markerIndex:  // id=1
                    this.m_markerIndex = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, type);
                    break;
                case __ordinals.m_markerValue:  // id=2
                    this.m_markerValue = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(MarkerIndexValue))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.m_markerIndex_meta.default_value.Equals(m_m_markerIndex)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT16, __ordinals.m_markerIndex, Schema.m_markerIndex_meta);
                writer.WriteUInt16(m_m_markerIndex);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT16, __ordinals.m_markerIndex, Schema.m_markerIndex_meta);
        }

        if (writeAllFields || (!Schema.m_markerValue_meta.default_value.Equals(m_m_markerValue)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_markerValue, Schema.m_markerValue_meta);
                writer.WriteUInt32(m_m_markerValue);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_markerValue, Schema.m_markerValue_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="m_markerIndex";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="m_markerValue";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        MarkerIndexValue that = obj as MarkerIndexValue;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(MarkerIndexValue other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(MarkerIndexValue that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_markerIndex == that.m_markerIndex));
        equals = equals && ((this.m_markerValue == that.m_markerValue));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(MarkerIndexValue that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_markerIndex, this.m_markerIndex, separator);
        sb.AppendFormat(format, __internal.s_m_markerValue, this.m_markerValue, separator);
        
        return sb.ToString();
    } // ToString()

}; // class MarkerIndexValue

/// <summary>
/// UrlHash16B
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class UrlHash16B : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional uint64 m_data1
    private UInt64 m_m_data1;

    // 2: Optional uint64 m_data2
    private UInt64 m_m_data2;

    /// <summary>
    /// m_data1
    /// </summary>
    public UInt64 m_data1
    {
        get { return this.m_m_data1; }
        set { this.m_m_data1 = value; }
    }

    /// <summary>
    /// m_data2
    /// </summary>
    public UInt64 m_data2
    {
        get { return this.m_m_data2; }
        set { this.m_m_data2 = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_data1_meta = new Metadata();
        public static readonly Metadata m_data2_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("UrlHash16B");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // m_data1
            m_data1_meta.name = "m_data1";
            m_data1_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_data1_meta.default_value.uint_value = 0;

            // m_data2
            m_data2_meta.name = "m_data2";
            m_data2_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_data2_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_data1 = 1;
        public const int m_data2 = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_data1 = "m_data1";
        public const String s_m_data2 = "m_data2";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public UrlHash16B()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_data1 = 0;
        m_m_data2 = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.UrlHash16B cloned = new global::IndexService.UrlHash16B();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.UrlHash16B that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: uint64 m_data1
        that.m_data1 = this.m_data1;
        // 2: uint64 m_data2
        that.m_data2 = this.m_data2;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_data1 = reader.ReadUInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_data2 = reader.ReadUInt64();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_data1:  // id=1
                    this.m_data1 = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    break;
                case __ordinals.m_data2:  // id=2
                    this.m_data2 = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(UrlHash16B))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.m_data1_meta.default_value.Equals(m_m_data1)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_data1, Schema.m_data1_meta);
                writer.WriteUInt64(m_m_data1);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_data1, Schema.m_data1_meta);
        }

        if (writeAllFields || (!Schema.m_data2_meta.default_value.Equals(m_m_data2)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_data2, Schema.m_data2_meta);
                writer.WriteUInt64(m_m_data2);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_data2, Schema.m_data2_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="m_data1";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="m_data2";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        UrlHash16B that = obj as UrlHash16B;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(UrlHash16B other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(UrlHash16B that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_data1 == that.m_data1));
        equals = equals && ((this.m_data2 == that.m_data2));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(UrlHash16B that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_data1, this.m_data1, separator);
        sb.AppendFormat(format, __internal.s_m_data2, this.m_data2, separator);
        
        return sb.ToString();
    } // ToString()

}; // class UrlHash16B

/// <summary>
/// RankerExtendedResults
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class RankerExtendedResults : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 1: Optional uint64 m_doc_ID
    private UInt64 m_m_doc_ID;

    // 2: Optional string m_doc_ExtendedDebugString
    private String m_m_doc_ExtendedDebugString;

    // 3: Optional string m_EQDebugBin
    private String m_m_EQDebugBin;

    // 4: Optional uint32 m_minidoc_ID
    private UInt32 m_m_minidoc_ID;

    // 5: Optional nullable<IndexService.UrlHash16B> m_urlHash16B
    private global::IndexService.UrlHash16B m_m_urlHash16B;

    /// <summary>
    /// m_doc_ID
    /// </summary>
    public UInt64 m_doc_ID
    {
        get { return this.m_m_doc_ID; }
        set { this.m_m_doc_ID = value; }
    }

    /// <summary>
    /// m_doc_ExtendedDebugString
    /// </summary>
    public String m_doc_ExtendedDebugString
    {
        get { return this.m_m_doc_ExtendedDebugString; }
        set { this.m_m_doc_ExtendedDebugString = value; }
    }

    /// <summary>
    /// m_EQDebugBin
    /// </summary>
    public String m_EQDebugBin
    {
        get { return this.m_m_EQDebugBin; }
        set { this.m_m_EQDebugBin = value; }
    }

    /// <summary>
    /// m_minidoc_ID
    /// </summary>
    public UInt32 m_minidoc_ID
    {
        get { return this.m_m_minidoc_ID; }
        set { this.m_m_minidoc_ID = value; }
    }

    /// <summary>
    /// m_urlHash16B
    /// </summary>
    public global::IndexService.UrlHash16B m_urlHash16B
    {
        get { return this.m_m_urlHash16B; }
        set { this.m_m_urlHash16B = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_doc_ID_meta = new Metadata();
        public static readonly Metadata m_doc_ExtendedDebugString_meta = new Metadata();
        public static readonly Metadata m_EQDebugBin_meta = new Metadata();
        public static readonly Metadata m_minidoc_ID_meta = new Metadata();
        public static readonly Metadata m_urlHash16B_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("RankerExtendedResults");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // m_doc_ID
            m_doc_ID_meta.name = "m_doc_ID";
            m_doc_ID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_doc_ID_meta.default_value.uint_value = 0;

            // m_doc_ExtendedDebugString
            m_doc_ExtendedDebugString_meta.name = "m_doc_ExtendedDebugString";
            m_doc_ExtendedDebugString_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_EQDebugBin
            m_EQDebugBin_meta.name = "m_EQDebugBin";
            m_EQDebugBin_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_minidoc_ID
            m_minidoc_ID_meta.name = "m_minidoc_ID";
            m_minidoc_ID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_minidoc_ID_meta.default_value.uint_value = 0;

            // m_urlHash16B
            m_urlHash16B_meta.name = "m_urlHash16B";
            m_urlHash16B_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_doc_ID = 1;
        public const int m_doc_ExtendedDebugString = 2;
        public const int m_EQDebugBin = 3;
        public const int m_minidoc_ID = 4;
        public const int m_urlHash16B = 5;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_doc_ID = "m_doc_ID";
        public const String s_m_doc_ExtendedDebugString = "m_doc_ExtendedDebugString";
        public const String s_m_EQDebugBin = "m_EQDebugBin";
        public const String s_m_minidoc_ID = "m_minidoc_ID";
        public const String s_m_urlHash16B = "m_urlHash16B";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public RankerExtendedResults()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_doc_ID = 0;
        m_m_doc_ExtendedDebugString = string.Empty;
        m_m_EQDebugBin = string.Empty;
        m_m_minidoc_ID = 0;
        m_m_urlHash16B = default(global::IndexService.UrlHash16B);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.RankerExtendedResults cloned = new global::IndexService.RankerExtendedResults();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.RankerExtendedResults that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 1: uint64 m_doc_ID
        that.m_doc_ID = this.m_doc_ID;
        // 2: string m_doc_ExtendedDebugString
        that.m_doc_ExtendedDebugString = this.m_doc_ExtendedDebugString;
        // 3: string m_EQDebugBin
        that.m_EQDebugBin = this.m_EQDebugBin;
        // 4: uint32 m_minidoc_ID
        that.m_minidoc_ID = this.m_minidoc_ID;
        // 5: nullable<IndexService.UrlHash16B> m_urlHash16B
        that.m_urlHash16B = (this.m_urlHash16B == null ? null : (global::IndexService.UrlHash16B)this.m_urlHash16B.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_doc_ID = reader.ReadUInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_doc_ExtendedDebugString = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_EQDebugBin = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_minidoc_ID = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_urlHash16B(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_doc_ID:  // id=1
                    this.m_doc_ID = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    break;
                case __ordinals.m_doc_ExtendedDebugString:  // id=2
                    this.m_doc_ExtendedDebugString = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.m_EQDebugBin:  // id=3
                    this.m_EQDebugBin = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.m_minidoc_ID:  // id=4
                    this.m_minidoc_ID = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_urlHash16B:  // id=5
                    this.ReadField_impl_m_urlHash16B(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_m_urlHash16B(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_m_urlHash16B == null) { this.m_m_urlHash16B = new global::IndexService.UrlHash16B(); } 
            ReadHelper.ReadStruct(reader, this.m_m_urlHash16B, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_urlHash16B


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(RankerExtendedResults))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.m_doc_ID_meta.default_value.Equals(m_m_doc_ID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_doc_ID, Schema.m_doc_ID_meta);
                writer.WriteUInt64(m_m_doc_ID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_doc_ID, Schema.m_doc_ID_meta);
        }

        if (writeAllFields || (!Schema.m_doc_ExtendedDebugString_meta.default_value.Equals(m_m_doc_ExtendedDebugString)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_doc_ExtendedDebugString, Schema.m_doc_ExtendedDebugString_meta);
                writer.WriteString(m_m_doc_ExtendedDebugString);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_doc_ExtendedDebugString, Schema.m_doc_ExtendedDebugString_meta);
        }

        if (writeAllFields || (!Schema.m_EQDebugBin_meta.default_value.Equals(m_m_EQDebugBin)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_EQDebugBin, Schema.m_EQDebugBin_meta);
                writer.WriteString(m_m_EQDebugBin);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_EQDebugBin, Schema.m_EQDebugBin_meta);
        }

        if (writeAllFields || (!Schema.m_minidoc_ID_meta.default_value.Equals(m_m_minidoc_ID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_minidoc_ID, Schema.m_minidoc_ID_meta);
                writer.WriteUInt32(m_m_minidoc_ID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_minidoc_ID, Schema.m_minidoc_ID_meta);
        }

        UInt32 count1 = (UInt32)((m_m_urlHash16B != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_urlHash16B, Schema.m_urlHash16B_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_m_urlHash16B.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_urlHash16B, Schema.m_urlHash16B_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="m_doc_ID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="m_doc_ExtendedDebugString";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="m_EQDebugBin";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="m_minidoc_ID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 5;
        field.metadata.name="m_urlHash16B";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::IndexService.UrlHash16B.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        RankerExtendedResults that = obj as RankerExtendedResults;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(RankerExtendedResults other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(RankerExtendedResults that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_doc_ID == that.m_doc_ID));
        equals = equals && ((this.m_doc_ExtendedDebugString == null) == (that.m_doc_ExtendedDebugString == null));
        equals = equals && (this.m_doc_ExtendedDebugString == null ? true : (this.m_doc_ExtendedDebugString.Length == that.m_doc_ExtendedDebugString.Length));
        equals = equals && ((this.m_EQDebugBin == null) == (that.m_EQDebugBin == null));
        equals = equals && (this.m_EQDebugBin == null ? true : (this.m_EQDebugBin.Length == that.m_EQDebugBin.Length));
        equals = equals && ((this.m_minidoc_ID == that.m_minidoc_ID));
        equals = equals && ((this.m_urlHash16B == null) == (that.m_urlHash16B == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(RankerExtendedResults that)
    {
        bool equals = true;
        
        equals = equals && (this.m_doc_ExtendedDebugString == null ? true : this.m_doc_ExtendedDebugString == that.m_doc_ExtendedDebugString);
        equals = equals && (this.m_EQDebugBin == null ? true : this.m_EQDebugBin == that.m_EQDebugBin);
        equals = equals && ((this.m_urlHash16B == null) == (that.m_urlHash16B == null));
        if (equals && !(this.m_urlHash16B == null))
        {
            equals = equals && (this.m_urlHash16B == null ? true : this.m_urlHash16B.MemberwiseCompare(that.m_urlHash16B));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_doc_ID, this.m_doc_ID, separator);
        sb.AppendFormat(format, __internal.s_m_doc_ExtendedDebugString, this.m_doc_ExtendedDebugString, separator);
        sb.AppendFormat(format, __internal.s_m_EQDebugBin, this.m_EQDebugBin, separator);
        sb.AppendFormat(format, __internal.s_m_minidoc_ID, this.m_minidoc_ID, separator);
        sb.AppendFormat(format, __internal.s_m_urlHash16B, this.m_urlHash16B, separator);
        
        return sb.ToString();
    } // ToString()

}; // class RankerExtendedResults

/// <summary>
/// DocResponseInfo
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DocResponseInfo : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 20: Optional uint8 m_Doc_IsShingleClusterRoot
    private Byte m_m_Doc_IsShingleClusterRoot;

    // 21: Optional uint32 m_Doc_HostClusterSize
    private UInt32 m_m_Doc_HostClusterSize;

    // 22: Optional uint64 m_Doc_ParentDocID
    private UInt64 m_m_Doc_ParentDocID;

    // 30: Optional uint32 m_Doc_Definitive
    private UInt32 m_m_Doc_Definitive;

    // 31: Optional float m_Doc_AdjustedRank
    private Single m_m_Doc_AdjustedRank;

    // 32: Optional float m_Doc_SuperfreshRank
    private Single m_m_Doc_SuperfreshRank;

    // 33: Optional float m_Doc_TLANNRank
    private Single m_m_Doc_TLANNRank;

    // 34: Optional uint32 m_KeepInPlaceEnum
    private UInt32 m_m_KeepInPlaceEnum;

    // 35: Optional uint16 m_FinalRankRound
    private UInt16 m_m_FinalRankRound;

    // 50: Optional vector<double> m_TLARerankScores
    private List<Double> m_m_TLARerankScores;

    // 51: Optional uint32 m_FcsDedupStatus
    private UInt32 m_m_FcsDedupStatus;

    // 52: Optional uint32 m_Doc_NewsClusterID
    private UInt32 m_m_Doc_NewsClusterID;

    // 60: Optional float m_Doc_FinalRank
    private Single m_m_Doc_FinalRank;

    // 61: Optional double m_Doc_FinalDoubleRank
    private Double m_m_Doc_FinalDoubleRank;

    // 70: Optional uint32 m_MediaClusterId
    private UInt32 m_m_MediaClusterId;

    // 72: Optional uint8 m_Doc_MediaRealtime
    private Byte m_m_Doc_MediaRealtime;

    // 73: Optional string m_MediaAggregatedText
    private String m_m_MediaAggregatedText;

    // 90: Optional vector<uint16> m_Doc_ShinglePrint
    private List<UInt16> m_m_Doc_ShinglePrint;

    // 91: Optional nullable<uint32> m_Doc_Crc32
    private UInt32? m_m_Doc_Crc32;

    // 92: Optional nullable<uint8> m_Doc_WordBreakerVersion
    private Byte? m_m_Doc_WordBreakerVersion;

    // 93: Optional uint32 m_Doc_HostID
    private UInt32 m_m_Doc_HostID;

    // 94: Optional uint32 m_Doc_Title_Hash
    private UInt32 m_m_Doc_Title_Hash;

    // 95: Optional map<uint8, uint32> m_Doc_FirstMarker
    private Dictionary<Byte, UInt32> m_m_Doc_FirstMarker;

    // 96: Optional map<uint8, uint32> m_Doc_FirstMarkerSecondary
    private Dictionary<Byte, UInt32> m_m_Doc_FirstMarkerSecondary;

    // 97: Optional map<uint8, float> m_Doc_FirstExtraRanker
    private Dictionary<Byte, Single> m_m_Doc_FirstExtraRanker;

    // 98: Optional vector<IndexService.MarkerIndexValue> m_doc_ThirdMarkerFlatArray
    private List<global::IndexService.MarkerIndexValue> m_m_doc_ThirdMarkerFlatArray;

    // 99: Optional uint8 m_doc_tlaModelFailsOnIFM
    private Byte m_m_doc_tlaModelFailsOnIFM;

    // 131: Optional IndexService.RankerExtendedResults m_RankerExtendedResults
    private global::IndexService.RankerExtendedResults m_m_RankerExtendedResults;

    // 201: Optional float m_QueryLatitudeID
    private Single m_m_QueryLatitudeID;

    // 202: Optional float m_QueryLongitudeID
    private Single m_m_QueryLongitudeID;

    /// <summary>
    /// 10: optional CDCaptionSet m_CDCaptionSet;
    /// </summary>
    public Byte m_Doc_IsShingleClusterRoot
    {
        get { return this.m_m_Doc_IsShingleClusterRoot; }
        set { this.m_m_Doc_IsShingleClusterRoot = value; }
    }

    /// <summary>
    /// m_Doc_HostClusterSize
    /// </summary>
    public UInt32 m_Doc_HostClusterSize
    {
        get { return this.m_m_Doc_HostClusterSize; }
        set { this.m_m_Doc_HostClusterSize = value; }
    }

    /// <summary>
    /// m_Doc_ParentDocID
    /// </summary>
    public UInt64 m_Doc_ParentDocID
    {
        get { return this.m_m_Doc_ParentDocID; }
        set { this.m_m_Doc_ParentDocID = value; }
    }

    /// <summary>
    /// m_Doc_Definitive
    /// </summary>
    public UInt32 m_Doc_Definitive
    {
        get { return this.m_m_Doc_Definitive; }
        set { this.m_m_Doc_Definitive = value; }
    }

    /// <summary>
    /// m_Doc_AdjustedRank
    /// </summary>
    public Single m_Doc_AdjustedRank
    {
        get { return this.m_m_Doc_AdjustedRank; }
        set { this.m_m_Doc_AdjustedRank = value; }
    }

    /// <summary>
    /// m_Doc_SuperfreshRank
    /// </summary>
    public Single m_Doc_SuperfreshRank
    {
        get { return this.m_m_Doc_SuperfreshRank; }
        set { this.m_m_Doc_SuperfreshRank = value; }
    }

    /// <summary>
    /// m_Doc_TLANNRank
    /// </summary>
    public Single m_Doc_TLANNRank
    {
        get { return this.m_m_Doc_TLANNRank; }
        set { this.m_m_Doc_TLANNRank = value; }
    }

    /// <summary>
    /// m_KeepInPlaceEnum
    /// </summary>
    public UInt32 m_KeepInPlaceEnum
    {
        get { return this.m_m_KeepInPlaceEnum; }
        set { this.m_m_KeepInPlaceEnum = value; }
    }

    /// <summary>
    /// m_FinalRankRound
    /// </summary>
    public UInt16 m_FinalRankRound
    {
        get { return this.m_m_FinalRankRound; }
        set { this.m_m_FinalRankRound = value; }
    }

    /// <summary>
    /// m_TLARerankScores
    /// </summary>
    public List<Double> m_TLARerankScores
    {
        get { return this.m_m_TLARerankScores; }
        set { this.m_m_TLARerankScores = value; }
    }

    /// <summary>
    /// m_FcsDedupStatus
    /// </summary>
    public UInt32 m_FcsDedupStatus
    {
        get { return this.m_m_FcsDedupStatus; }
        set { this.m_m_FcsDedupStatus = value; }
    }

    /// <summary>
    /// m_Doc_NewsClusterID
    /// </summary>
    public UInt32 m_Doc_NewsClusterID
    {
        get { return this.m_m_Doc_NewsClusterID; }
        set { this.m_m_Doc_NewsClusterID = value; }
    }

    /// <summary>
    /// m_Doc_FinalRank
    /// </summary>
    public Single m_Doc_FinalRank
    {
        get { return this.m_m_Doc_FinalRank; }
        set { this.m_m_Doc_FinalRank = value; }
    }

    /// <summary>
    /// m_Doc_FinalDoubleRank
    /// </summary>
    public Double m_Doc_FinalDoubleRank
    {
        get { return this.m_m_Doc_FinalDoubleRank; }
        set { this.m_m_Doc_FinalDoubleRank = value; }
    }

    /// <summary>
    /// m_MediaClusterId
    /// </summary>
    public UInt32 m_MediaClusterId
    {
        get { return this.m_m_MediaClusterId; }
        set { this.m_m_MediaClusterId = value; }
    }

    /// <summary>
    /// m_Doc_MediaRealtime
    /// </summary>
    public Byte m_Doc_MediaRealtime
    {
        get { return this.m_m_Doc_MediaRealtime; }
        set { this.m_m_Doc_MediaRealtime = value; }
    }

    /// <summary>
    /// m_MediaAggregatedText
    /// </summary>
    public String m_MediaAggregatedText
    {
        get { return this.m_m_MediaAggregatedText; }
        set { this.m_m_MediaAggregatedText = value; }
    }

    /// <summary>
    /// m_Doc_ShinglePrint
    /// </summary>
    public List<UInt16> m_Doc_ShinglePrint
    {
        get { return this.m_m_Doc_ShinglePrint; }
        set { this.m_m_Doc_ShinglePrint = value; }
    }

    /// <summary>
    /// m_Doc_Crc32
    /// </summary>
    public UInt32? m_Doc_Crc32
    {
        get { return this.m_m_Doc_Crc32; }
        set { this.m_m_Doc_Crc32 = value; }
    }

    /// <summary>
    /// m_Doc_WordBreakerVersion
    /// </summary>
    public Byte? m_Doc_WordBreakerVersion
    {
        get { return this.m_m_Doc_WordBreakerVersion; }
        set { this.m_m_Doc_WordBreakerVersion = value; }
    }

    /// <summary>
    /// m_Doc_HostID
    /// </summary>
    public UInt32 m_Doc_HostID
    {
        get { return this.m_m_Doc_HostID; }
        set { this.m_m_Doc_HostID = value; }
    }

    /// <summary>
    /// m_Doc_Title_Hash
    /// </summary>
    public UInt32 m_Doc_Title_Hash
    {
        get { return this.m_m_Doc_Title_Hash; }
        set { this.m_m_Doc_Title_Hash = value; }
    }

    /// <summary>
    /// m_Doc_FirstMarker
    /// </summary>
    public Dictionary<Byte, UInt32> m_Doc_FirstMarker
    {
        get { return this.m_m_Doc_FirstMarker; }
        set { this.m_m_Doc_FirstMarker = value; }
    }

    /// <summary>
    /// m_Doc_FirstMarkerSecondary
    /// </summary>
    public Dictionary<Byte, UInt32> m_Doc_FirstMarkerSecondary
    {
        get { return this.m_m_Doc_FirstMarkerSecondary; }
        set { this.m_m_Doc_FirstMarkerSecondary = value; }
    }

    /// <summary>
    /// m_Doc_FirstExtraRanker
    /// </summary>
    public Dictionary<Byte, Single> m_Doc_FirstExtraRanker
    {
        get { return this.m_m_Doc_FirstExtraRanker; }
        set { this.m_m_Doc_FirstExtraRanker = value; }
    }

    /// <summary>
    /// m_doc_ThirdMarkerFlatArray
    /// </summary>
    public List<global::IndexService.MarkerIndexValue> m_doc_ThirdMarkerFlatArray
    {
        get { return this.m_m_doc_ThirdMarkerFlatArray; }
        set { this.m_m_doc_ThirdMarkerFlatArray = value; }
    }

    /// <summary>
    /// m_doc_tlaModelFailsOnIFM
    /// </summary>
    public Byte m_doc_tlaModelFailsOnIFM
    {
        get { return this.m_m_doc_tlaModelFailsOnIFM; }
        set { this.m_m_doc_tlaModelFailsOnIFM = value; }
    }

    /// <summary>
    /// m_RankerExtendedResults
    /// </summary>
    public global::IndexService.RankerExtendedResults m_RankerExtendedResults
    {
        get { return this.m_m_RankerExtendedResults; }
        set { this.m_m_RankerExtendedResults = value; }
    }

    /// <summary>
    /// m_QueryLatitudeID
    /// </summary>
    public Single m_QueryLatitudeID
    {
        get { return this.m_m_QueryLatitudeID; }
        set { this.m_m_QueryLatitudeID = value; }
    }

    /// <summary>
    /// m_QueryLongitudeID
    /// </summary>
    public Single m_QueryLongitudeID
    {
        get { return this.m_m_QueryLongitudeID; }
        set { this.m_m_QueryLongitudeID = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_Doc_IsShingleClusterRoot_meta = new Metadata();
        public static readonly Metadata m_Doc_HostClusterSize_meta = new Metadata();
        public static readonly Metadata m_Doc_ParentDocID_meta = new Metadata();
        public static readonly Metadata m_Doc_Definitive_meta = new Metadata();
        public static readonly Metadata m_Doc_AdjustedRank_meta = new Metadata();
        public static readonly Metadata m_Doc_SuperfreshRank_meta = new Metadata();
        public static readonly Metadata m_Doc_TLANNRank_meta = new Metadata();
        public static readonly Metadata m_KeepInPlaceEnum_meta = new Metadata();
        public static readonly Metadata m_FinalRankRound_meta = new Metadata();
        public static readonly Metadata m_TLARerankScores_meta = new Metadata();
        public static readonly Metadata m_FcsDedupStatus_meta = new Metadata();
        public static readonly Metadata m_Doc_NewsClusterID_meta = new Metadata();
        public static readonly Metadata m_Doc_FinalRank_meta = new Metadata();
        public static readonly Metadata m_Doc_FinalDoubleRank_meta = new Metadata();
        public static readonly Metadata m_MediaClusterId_meta = new Metadata();
        public static readonly Metadata m_Doc_MediaRealtime_meta = new Metadata();
        public static readonly Metadata m_MediaAggregatedText_meta = new Metadata();
        public static readonly Metadata m_Doc_ShinglePrint_meta = new Metadata();
        public static readonly Metadata m_Doc_Crc32_meta = new Metadata();
        public static readonly Metadata m_Doc_WordBreakerVersion_meta = new Metadata();
        public static readonly Metadata m_Doc_HostID_meta = new Metadata();
        public static readonly Metadata m_Doc_Title_Hash_meta = new Metadata();
        public static readonly Metadata m_Doc_FirstMarker_meta = new Metadata();
        public static readonly Metadata m_Doc_FirstMarkerSecondary_meta = new Metadata();
        public static readonly Metadata m_Doc_FirstExtraRanker_meta = new Metadata();
        public static readonly Metadata m_doc_ThirdMarkerFlatArray_meta = new Metadata();
        public static readonly Metadata m_doc_tlaModelFailsOnIFM_meta = new Metadata();
        public static readonly Metadata m_RankerExtendedResults_meta = new Metadata();
        public static readonly Metadata m_QueryLatitudeID_meta = new Metadata();
        public static readonly Metadata m_QueryLongitudeID_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DocResponseInfo");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // m_Doc_IsShingleClusterRoot
            m_Doc_IsShingleClusterRoot_meta.name = "m_Doc_IsShingleClusterRoot";
            m_Doc_IsShingleClusterRoot_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_IsShingleClusterRoot_meta.default_value.uint_value = 0;

            // m_Doc_HostClusterSize
            m_Doc_HostClusterSize_meta.name = "m_Doc_HostClusterSize";
            m_Doc_HostClusterSize_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_HostClusterSize_meta.default_value.uint_value = 0;

            // m_Doc_ParentDocID
            m_Doc_ParentDocID_meta.name = "m_Doc_ParentDocID";
            m_Doc_ParentDocID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_ParentDocID_meta.default_value.uint_value = 0;

            // m_Doc_Definitive
            m_Doc_Definitive_meta.name = "m_Doc_Definitive";
            m_Doc_Definitive_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_Definitive_meta.default_value.uint_value = 0;

            // m_Doc_AdjustedRank
            m_Doc_AdjustedRank_meta.name = "m_Doc_AdjustedRank";
            m_Doc_AdjustedRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_AdjustedRank_meta.default_value.double_value = 0;

            // m_Doc_SuperfreshRank
            m_Doc_SuperfreshRank_meta.name = "m_Doc_SuperfreshRank";
            m_Doc_SuperfreshRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_SuperfreshRank_meta.default_value.double_value = 0;

            // m_Doc_TLANNRank
            m_Doc_TLANNRank_meta.name = "m_Doc_TLANNRank";
            m_Doc_TLANNRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_TLANNRank_meta.default_value.double_value = 0;

            // m_KeepInPlaceEnum
            m_KeepInPlaceEnum_meta.name = "m_KeepInPlaceEnum";
            m_KeepInPlaceEnum_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_KeepInPlaceEnum_meta.default_value.uint_value = 0;

            // m_FinalRankRound
            m_FinalRankRound_meta.name = "m_FinalRankRound";
            m_FinalRankRound_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_FinalRankRound_meta.default_value.uint_value = 0;

            // m_TLARerankScores
            m_TLARerankScores_meta.name = "m_TLARerankScores";
            m_TLARerankScores_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_FcsDedupStatus
            m_FcsDedupStatus_meta.name = "m_FcsDedupStatus";
            m_FcsDedupStatus_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_FcsDedupStatus_meta.default_value.uint_value = 0;

            // m_Doc_NewsClusterID
            m_Doc_NewsClusterID_meta.name = "m_Doc_NewsClusterID";
            m_Doc_NewsClusterID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_NewsClusterID_meta.default_value.uint_value = 0;

            // m_Doc_FinalRank
            m_Doc_FinalRank_meta.name = "m_Doc_FinalRank";
            m_Doc_FinalRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_FinalRank_meta.default_value.double_value = 0;

            // m_Doc_FinalDoubleRank
            m_Doc_FinalDoubleRank_meta.name = "m_Doc_FinalDoubleRank";
            m_Doc_FinalDoubleRank_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_FinalDoubleRank_meta.default_value.double_value = 0;

            // m_MediaClusterId
            m_MediaClusterId_meta.name = "m_MediaClusterId";
            m_MediaClusterId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_MediaClusterId_meta.default_value.uint_value = 0;

            // m_Doc_MediaRealtime
            m_Doc_MediaRealtime_meta.name = "m_Doc_MediaRealtime";
            m_Doc_MediaRealtime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_MediaRealtime_meta.default_value.uint_value = 0;

            // m_MediaAggregatedText
            m_MediaAggregatedText_meta.name = "m_MediaAggregatedText";
            m_MediaAggregatedText_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_Doc_ShinglePrint
            m_Doc_ShinglePrint_meta.name = "m_Doc_ShinglePrint";
            m_Doc_ShinglePrint_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_Doc_Crc32
            m_Doc_Crc32_meta.name = "m_Doc_Crc32";
            m_Doc_Crc32_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_Doc_WordBreakerVersion
            m_Doc_WordBreakerVersion_meta.name = "m_Doc_WordBreakerVersion";
            m_Doc_WordBreakerVersion_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_Doc_HostID
            m_Doc_HostID_meta.name = "m_Doc_HostID";
            m_Doc_HostID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_HostID_meta.default_value.uint_value = 0;

            // m_Doc_Title_Hash
            m_Doc_Title_Hash_meta.name = "m_Doc_Title_Hash";
            m_Doc_Title_Hash_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_Doc_Title_Hash_meta.default_value.uint_value = 0;

            // m_Doc_FirstMarker
            m_Doc_FirstMarker_meta.name = "m_Doc_FirstMarker";
            m_Doc_FirstMarker_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_Doc_FirstMarkerSecondary
            m_Doc_FirstMarkerSecondary_meta.name = "m_Doc_FirstMarkerSecondary";
            m_Doc_FirstMarkerSecondary_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_Doc_FirstExtraRanker
            m_Doc_FirstExtraRanker_meta.name = "m_Doc_FirstExtraRanker";
            m_Doc_FirstExtraRanker_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_doc_ThirdMarkerFlatArray
            m_doc_ThirdMarkerFlatArray_meta.name = "m_doc_ThirdMarkerFlatArray";
            m_doc_ThirdMarkerFlatArray_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_doc_tlaModelFailsOnIFM
            m_doc_tlaModelFailsOnIFM_meta.name = "m_doc_tlaModelFailsOnIFM";
            m_doc_tlaModelFailsOnIFM_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_doc_tlaModelFailsOnIFM_meta.default_value.uint_value = 0;

            // m_RankerExtendedResults
            m_RankerExtendedResults_meta.name = "m_RankerExtendedResults";
            m_RankerExtendedResults_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // m_QueryLatitudeID
            m_QueryLatitudeID_meta.name = "m_QueryLatitudeID";
            m_QueryLatitudeID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_QueryLatitudeID_meta.default_value.double_value = 0;

            // m_QueryLongitudeID
            m_QueryLongitudeID_meta.name = "m_QueryLongitudeID";
            m_QueryLongitudeID_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            m_QueryLongitudeID_meta.default_value.double_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_Doc_IsShingleClusterRoot = 20;
        public const int m_Doc_HostClusterSize = 21;
        public const int m_Doc_ParentDocID = 22;
        public const int m_Doc_Definitive = 30;
        public const int m_Doc_AdjustedRank = 31;
        public const int m_Doc_SuperfreshRank = 32;
        public const int m_Doc_TLANNRank = 33;
        public const int m_KeepInPlaceEnum = 34;
        public const int m_FinalRankRound = 35;
        public const int m_TLARerankScores = 50;
        public const int m_FcsDedupStatus = 51;
        public const int m_Doc_NewsClusterID = 52;
        public const int m_Doc_FinalRank = 60;
        public const int m_Doc_FinalDoubleRank = 61;
        public const int m_MediaClusterId = 70;
        public const int m_Doc_MediaRealtime = 72;
        public const int m_MediaAggregatedText = 73;
        public const int m_Doc_ShinglePrint = 90;
        public const int m_Doc_Crc32 = 91;
        public const int m_Doc_WordBreakerVersion = 92;
        public const int m_Doc_HostID = 93;
        public const int m_Doc_Title_Hash = 94;
        public const int m_Doc_FirstMarker = 95;
        public const int m_Doc_FirstMarkerSecondary = 96;
        public const int m_Doc_FirstExtraRanker = 97;
        public const int m_doc_ThirdMarkerFlatArray = 98;
        public const int m_doc_tlaModelFailsOnIFM = 99;
        public const int m_RankerExtendedResults = 131;
        public const int m_QueryLatitudeID = 201;
        public const int m_QueryLongitudeID = 202;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_Doc_IsShingleClusterRoot = "m_Doc_IsShingleClusterRoot";
        public const String s_m_Doc_HostClusterSize = "m_Doc_HostClusterSize";
        public const String s_m_Doc_ParentDocID = "m_Doc_ParentDocID";
        public const String s_m_Doc_Definitive = "m_Doc_Definitive";
        public const String s_m_Doc_AdjustedRank = "m_Doc_AdjustedRank";
        public const String s_m_Doc_SuperfreshRank = "m_Doc_SuperfreshRank";
        public const String s_m_Doc_TLANNRank = "m_Doc_TLANNRank";
        public const String s_m_KeepInPlaceEnum = "m_KeepInPlaceEnum";
        public const String s_m_FinalRankRound = "m_FinalRankRound";
        public const String s_m_TLARerankScores = "m_TLARerankScores";
        public const String s_m_FcsDedupStatus = "m_FcsDedupStatus";
        public const String s_m_Doc_NewsClusterID = "m_Doc_NewsClusterID";
        public const String s_m_Doc_FinalRank = "m_Doc_FinalRank";
        public const String s_m_Doc_FinalDoubleRank = "m_Doc_FinalDoubleRank";
        public const String s_m_MediaClusterId = "m_MediaClusterId";
        public const String s_m_Doc_MediaRealtime = "m_Doc_MediaRealtime";
        public const String s_m_MediaAggregatedText = "m_MediaAggregatedText";
        public const String s_m_Doc_ShinglePrint = "m_Doc_ShinglePrint";
        public const String s_m_Doc_Crc32 = "m_Doc_Crc32";
        public const String s_m_Doc_WordBreakerVersion = "m_Doc_WordBreakerVersion";
        public const String s_m_Doc_HostID = "m_Doc_HostID";
        public const String s_m_Doc_Title_Hash = "m_Doc_Title_Hash";
        public const String s_m_Doc_FirstMarker = "m_Doc_FirstMarker";
        public const String s_m_Doc_FirstMarkerSecondary = "m_Doc_FirstMarkerSecondary";
        public const String s_m_Doc_FirstExtraRanker = "m_Doc_FirstExtraRanker";
        public const String s_m_doc_ThirdMarkerFlatArray = "m_doc_ThirdMarkerFlatArray";
        public const String s_m_doc_tlaModelFailsOnIFM = "m_doc_tlaModelFailsOnIFM";
        public const String s_m_RankerExtendedResults = "m_RankerExtendedResults";
        public const String s_m_QueryLatitudeID = "m_QueryLatitudeID";
        public const String s_m_QueryLongitudeID = "m_QueryLongitudeID";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DocResponseInfo()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_Doc_IsShingleClusterRoot = 0;
        m_m_Doc_HostClusterSize = 0;
        m_m_Doc_ParentDocID = 0;
        m_m_Doc_Definitive = 0;
        m_m_Doc_AdjustedRank = 0F;
        m_m_Doc_SuperfreshRank = 0F;
        m_m_Doc_TLANNRank = 0F;
        m_m_KeepInPlaceEnum = 0;
        m_m_FinalRankRound = 0;
        if (m_m_TLARerankScores == null)
        {
            m_m_TLARerankScores = new List<Double>();
        }
        else
        {
            m_m_TLARerankScores.Clear();
        }
        m_m_FcsDedupStatus = 0;
        m_m_Doc_NewsClusterID = 0;
        m_m_Doc_FinalRank = 0F;
        m_m_Doc_FinalDoubleRank = 0;
        m_m_MediaClusterId = 0;
        m_m_Doc_MediaRealtime = 0;
        m_m_MediaAggregatedText = string.Empty;
        if (m_m_Doc_ShinglePrint == null)
        {
            m_m_Doc_ShinglePrint = new List<UInt16>();
        }
        else
        {
            m_m_Doc_ShinglePrint.Clear();
        }
        m_m_Doc_Crc32 = default(UInt32?);
        m_m_Doc_WordBreakerVersion = default(Byte?);
        m_m_Doc_HostID = 0;
        m_m_Doc_Title_Hash = 0;
        if (m_m_Doc_FirstMarker == null)
        {
            m_m_Doc_FirstMarker = new Dictionary<Byte, UInt32>();
        }
        else
        {
            m_m_Doc_FirstMarker.Clear();
        }
        if (m_m_Doc_FirstMarkerSecondary == null)
        {
            m_m_Doc_FirstMarkerSecondary = new Dictionary<Byte, UInt32>();
        }
        else
        {
            m_m_Doc_FirstMarkerSecondary.Clear();
        }
        if (m_m_Doc_FirstExtraRanker == null)
        {
            m_m_Doc_FirstExtraRanker = new Dictionary<Byte, Single>();
        }
        else
        {
            m_m_Doc_FirstExtraRanker.Clear();
        }
        if (m_m_doc_ThirdMarkerFlatArray == null)
        {
            m_m_doc_ThirdMarkerFlatArray = new List<global::IndexService.MarkerIndexValue>();
        }
        else
        {
            m_m_doc_ThirdMarkerFlatArray.Clear();
        }
        m_m_doc_tlaModelFailsOnIFM = 0;
        m_m_RankerExtendedResults = new global::IndexService.RankerExtendedResults();
        m_m_QueryLatitudeID = 0F;
        m_m_QueryLongitudeID = 0F;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.DocResponseInfo cloned = new global::IndexService.DocResponseInfo();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.DocResponseInfo that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 20: uint8 m_Doc_IsShingleClusterRoot
        that.m_Doc_IsShingleClusterRoot = this.m_Doc_IsShingleClusterRoot;
        // 21: uint32 m_Doc_HostClusterSize
        that.m_Doc_HostClusterSize = this.m_Doc_HostClusterSize;
        // 22: uint64 m_Doc_ParentDocID
        that.m_Doc_ParentDocID = this.m_Doc_ParentDocID;
        // 30: uint32 m_Doc_Definitive
        that.m_Doc_Definitive = this.m_Doc_Definitive;
        // 31: float m_Doc_AdjustedRank
        that.m_Doc_AdjustedRank = this.m_Doc_AdjustedRank;
        // 32: float m_Doc_SuperfreshRank
        that.m_Doc_SuperfreshRank = this.m_Doc_SuperfreshRank;
        // 33: float m_Doc_TLANNRank
        that.m_Doc_TLANNRank = this.m_Doc_TLANNRank;
        // 34: uint32 m_KeepInPlaceEnum
        that.m_KeepInPlaceEnum = this.m_KeepInPlaceEnum;
        // 35: uint16 m_FinalRankRound
        that.m_FinalRankRound = this.m_FinalRankRound;
        // 50: vector<double> m_TLARerankScores
        if (this.m_TLARerankScores != null)
        {
            if (that.m_TLARerankScores == null)
            {
                that.m_TLARerankScores = new List<Double>();
            }
            else
            {
                that.m_TLARerankScores.Clear();
            }
            foreach (var iter1 in this.m_TLARerankScores)
            {
                Double tmpItem2 = default(Double);
                tmpItem2 = iter1;
                that.m_TLARerankScores.Add(tmpItem2);
            }
        }
        else
        {
            that.m_TLARerankScores = null;
        }
        // 51: uint32 m_FcsDedupStatus
        that.m_FcsDedupStatus = this.m_FcsDedupStatus;
        // 52: uint32 m_Doc_NewsClusterID
        that.m_Doc_NewsClusterID = this.m_Doc_NewsClusterID;
        // 60: float m_Doc_FinalRank
        that.m_Doc_FinalRank = this.m_Doc_FinalRank;
        // 61: double m_Doc_FinalDoubleRank
        that.m_Doc_FinalDoubleRank = this.m_Doc_FinalDoubleRank;
        // 70: uint32 m_MediaClusterId
        that.m_MediaClusterId = this.m_MediaClusterId;
        // 72: uint8 m_Doc_MediaRealtime
        that.m_Doc_MediaRealtime = this.m_Doc_MediaRealtime;
        // 73: string m_MediaAggregatedText
        that.m_MediaAggregatedText = this.m_MediaAggregatedText;
        // 90: vector<uint16> m_Doc_ShinglePrint
        if (this.m_Doc_ShinglePrint != null)
        {
            if (that.m_Doc_ShinglePrint == null)
            {
                that.m_Doc_ShinglePrint = new List<UInt16>();
            }
            else
            {
                that.m_Doc_ShinglePrint.Clear();
            }
            foreach (var iter3 in this.m_Doc_ShinglePrint)
            {
                UInt16 tmpItem4 = default(UInt16);
                tmpItem4 = iter3;
                that.m_Doc_ShinglePrint.Add(tmpItem4);
            }
        }
        else
        {
            that.m_Doc_ShinglePrint = null;
        }
        // 91: nullable<uint32> m_Doc_Crc32
        that.m_Doc_Crc32 = this.m_Doc_Crc32;
        // 92: nullable<uint8> m_Doc_WordBreakerVersion
        that.m_Doc_WordBreakerVersion = this.m_Doc_WordBreakerVersion;
        // 93: uint32 m_Doc_HostID
        that.m_Doc_HostID = this.m_Doc_HostID;
        // 94: uint32 m_Doc_Title_Hash
        that.m_Doc_Title_Hash = this.m_Doc_Title_Hash;
        // 95: map<uint8, uint32> m_Doc_FirstMarker
        if (this.m_Doc_FirstMarker != null)
        {
            if (that.m_Doc_FirstMarker == null)
            {
                that.m_Doc_FirstMarker = new Dictionary<Byte, UInt32>();
            }
            else
            {
                that.m_Doc_FirstMarker.Clear();
            }
            foreach (var keyValPair5 in this.m_Doc_FirstMarker)
            {
                Byte key6 = default(Byte);
                UInt32 val7 = default(UInt32);
                key6 = keyValPair5.Key;
                val7 = keyValPair5.Value;
                that.m_Doc_FirstMarker[key6] = val7;
            }
        }
        else
        {
            that.m_Doc_FirstMarker = null;
        }
        // 96: map<uint8, uint32> m_Doc_FirstMarkerSecondary
        if (this.m_Doc_FirstMarkerSecondary != null)
        {
            if (that.m_Doc_FirstMarkerSecondary == null)
            {
                that.m_Doc_FirstMarkerSecondary = new Dictionary<Byte, UInt32>();
            }
            else
            {
                that.m_Doc_FirstMarkerSecondary.Clear();
            }
            foreach (var keyValPair8 in this.m_Doc_FirstMarkerSecondary)
            {
                Byte key9 = default(Byte);
                UInt32 val10 = default(UInt32);
                key9 = keyValPair8.Key;
                val10 = keyValPair8.Value;
                that.m_Doc_FirstMarkerSecondary[key9] = val10;
            }
        }
        else
        {
            that.m_Doc_FirstMarkerSecondary = null;
        }
        // 97: map<uint8, float> m_Doc_FirstExtraRanker
        if (this.m_Doc_FirstExtraRanker != null)
        {
            if (that.m_Doc_FirstExtraRanker == null)
            {
                that.m_Doc_FirstExtraRanker = new Dictionary<Byte, Single>();
            }
            else
            {
                that.m_Doc_FirstExtraRanker.Clear();
            }
            foreach (var keyValPair11 in this.m_Doc_FirstExtraRanker)
            {
                Byte key12 = default(Byte);
                Single val13 = default(Single);
                key12 = keyValPair11.Key;
                val13 = keyValPair11.Value;
                that.m_Doc_FirstExtraRanker[key12] = val13;
            }
        }
        else
        {
            that.m_Doc_FirstExtraRanker = null;
        }
        // 98: vector<IndexService.MarkerIndexValue> m_doc_ThirdMarkerFlatArray
        if (this.m_doc_ThirdMarkerFlatArray != null)
        {
            if (that.m_doc_ThirdMarkerFlatArray == null)
            {
                that.m_doc_ThirdMarkerFlatArray = new List<global::IndexService.MarkerIndexValue>();
            }
            else
            {
                that.m_doc_ThirdMarkerFlatArray.Clear();
            }
            foreach (var iter14 in this.m_doc_ThirdMarkerFlatArray)
            {
                global::IndexService.MarkerIndexValue tmpItem15 = default(global::IndexService.MarkerIndexValue);
                tmpItem15 = (iter14 == null ? null : (global::IndexService.MarkerIndexValue)iter14.Clone());
                that.m_doc_ThirdMarkerFlatArray.Add(tmpItem15);
            }
        }
        else
        {
            that.m_doc_ThirdMarkerFlatArray = null;
        }
        // 99: uint8 m_doc_tlaModelFailsOnIFM
        that.m_doc_tlaModelFailsOnIFM = this.m_doc_tlaModelFailsOnIFM;
        // 131: IndexService.RankerExtendedResults m_RankerExtendedResults
        that.m_RankerExtendedResults = (this.m_RankerExtendedResults == null ? null : (global::IndexService.RankerExtendedResults)this.m_RankerExtendedResults.Clone());
        // 201: float m_QueryLatitudeID
        that.m_QueryLatitudeID = this.m_QueryLatitudeID;
        // 202: float m_QueryLongitudeID
        that.m_QueryLongitudeID = this.m_QueryLongitudeID;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_IsShingleClusterRoot = reader.ReadUInt8();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_HostClusterSize = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_ParentDocID = reader.ReadUInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_Definitive = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_AdjustedRank = reader.ReadFloat();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_SuperfreshRank = reader.ReadFloat();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_TLANNRank = reader.ReadFloat();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_KeepInPlaceEnum = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_FinalRankRound = reader.ReadUInt16();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_TLARerankScores(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_FcsDedupStatus = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_NewsClusterID = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_FinalRank = reader.ReadFloat();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_FinalDoubleRank = reader.ReadDouble();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_MediaClusterId = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_MediaRealtime = reader.ReadUInt8();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_MediaAggregatedText = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_Doc_ShinglePrint(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_Doc_Crc32(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_Doc_WordBreakerVersion(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_HostID = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_Doc_Title_Hash = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_Doc_FirstMarker(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_Doc_FirstMarkerSecondary(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_Doc_FirstExtraRanker(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_m_doc_ThirdMarkerFlatArray(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_doc_tlaModelFailsOnIFM = reader.ReadUInt8();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_RankerExtendedResults.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_QueryLatitudeID = reader.ReadFloat();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_QueryLongitudeID = reader.ReadFloat();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_Doc_IsShingleClusterRoot:  // id=20
                    this.m_Doc_IsShingleClusterRoot = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, type);
                    break;
                case __ordinals.m_Doc_HostClusterSize:  // id=21
                    this.m_Doc_HostClusterSize = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_Doc_ParentDocID:  // id=22
                    this.m_Doc_ParentDocID = global::Microsoft.Bond.ReadHelper.ReadUInt64(reader, type);
                    break;
                case __ordinals.m_Doc_Definitive:  // id=30
                    this.m_Doc_Definitive = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_Doc_AdjustedRank:  // id=31
                    this.m_Doc_AdjustedRank = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    break;
                case __ordinals.m_Doc_SuperfreshRank:  // id=32
                    this.m_Doc_SuperfreshRank = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    break;
                case __ordinals.m_Doc_TLANNRank:  // id=33
                    this.m_Doc_TLANNRank = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    break;
                case __ordinals.m_KeepInPlaceEnum:  // id=34
                    this.m_KeepInPlaceEnum = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_FinalRankRound:  // id=35
                    this.m_FinalRankRound = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, type);
                    break;
                case __ordinals.m_TLARerankScores:  // id=50
                    this.ReadField_impl_m_TLARerankScores(reader, type);
                    break;
                case __ordinals.m_FcsDedupStatus:  // id=51
                    this.m_FcsDedupStatus = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_Doc_NewsClusterID:  // id=52
                    this.m_Doc_NewsClusterID = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_Doc_FinalRank:  // id=60
                    this.m_Doc_FinalRank = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    break;
                case __ordinals.m_Doc_FinalDoubleRank:  // id=61
                    this.m_Doc_FinalDoubleRank = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, type);
                    break;
                case __ordinals.m_MediaClusterId:  // id=70
                    this.m_MediaClusterId = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_Doc_MediaRealtime:  // id=72
                    this.m_Doc_MediaRealtime = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, type);
                    break;
                case __ordinals.m_MediaAggregatedText:  // id=73
                    this.m_MediaAggregatedText = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.m_Doc_ShinglePrint:  // id=90
                    this.ReadField_impl_m_Doc_ShinglePrint(reader, type);
                    break;
                case __ordinals.m_Doc_Crc32:  // id=91
                    this.ReadField_impl_m_Doc_Crc32(reader, type);
                    break;
                case __ordinals.m_Doc_WordBreakerVersion:  // id=92
                    this.ReadField_impl_m_Doc_WordBreakerVersion(reader, type);
                    break;
                case __ordinals.m_Doc_HostID:  // id=93
                    this.m_Doc_HostID = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_Doc_Title_Hash:  // id=94
                    this.m_Doc_Title_Hash = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.m_Doc_FirstMarker:  // id=95
                    this.ReadField_impl_m_Doc_FirstMarker(reader, type);
                    break;
                case __ordinals.m_Doc_FirstMarkerSecondary:  // id=96
                    this.ReadField_impl_m_Doc_FirstMarkerSecondary(reader, type);
                    break;
                case __ordinals.m_Doc_FirstExtraRanker:  // id=97
                    this.ReadField_impl_m_Doc_FirstExtraRanker(reader, type);
                    break;
                case __ordinals.m_doc_ThirdMarkerFlatArray:  // id=98
                    this.ReadField_impl_m_doc_ThirdMarkerFlatArray(reader, type);
                    break;
                case __ordinals.m_doc_tlaModelFailsOnIFM:  // id=99
                    this.m_doc_tlaModelFailsOnIFM = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, type);
                    break;
                case __ordinals.m_RankerExtendedResults:  // id=131
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.m_RankerExtendedResults.Read(reader);
                    break;
                case __ordinals.m_QueryLatitudeID:  // id=201
                    this.m_QueryLatitudeID = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    break;
                case __ordinals.m_QueryLongitudeID:  // id=202
                    this.m_QueryLongitudeID = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_m_TLARerankScores(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_m_TLARerankScores.Capacity < count2)
        {
            this.m_m_TLARerankScores.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            Double element3 = default(Double);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, elemType1);
            this.m_m_TLARerankScores.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_TLARerankScores


    private void ReadField_impl_m_Doc_ShinglePrint(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_m_Doc_ShinglePrint.Capacity < count2)
        {
            this.m_m_Doc_ShinglePrint.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            UInt16 element3 = default(UInt16);
             
            element3 = global::Microsoft.Bond.ReadHelper.ReadUInt16(reader, elemType1);
            this.m_m_Doc_ShinglePrint.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_Doc_ShinglePrint


    private void ReadField_impl_m_Doc_Crc32(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_m_Doc_Crc32 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_Doc_Crc32


    private void ReadField_impl_m_Doc_WordBreakerVersion(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
    
        if (size1 == 1)
        {
             
            this.m_m_Doc_WordBreakerVersion = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_Doc_WordBreakerVersion


    private void ReadField_impl_m_Doc_FirstMarker(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            Byte key5 = default(Byte);
            UInt32 val6 = default(UInt32);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, valueType2);
            //
            this.m_m_Doc_FirstMarker[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_Doc_FirstMarker


    private void ReadField_impl_m_Doc_FirstMarkerSecondary(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            Byte key5 = default(Byte);
            UInt32 val6 = default(UInt32);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, valueType2);
            //
            this.m_m_Doc_FirstMarkerSecondary[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_Doc_FirstMarkerSecondary


    private void ReadField_impl_m_Doc_FirstExtraRanker(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            Byte key5 = default(Byte);
            Single val6 = default(Single);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadUInt8(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, valueType2);
            //
            this.m_m_Doc_FirstExtraRanker[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_Doc_FirstExtraRanker


    private void ReadField_impl_m_doc_ThirdMarkerFlatArray(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_m_doc_ThirdMarkerFlatArray.Capacity < count2)
        {
            this.m_m_doc_ThirdMarkerFlatArray.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::IndexService.MarkerIndexValue element3 = new global::IndexService.MarkerIndexValue();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_m_doc_ThirdMarkerFlatArray.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_m_doc_ThirdMarkerFlatArray


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DocResponseInfo))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.m_Doc_IsShingleClusterRoot_meta.default_value.Equals(m_m_Doc_IsShingleClusterRoot)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.m_Doc_IsShingleClusterRoot, Schema.m_Doc_IsShingleClusterRoot_meta);
                writer.WriteUInt8(m_m_Doc_IsShingleClusterRoot);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.m_Doc_IsShingleClusterRoot, Schema.m_Doc_IsShingleClusterRoot_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_HostClusterSize_meta.default_value.Equals(m_m_Doc_HostClusterSize)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_HostClusterSize, Schema.m_Doc_HostClusterSize_meta);
                writer.WriteUInt32(m_m_Doc_HostClusterSize);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_HostClusterSize, Schema.m_Doc_HostClusterSize_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_ParentDocID_meta.default_value.Equals(m_m_Doc_ParentDocID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_Doc_ParentDocID, Schema.m_Doc_ParentDocID_meta);
                writer.WriteUInt64(m_m_Doc_ParentDocID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT64, __ordinals.m_Doc_ParentDocID, Schema.m_Doc_ParentDocID_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_Definitive_meta.default_value.Equals(m_m_Doc_Definitive)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_Definitive, Schema.m_Doc_Definitive_meta);
                writer.WriteUInt32(m_m_Doc_Definitive);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_Definitive, Schema.m_Doc_Definitive_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_AdjustedRank_meta.default_value.Equals(m_m_Doc_AdjustedRank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_AdjustedRank, Schema.m_Doc_AdjustedRank_meta);
                writer.WriteFloat(m_m_Doc_AdjustedRank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_AdjustedRank, Schema.m_Doc_AdjustedRank_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_SuperfreshRank_meta.default_value.Equals(m_m_Doc_SuperfreshRank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_SuperfreshRank, Schema.m_Doc_SuperfreshRank_meta);
                writer.WriteFloat(m_m_Doc_SuperfreshRank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_SuperfreshRank, Schema.m_Doc_SuperfreshRank_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_TLANNRank_meta.default_value.Equals(m_m_Doc_TLANNRank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_TLANNRank, Schema.m_Doc_TLANNRank_meta);
                writer.WriteFloat(m_m_Doc_TLANNRank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_TLANNRank, Schema.m_Doc_TLANNRank_meta);
        }

        if (writeAllFields || (!Schema.m_KeepInPlaceEnum_meta.default_value.Equals(m_m_KeepInPlaceEnum)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_KeepInPlaceEnum, Schema.m_KeepInPlaceEnum_meta);
                writer.WriteUInt32(m_m_KeepInPlaceEnum);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_KeepInPlaceEnum, Schema.m_KeepInPlaceEnum_meta);
        }

        if (writeAllFields || (!Schema.m_FinalRankRound_meta.default_value.Equals(m_m_FinalRankRound)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT16, __ordinals.m_FinalRankRound, Schema.m_FinalRankRound_meta);
                writer.WriteUInt16(m_m_FinalRankRound);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT16, __ordinals.m_FinalRankRound, Schema.m_FinalRankRound_meta);
        }

        UInt32 count1 = ((UInt32)m_m_TLARerankScores.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_TLARerankScores, Schema.m_TLARerankScores_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_DOUBLE);
            for (int idx2 = 0; idx2 < count1; idx2++)
            {
                    writer.WriteDouble(m_m_TLARerankScores[idx2]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_TLARerankScores, Schema.m_TLARerankScores_meta);
        }

        if (writeAllFields || (!Schema.m_FcsDedupStatus_meta.default_value.Equals(m_m_FcsDedupStatus)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_FcsDedupStatus, Schema.m_FcsDedupStatus_meta);
                writer.WriteUInt32(m_m_FcsDedupStatus);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_FcsDedupStatus, Schema.m_FcsDedupStatus_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_NewsClusterID_meta.default_value.Equals(m_m_Doc_NewsClusterID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_NewsClusterID, Schema.m_Doc_NewsClusterID_meta);
                writer.WriteUInt32(m_m_Doc_NewsClusterID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_NewsClusterID, Schema.m_Doc_NewsClusterID_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_FinalRank_meta.default_value.Equals(m_m_Doc_FinalRank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_FinalRank, Schema.m_Doc_FinalRank_meta);
                writer.WriteFloat(m_m_Doc_FinalRank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_Doc_FinalRank, Schema.m_Doc_FinalRank_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_FinalDoubleRank_meta.default_value.Equals(m_m_Doc_FinalDoubleRank)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.m_Doc_FinalDoubleRank, Schema.m_Doc_FinalDoubleRank_meta);
                writer.WriteDouble(m_m_Doc_FinalDoubleRank);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.m_Doc_FinalDoubleRank, Schema.m_Doc_FinalDoubleRank_meta);
        }

        if (writeAllFields || (!Schema.m_MediaClusterId_meta.default_value.Equals(m_m_MediaClusterId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_MediaClusterId, Schema.m_MediaClusterId_meta);
                writer.WriteUInt32(m_m_MediaClusterId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_MediaClusterId, Schema.m_MediaClusterId_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_MediaRealtime_meta.default_value.Equals(m_m_Doc_MediaRealtime)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.m_Doc_MediaRealtime, Schema.m_Doc_MediaRealtime_meta);
                writer.WriteUInt8(m_m_Doc_MediaRealtime);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.m_Doc_MediaRealtime, Schema.m_Doc_MediaRealtime_meta);
        }

        if (writeAllFields || (!Schema.m_MediaAggregatedText_meta.default_value.Equals(m_m_MediaAggregatedText)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_MediaAggregatedText, Schema.m_MediaAggregatedText_meta);
                writer.WriteString(m_m_MediaAggregatedText);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_MediaAggregatedText, Schema.m_MediaAggregatedText_meta);
        }

        UInt32 count3 = ((UInt32)m_m_Doc_ShinglePrint.Count);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_Doc_ShinglePrint, Schema.m_Doc_ShinglePrint_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_UINT16);
            for (int idx4 = 0; idx4 < count3; idx4++)
            {
                    writer.WriteUInt16(m_m_Doc_ShinglePrint[idx4]);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_Doc_ShinglePrint, Schema.m_Doc_ShinglePrint_meta);
        }

        UInt32 count5 = (UInt32)((m_m_Doc_Crc32 != null) ? 1 : 0);
        if (writeAllFields || count5 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_Doc_Crc32, Schema.m_Doc_Crc32_meta);
                writer.WriteContainerBegin(count5, global::Microsoft.Bond.BondDataType.BT_UINT32);
                if (count5 != 0)
                {
                        writer.WriteUInt32(m_m_Doc_Crc32.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_Doc_Crc32, Schema.m_Doc_Crc32_meta);
        }

        UInt32 count6 = (UInt32)((m_m_Doc_WordBreakerVersion != null) ? 1 : 0);
        if (writeAllFields || count6 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_Doc_WordBreakerVersion, Schema.m_Doc_WordBreakerVersion_meta);
                writer.WriteContainerBegin(count6, global::Microsoft.Bond.BondDataType.BT_UINT8);
                if (count6 != 0)
                {
                        writer.WriteUInt8(m_m_Doc_WordBreakerVersion.Value);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_Doc_WordBreakerVersion, Schema.m_Doc_WordBreakerVersion_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_HostID_meta.default_value.Equals(m_m_Doc_HostID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_HostID, Schema.m_Doc_HostID_meta);
                writer.WriteUInt32(m_m_Doc_HostID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_HostID, Schema.m_Doc_HostID_meta);
        }

        if (writeAllFields || (!Schema.m_Doc_Title_Hash_meta.default_value.Equals(m_m_Doc_Title_Hash)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_Title_Hash, Schema.m_Doc_Title_Hash_meta);
                writer.WriteUInt32(m_m_Doc_Title_Hash);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.m_Doc_Title_Hash, Schema.m_Doc_Title_Hash_meta);
        }

        UInt32 count7 = ((UInt32)m_m_Doc_FirstMarker.Count);
        if (writeAllFields || count7 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.m_Doc_FirstMarker, Schema.m_Doc_FirstMarker_meta);
                writer.WriteContainerBegin(count7, global::Microsoft.Bond.BondDataType.BT_UINT8, global::Microsoft.Bond.BondDataType.BT_UINT32);
            foreach (var iter8 in m_m_Doc_FirstMarker)
            {
                // Key
                    writer.WriteUInt8(iter8.Key);
                // Value
                    writer.WriteUInt32(iter8.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.m_Doc_FirstMarker, Schema.m_Doc_FirstMarker_meta);
        }

        UInt32 count9 = ((UInt32)m_m_Doc_FirstMarkerSecondary.Count);
        if (writeAllFields || count9 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.m_Doc_FirstMarkerSecondary, Schema.m_Doc_FirstMarkerSecondary_meta);
                writer.WriteContainerBegin(count9, global::Microsoft.Bond.BondDataType.BT_UINT8, global::Microsoft.Bond.BondDataType.BT_UINT32);
            foreach (var iter10 in m_m_Doc_FirstMarkerSecondary)
            {
                // Key
                    writer.WriteUInt8(iter10.Key);
                // Value
                    writer.WriteUInt32(iter10.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.m_Doc_FirstMarkerSecondary, Schema.m_Doc_FirstMarkerSecondary_meta);
        }

        UInt32 count11 = ((UInt32)m_m_Doc_FirstExtraRanker.Count);
        if (writeAllFields || count11 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.m_Doc_FirstExtraRanker, Schema.m_Doc_FirstExtraRanker_meta);
                writer.WriteContainerBegin(count11, global::Microsoft.Bond.BondDataType.BT_UINT8, global::Microsoft.Bond.BondDataType.BT_FLOAT);
            foreach (var iter12 in m_m_Doc_FirstExtraRanker)
            {
                // Key
                    writer.WriteUInt8(iter12.Key);
                // Value
                    writer.WriteFloat(iter12.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.m_Doc_FirstExtraRanker, Schema.m_Doc_FirstExtraRanker_meta);
        }

        UInt32 count13 = ((UInt32)m_m_doc_ThirdMarkerFlatArray.Count);
        if (writeAllFields || count13 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_doc_ThirdMarkerFlatArray, Schema.m_doc_ThirdMarkerFlatArray_meta);
                writer.WriteContainerBegin(count13, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx14 = 0; idx14 < count13; idx14++)
            {
                    m_m_doc_ThirdMarkerFlatArray[idx14].Write(writer, true);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_doc_ThirdMarkerFlatArray, Schema.m_doc_ThirdMarkerFlatArray_meta);
        }

        if (writeAllFields || (!Schema.m_doc_tlaModelFailsOnIFM_meta.default_value.Equals(m_m_doc_tlaModelFailsOnIFM)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.m_doc_tlaModelFailsOnIFM, Schema.m_doc_tlaModelFailsOnIFM_meta);
                writer.WriteUInt8(m_m_doc_tlaModelFailsOnIFM);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT8, __ordinals.m_doc_tlaModelFailsOnIFM, Schema.m_doc_tlaModelFailsOnIFM_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.m_RankerExtendedResults, Schema.m_RankerExtendedResults_meta);
            m_m_RankerExtendedResults.Write(writer, true);
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.m_QueryLatitudeID_meta.default_value.Equals(m_m_QueryLatitudeID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_QueryLatitudeID, Schema.m_QueryLatitudeID_meta);
                writer.WriteFloat(m_m_QueryLatitudeID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_QueryLatitudeID, Schema.m_QueryLatitudeID_meta);
        }

        if (writeAllFields || (!Schema.m_QueryLongitudeID_meta.default_value.Equals(m_m_QueryLongitudeID)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_QueryLongitudeID, Schema.m_QueryLongitudeID_meta);
                writer.WriteFloat(m_m_QueryLongitudeID);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.m_QueryLongitudeID, Schema.m_QueryLongitudeID_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="m_Doc_IsShingleClusterRoot";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 21;
        field.metadata.name="m_Doc_HostClusterSize";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 22;
        field.metadata.name="m_Doc_ParentDocID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="m_Doc_Definitive";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 31;
        field.metadata.name="m_Doc_AdjustedRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 32;
        field.metadata.name="m_Doc_SuperfreshRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 33;
        field.metadata.name="m_Doc_TLANNRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 34;
        field.metadata.name="m_KeepInPlaceEnum";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 35;
        field.metadata.name="m_FinalRankRound";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 50;
        field.metadata.name="m_TLARerankScores";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 51;
        field.metadata.name="m_FcsDedupStatus";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 52;
        field.metadata.name="m_Doc_NewsClusterID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 60;
        field.metadata.name="m_Doc_FinalRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 61;
        field.metadata.name="m_Doc_FinalDoubleRank";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 70;
        field.metadata.name="m_MediaClusterId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 72;
        field.metadata.name="m_Doc_MediaRealtime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 73;
        field.metadata.name="m_MediaAggregatedText";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 90;
        field.metadata.name="m_Doc_ShinglePrint";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT16;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 91;
        field.metadata.name="m_Doc_Crc32";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 92;
        field.metadata.name="m_Doc_WordBreakerVersion";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 93;
        field.metadata.name="m_Doc_HostID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 94;
        field.metadata.name="m_Doc_Title_Hash";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 95;
        field.metadata.name="m_Doc_FirstMarker";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_UINT8;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 96;
        field.metadata.name="m_Doc_FirstMarkerSecondary";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_UINT8;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 97;
        field.metadata.name="m_Doc_FirstExtraRanker";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_UINT8;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 98;
        field.metadata.name="m_doc_ThirdMarkerFlatArray";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::IndexService.MarkerIndexValue.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 99;
        field.metadata.name="m_doc_tlaModelFailsOnIFM";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 131;
        field.metadata.name="m_RankerExtendedResults";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::IndexService.RankerExtendedResults.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 201;
        field.metadata.name="m_QueryLatitudeID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 202;
        field.metadata.name="m_QueryLongitudeID";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DocResponseInfo that = obj as DocResponseInfo;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DocResponseInfo other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DocResponseInfo that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_Doc_IsShingleClusterRoot == that.m_Doc_IsShingleClusterRoot));
        equals = equals && ((this.m_Doc_HostClusterSize == that.m_Doc_HostClusterSize));
        equals = equals && ((this.m_Doc_ParentDocID == that.m_Doc_ParentDocID));
        equals = equals && ((this.m_Doc_Definitive == that.m_Doc_Definitive));
        equals = equals && ((Single.IsNaN(this.m_Doc_AdjustedRank) ? Single.IsNaN(that.m_Doc_AdjustedRank) : (this.m_Doc_AdjustedRank == that.m_Doc_AdjustedRank)));
        equals = equals && ((Single.IsNaN(this.m_Doc_SuperfreshRank) ? Single.IsNaN(that.m_Doc_SuperfreshRank) : (this.m_Doc_SuperfreshRank == that.m_Doc_SuperfreshRank)));
        equals = equals && ((Single.IsNaN(this.m_Doc_TLANNRank) ? Single.IsNaN(that.m_Doc_TLANNRank) : (this.m_Doc_TLANNRank == that.m_Doc_TLANNRank)));
        equals = equals && ((this.m_KeepInPlaceEnum == that.m_KeepInPlaceEnum));
        equals = equals && ((this.m_FinalRankRound == that.m_FinalRankRound));
        equals = equals && ((this.m_TLARerankScores == null) == (that.m_TLARerankScores == null));
        equals = equals && ((this.m_TLARerankScores == null) ? true : (this.m_TLARerankScores.Count == that.m_TLARerankScores.Count));
        equals = equals && ((this.m_FcsDedupStatus == that.m_FcsDedupStatus));
        equals = equals && ((this.m_Doc_NewsClusterID == that.m_Doc_NewsClusterID));
        equals = equals && ((Single.IsNaN(this.m_Doc_FinalRank) ? Single.IsNaN(that.m_Doc_FinalRank) : (this.m_Doc_FinalRank == that.m_Doc_FinalRank)));
        equals = equals && ((Double.IsNaN(this.m_Doc_FinalDoubleRank) ? Double.IsNaN(that.m_Doc_FinalDoubleRank) : (this.m_Doc_FinalDoubleRank == that.m_Doc_FinalDoubleRank)));
        equals = equals && ((this.m_MediaClusterId == that.m_MediaClusterId));
        equals = equals && ((this.m_Doc_MediaRealtime == that.m_Doc_MediaRealtime));
        equals = equals && ((this.m_MediaAggregatedText == null) == (that.m_MediaAggregatedText == null));
        equals = equals && (this.m_MediaAggregatedText == null ? true : (this.m_MediaAggregatedText.Length == that.m_MediaAggregatedText.Length));
        equals = equals && ((this.m_Doc_ShinglePrint == null) == (that.m_Doc_ShinglePrint == null));
        equals = equals && ((this.m_Doc_ShinglePrint == null) ? true : (this.m_Doc_ShinglePrint.Count == that.m_Doc_ShinglePrint.Count));
        equals = equals && ((this.m_Doc_Crc32 == null) == (that.m_Doc_Crc32 == null));
        if (equals && !(this.m_Doc_Crc32 == null))
        {
            equals = equals && ((this.m_Doc_Crc32.Value == that.m_Doc_Crc32.Value));
        }
        equals = equals && ((this.m_Doc_WordBreakerVersion == null) == (that.m_Doc_WordBreakerVersion == null));
        if (equals && !(this.m_Doc_WordBreakerVersion == null))
        {
            equals = equals && ((this.m_Doc_WordBreakerVersion.Value == that.m_Doc_WordBreakerVersion.Value));
        }
        equals = equals && ((this.m_Doc_HostID == that.m_Doc_HostID));
        equals = equals && ((this.m_Doc_Title_Hash == that.m_Doc_Title_Hash));
        equals = equals && ((this.m_Doc_FirstMarker == null) == (that.m_Doc_FirstMarker == null));
        equals = equals && ((this.m_Doc_FirstMarker == null) ? true : (this.m_Doc_FirstMarker.Count == that.m_Doc_FirstMarker.Count));
        equals = equals && ((this.m_Doc_FirstMarkerSecondary == null) == (that.m_Doc_FirstMarkerSecondary == null));
        equals = equals && ((this.m_Doc_FirstMarkerSecondary == null) ? true : (this.m_Doc_FirstMarkerSecondary.Count == that.m_Doc_FirstMarkerSecondary.Count));
        equals = equals && ((this.m_Doc_FirstExtraRanker == null) == (that.m_Doc_FirstExtraRanker == null));
        equals = equals && ((this.m_Doc_FirstExtraRanker == null) ? true : (this.m_Doc_FirstExtraRanker.Count == that.m_Doc_FirstExtraRanker.Count));
        equals = equals && ((this.m_doc_ThirdMarkerFlatArray == null) == (that.m_doc_ThirdMarkerFlatArray == null));
        equals = equals && ((this.m_doc_ThirdMarkerFlatArray == null) ? true : (this.m_doc_ThirdMarkerFlatArray.Count == that.m_doc_ThirdMarkerFlatArray.Count));
        equals = equals && ((this.m_doc_tlaModelFailsOnIFM == that.m_doc_tlaModelFailsOnIFM));
        equals = equals && ((Single.IsNaN(this.m_QueryLatitudeID) ? Single.IsNaN(that.m_QueryLatitudeID) : (this.m_QueryLatitudeID == that.m_QueryLatitudeID)));
        equals = equals && ((Single.IsNaN(this.m_QueryLongitudeID) ? Single.IsNaN(that.m_QueryLongitudeID) : (this.m_QueryLongitudeID == that.m_QueryLongitudeID)));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DocResponseInfo that)
    {
        bool equals = true;
        
        if (equals && this.m_TLARerankScores != null && this.m_TLARerankScores.Count != 0)
        {
            var enum_1_1 = this.m_TLARerankScores.GetEnumerator();
            var enum_2_2 = that.m_TLARerankScores.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((Double.IsNaN(enum_1_1.Current) ? Double.IsNaN(enum_2_2.Current) : (enum_1_1.Current == enum_2_2.Current)));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.m_MediaAggregatedText == null ? true : this.m_MediaAggregatedText == that.m_MediaAggregatedText);
        if (equals && this.m_Doc_ShinglePrint != null && this.m_Doc_ShinglePrint.Count != 0)
        {
            var enum_1_3 = this.m_Doc_ShinglePrint.GetEnumerator();
            var enum_2_4 = that.m_Doc_ShinglePrint.GetEnumerator();
            while (enum_1_3.MoveNext() && enum_2_4.MoveNext())
            {
                    equals = equals && ((enum_1_3.Current == enum_2_4.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.m_Doc_FirstMarker != null && this.m_Doc_FirstMarker.Count != 0)
        {
            foreach (var keyValPair5 in this.m_Doc_FirstMarker)
            {
                UInt32 val6 = default(UInt32);
                equals = equals && that.m_Doc_FirstMarker.TryGetValue(keyValPair5.Key, out val6);
                if (equals)
                {
                        equals = equals && ((val6 == keyValPair5.Value));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.m_Doc_FirstMarkerSecondary != null && this.m_Doc_FirstMarkerSecondary.Count != 0)
        {
            foreach (var keyValPair7 in this.m_Doc_FirstMarkerSecondary)
            {
                UInt32 val8 = default(UInt32);
                equals = equals && that.m_Doc_FirstMarkerSecondary.TryGetValue(keyValPair7.Key, out val8);
                if (equals)
                {
                        equals = equals && ((val8 == keyValPair7.Value));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.m_Doc_FirstExtraRanker != null && this.m_Doc_FirstExtraRanker.Count != 0)
        {
            foreach (var keyValPair9 in this.m_Doc_FirstExtraRanker)
            {
                Single val10 = default(Single);
                equals = equals && that.m_Doc_FirstExtraRanker.TryGetValue(keyValPair9.Key, out val10);
                if (equals)
                {
                        equals = equals && ((Single.IsNaN(val10) ? Single.IsNaN(keyValPair9.Value) : (val10 == keyValPair9.Value)));
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.m_doc_ThirdMarkerFlatArray != null && this.m_doc_ThirdMarkerFlatArray.Count != 0)
        {
            var enum_1_11 = this.m_doc_ThirdMarkerFlatArray.GetEnumerator();
            var enum_2_12 = that.m_doc_ThirdMarkerFlatArray.GetEnumerator();
            while (enum_1_11.MoveNext() && enum_2_12.MoveNext())
            {
                    equals = equals && ((enum_1_11.Current == null) == (enum_2_12.Current == null));
                equals = equals && (enum_1_11.Current == null ? true : enum_1_11.Current.MemberwiseCompare(enum_2_12.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.m_RankerExtendedResults == null ? true : this.m_RankerExtendedResults.MemberwiseCompare(that.m_RankerExtendedResults));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_Doc_IsShingleClusterRoot, this.m_Doc_IsShingleClusterRoot, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_HostClusterSize, this.m_Doc_HostClusterSize, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_ParentDocID, this.m_Doc_ParentDocID, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_Definitive, this.m_Doc_Definitive, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_AdjustedRank, this.m_Doc_AdjustedRank, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_SuperfreshRank, this.m_Doc_SuperfreshRank, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_TLANNRank, this.m_Doc_TLANNRank, separator);
        sb.AppendFormat(format, __internal.s_m_KeepInPlaceEnum, this.m_KeepInPlaceEnum, separator);
        sb.AppendFormat(format, __internal.s_m_FinalRankRound, this.m_FinalRankRound, separator);
        sb.AppendFormat(format, __internal.s_m_TLARerankScores, DumpList(this.m_TLARerankScores), separator);
        sb.AppendFormat(format, __internal.s_m_FcsDedupStatus, this.m_FcsDedupStatus, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_NewsClusterID, this.m_Doc_NewsClusterID, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_FinalRank, this.m_Doc_FinalRank, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_FinalDoubleRank, this.m_Doc_FinalDoubleRank, separator);
        sb.AppendFormat(format, __internal.s_m_MediaClusterId, this.m_MediaClusterId, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_MediaRealtime, this.m_Doc_MediaRealtime, separator);
        sb.AppendFormat(format, __internal.s_m_MediaAggregatedText, this.m_MediaAggregatedText, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_ShinglePrint, DumpList(this.m_Doc_ShinglePrint), separator);
        sb.AppendFormat(format, __internal.s_m_Doc_Crc32, this.m_Doc_Crc32, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_WordBreakerVersion, this.m_Doc_WordBreakerVersion, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_HostID, this.m_Doc_HostID, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_Title_Hash, this.m_Doc_Title_Hash, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_FirstMarker, this.m_Doc_FirstMarker, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_FirstMarkerSecondary, this.m_Doc_FirstMarkerSecondary, separator);
        sb.AppendFormat(format, __internal.s_m_Doc_FirstExtraRanker, this.m_Doc_FirstExtraRanker, separator);
        sb.AppendFormat(format, __internal.s_m_doc_ThirdMarkerFlatArray, DumpList(this.m_doc_ThirdMarkerFlatArray), separator);
        sb.AppendFormat(format, __internal.s_m_doc_tlaModelFailsOnIFM, this.m_doc_tlaModelFailsOnIFM, separator);
        sb.AppendFormat(format, __internal.s_m_RankerExtendedResults, this.m_RankerExtendedResults, separator);
        sb.AppendFormat(format, __internal.s_m_QueryLatitudeID, this.m_QueryLatitudeID, separator);
        sb.AppendFormat(format, __internal.s_m_QueryLongitudeID, this.m_QueryLongitudeID, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class DocResponseInfo

/// <summary>
/// DebugInfo
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DebugInfo : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional nullable<IndexService.DocResponseInfo> DocResponseInfo
    private global::IndexService.DocResponseInfo m_DocResponseInfo;

    /// <summary>
    /// DocResponseInfo
    /// </summary>
    public global::IndexService.DocResponseInfo DocResponseInfo
    {
        get { return this.m_DocResponseInfo; }
        set { this.m_DocResponseInfo = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata DocResponseInfo_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DebugInfo");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // DocResponseInfo
            DocResponseInfo_meta.name = "DocResponseInfo";
            DocResponseInfo_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int DocResponseInfo = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_DocResponseInfo = "DocResponseInfo";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DebugInfo()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_DocResponseInfo = default(global::IndexService.DocResponseInfo);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.DebugInfo cloned = new global::IndexService.DebugInfo();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.DebugInfo that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: nullable<IndexService.DocResponseInfo> DocResponseInfo
        that.DocResponseInfo = (this.DocResponseInfo == null ? null : (global::IndexService.DocResponseInfo)this.DocResponseInfo.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DocResponseInfo(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.DocResponseInfo:  // id=10
                    this.ReadField_impl_DocResponseInfo(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_DocResponseInfo(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_DocResponseInfo == null) { this.m_DocResponseInfo = new global::IndexService.DocResponseInfo(); } 
            ReadHelper.ReadStruct(reader, this.m_DocResponseInfo, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DocResponseInfo


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DebugInfo))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        UInt32 count1 = (UInt32)((m_DocResponseInfo != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DocResponseInfo, Schema.DocResponseInfo_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_DocResponseInfo.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DocResponseInfo, Schema.DocResponseInfo_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="DocResponseInfo";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = true;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::IndexService.DocResponseInfo.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DebugInfo that = obj as DebugInfo;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DebugInfo other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DebugInfo that)
    {
        bool equals = true;
        
        equals = equals && ((this.DocResponseInfo == null) == (that.DocResponseInfo == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DebugInfo that)
    {
        bool equals = true;
        
        equals = equals && ((this.DocResponseInfo == null) == (that.DocResponseInfo == null));
        if (equals && !(this.DocResponseInfo == null))
        {
            equals = equals && (this.DocResponseInfo == null ? true : this.DocResponseInfo.MemberwiseCompare(that.DocResponseInfo));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_DocResponseInfo, this.DocResponseInfo, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DebugInfo

/// <summary>
/// Response{TKey, TValue}
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Response<TKey, TValue> : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required IndexService.ResponseCode Code
    private global::IndexService.ResponseCode m_Code;

    // 20: Required TKey Key
    private TKey m_Key;

    // 30: Required TValue Value
    private TValue m_Value;

    // 40: Optional nullable<IndexService.DebugInfo> DebugInfo
    private global::IndexService.DebugInfo m_DebugInfo;

    /// <summary>
    /// Code
    /// </summary>
    public global::IndexService.ResponseCode Code
    {
        get { return this.m_Code; }
        set { this.m_Code = value; }
    }

    /// <summary>
    /// Key
    /// </summary>
    public TKey Key
    {
        get { return this.m_Key; }
        set { this.m_Key = value; }
    }

    /// <summary>
    /// Value
    /// </summary>
    public TValue Value
    {
        get { return this.m_Value; }
        set { this.m_Value = value; }
    }

    /// <summary>
    /// DebugInfo
    /// </summary>
    public global::IndexService.DebugInfo DebugInfo
    {
        get { return this.m_DebugInfo; }
        set { this.m_DebugInfo = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Code_meta = new Metadata();
        public static readonly Metadata Key_meta = new Metadata();
        public static readonly Metadata Value_meta = new Metadata();
        public static readonly Metadata DebugInfo_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Response");
            runtimeName.Append("<");
            runtimeName.Append(GenericHelper.GetIdlTypeName(typeof(TKey)));
            runtimeName.Append(","+GenericHelper.GetIdlTypeName(typeof(TValue)));
            runtimeName.Append(">");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // Code
            Code_meta.name = "Code";
            Code_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            Code_meta.default_value.int_value = Convert.ToInt64(global::IndexService.ResponseCode.UnknownResponseCode);

            // Key
            Key_meta.name = "Key";
            Key_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // Value
            Value_meta.name = "Value";
            Value_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // DebugInfo
            DebugInfo_meta.name = "DebugInfo";
            DebugInfo_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Code = 10;
        public const int Key = 20;
        public const int Value = 30;
        public const int DebugInfo = 40;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Code = "Code";
        public const String s_Key = "Key";
        public const String s_Value = "Value";
        public const String s_DebugInfo = "DebugInfo";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Response()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Code = global::IndexService.ResponseCode.UnknownResponseCode;
        m_Key = GenericHelper.Create<TKey>();
        m_Value = GenericHelper.Create<TValue>();
        m_DebugInfo = default(global::IndexService.DebugInfo);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.Response<TKey, TValue> cloned = new global::IndexService.Response<TKey, TValue>();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.Response<TKey, TValue> that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: IndexService.ResponseCode Code
        that.Code = this.Code;
        // 20: TKey Key
        that.Key = (TKey)global::Microsoft.Bond.GenericHelper.Clone(this.Key);
        // 30: TValue Value
        that.Value = (TValue)global::Microsoft.Bond.GenericHelper.Clone(this.Value);
        // 40: nullable<IndexService.DebugInfo> DebugInfo
        that.DebugInfo = (this.DebugInfo == null ? null : (global::IndexService.DebugInfo)this.DebugInfo.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Code = (global::IndexService.ResponseCode)reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"Code\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Key(reader, global::Microsoft.Bond.GenericHelper.GetBondDataType(typeof(TKey)));
        }
        else
        {
            throw new BondException("Missing required field \"Key\", id=20");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_Value(reader, global::Microsoft.Bond.GenericHelper.GetBondDataType(typeof(TValue)));
        }
        else
        {
            throw new BondException("Missing required field \"Value\", id=30");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_DebugInfo(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(31);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Code:  // id=10
                    this.Code = (global::IndexService.ResponseCode)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.Code, true);
                    break;
                case __ordinals.Key:  // id=20
                    this.ReadField_impl_Key(reader, type);
                    seenRequiredFields.Set(__ordinals.Key, true);
                    break;
                case __ordinals.Value:  // id=30
                    this.ReadField_impl_Value(reader, type);
                    seenRequiredFields.Set(__ordinals.Value, true);
                    break;
                case __ordinals.DebugInfo:  // id=40
                    this.ReadField_impl_DebugInfo(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_Key(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
 
        global::Microsoft.Bond.GenericHelper.Read<TKey>(ref this.m_Key, reader, typeInPayload);
    } // ReadField_impl_Key


    private void ReadField_impl_Value(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
 
        global::Microsoft.Bond.GenericHelper.Read<TValue>(ref this.m_Value, reader, typeInPayload);
    } // ReadField_impl_Value


    private void ReadField_impl_DebugInfo(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_DebugInfo == null) { this.m_DebugInfo = new global::IndexService.DebugInfo(); } 
            ReadHelper.ReadStruct(reader, this.m_DebugInfo, elemType2);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_DebugInfo


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.Code))
        {
            ok = false;
            missingFieldName = "Code";
            missingFieldId = __ordinals.Code;
        }
        if (ok && !seenFields.Get(__ordinals.Key))
        {
            ok = false;
            missingFieldName = "Key";
            missingFieldId = __ordinals.Key;
        }
        if (ok && !seenFields.Get(__ordinals.Value))
        {
            ok = false;
            missingFieldName = "Value";
            missingFieldId = __ordinals.Value;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Response<TKey, TValue>))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.Code, Schema.Code_meta);
            writer.WriteInt32((Int32)m_Code);
        writer.WriteFieldEnd();
                GenericHelper.WriteField(writer, __ordinals.Key, Schema.Key_meta, m_Key, typeof(TKey));
                GenericHelper.WriteField(writer, __ordinals.Value, Schema.Value_meta, m_Value, typeof(TValue));
        UInt32 count1 = (UInt32)((m_DebugInfo != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DebugInfo, Schema.DebugInfo_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_DebugInfo.Write(writer, true);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.DebugInfo, Schema.DebugInfo_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="Code";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::IndexService.ResponseCode.UnknownResponseCode);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="Key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = GenericHelper.CreateTypeDef(schema, typeof (TKey));

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="Value";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = GenericHelper.CreateTypeDef(schema, typeof (TValue));

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 40;
        field.metadata.name="DebugInfo";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = true;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::IndexService.DebugInfo.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Response<TKey, TValue> that = obj as Response<TKey, TValue>;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Response<TKey, TValue> other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Response<TKey, TValue> that)
    {
        bool equals = true;
        
        equals = equals && ((this.Code == that.Code));
        equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(this.Key, that.Key));
        equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(this.Value, that.Value));
        equals = equals && ((this.DebugInfo == null) == (that.DebugInfo == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Response<TKey, TValue> that)
    {
        bool equals = true;
        
        equals = equals && ((this.DebugInfo == null) == (that.DebugInfo == null));
        if (equals && !(this.DebugInfo == null))
        {
            equals = equals && (this.DebugInfo == null ? true : this.DebugInfo.MemberwiseCompare(that.DebugInfo));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Code, this.Code, separator);
        sb.AppendFormat(format, __internal.s_Key, this.Key, separator);
        sb.AppendFormat(format, __internal.s_Value, this.Value, separator);
        sb.AppendFormat(format, __internal.s_DebugInfo, this.DebugInfo, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Response<TKey, TValue>

/// <summary>
/// Request
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Request : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional string TLAQuery
    private String m_TLAQuery;

    // 11: Optional uint32 TLATimeoutMS
    private UInt32 m_TLATimeoutMS;

    // 12: Optional map<string, string> TLAUserSubQueries
    private Dictionary<String, String> m_TLAUserSubQueries;

    // 20: Optional uint32 ResultCount
    private UInt32 m_ResultCount;

    // 21: Optional uint32 ResultBase
    private UInt32 m_ResultBase;

    // 30: Optional string TraceId
    private String m_TraceId;

    // 40: Optional bool IsDebug
    private Boolean m_IsDebug;

    /// <summary>
    /// TLAQuery
    /// </summary>
    public String TLAQuery
    {
        get { return this.m_TLAQuery; }
        set { this.m_TLAQuery = value; }
    }

    /// <summary>
    /// TLATimeoutMS
    /// </summary>
    public UInt32 TLATimeoutMS
    {
        get { return this.m_TLATimeoutMS; }
        set { this.m_TLATimeoutMS = value; }
    }

    /// <summary>
    /// TLAUserSubQueries
    /// </summary>
    public Dictionary<String, String> TLAUserSubQueries
    {
        get { return this.m_TLAUserSubQueries; }
        set { this.m_TLAUserSubQueries = value; }
    }

    /// <summary>
    /// ResultCount
    /// </summary>
    public UInt32 ResultCount
    {
        get { return this.m_ResultCount; }
        set { this.m_ResultCount = value; }
    }

    /// <summary>
    /// ResultBase
    /// </summary>
    public UInt32 ResultBase
    {
        get { return this.m_ResultBase; }
        set { this.m_ResultBase = value; }
    }

    /// <summary>
    /// TraceId
    /// </summary>
    public String TraceId
    {
        get { return this.m_TraceId; }
        set { this.m_TraceId = value; }
    }

    /// <summary>
    /// IsDebug
    /// </summary>
    public Boolean IsDebug
    {
        get { return this.m_IsDebug; }
        set { this.m_IsDebug = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata TLAQuery_meta = new Metadata();
        public static readonly Metadata TLATimeoutMS_meta = new Metadata();
        public static readonly Metadata TLAUserSubQueries_meta = new Metadata();
        public static readonly Metadata ResultCount_meta = new Metadata();
        public static readonly Metadata ResultBase_meta = new Metadata();
        public static readonly Metadata TraceId_meta = new Metadata();
        public static readonly Metadata IsDebug_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("Request");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // TLAQuery
            TLAQuery_meta.name = "TLAQuery";
            TLAQuery_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // TLATimeoutMS
            TLATimeoutMS_meta.name = "TLATimeoutMS";
            TLATimeoutMS_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            TLATimeoutMS_meta.default_value.uint_value = 0;

            // TLAUserSubQueries
            TLAUserSubQueries_meta.name = "TLAUserSubQueries";
            TLAUserSubQueries_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // ResultCount
            ResultCount_meta.name = "ResultCount";
            ResultCount_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            ResultCount_meta.default_value.uint_value = 0;

            // ResultBase
            ResultBase_meta.name = "ResultBase";
            ResultBase_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            ResultBase_meta.default_value.uint_value = 0;

            // TraceId
            TraceId_meta.name = "TraceId";
            TraceId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // IsDebug
            IsDebug_meta.name = "IsDebug";
            IsDebug_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            IsDebug_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int TLAQuery = 10;
        public const int TLATimeoutMS = 11;
        public const int TLAUserSubQueries = 12;
        public const int ResultCount = 20;
        public const int ResultBase = 21;
        public const int TraceId = 30;
        public const int IsDebug = 40;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_TLAQuery = "TLAQuery";
        public const String s_TLATimeoutMS = "TLATimeoutMS";
        public const String s_TLAUserSubQueries = "TLAUserSubQueries";
        public const String s_ResultCount = "ResultCount";
        public const String s_ResultBase = "ResultBase";
        public const String s_TraceId = "TraceId";
        public const String s_IsDebug = "IsDebug";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public Request()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_TLAQuery = string.Empty;
        m_TLATimeoutMS = 0;
        if (m_TLAUserSubQueries == null)
        {
            m_TLAUserSubQueries = new Dictionary<String, String>();
        }
        else
        {
            m_TLAUserSubQueries.Clear();
        }
        m_ResultCount = 0;
        m_ResultBase = 0;
        m_TraceId = string.Empty;
        m_IsDebug = false;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.Request cloned = new global::IndexService.Request();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.Request that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string TLAQuery
        that.TLAQuery = this.TLAQuery;
        // 11: uint32 TLATimeoutMS
        that.TLATimeoutMS = this.TLATimeoutMS;
        // 12: map<string, string> TLAUserSubQueries
        if (this.TLAUserSubQueries != null)
        {
            if (that.TLAUserSubQueries == null)
            {
                that.TLAUserSubQueries = new Dictionary<String, String>();
            }
            else
            {
                that.TLAUserSubQueries.Clear();
            }
            foreach (var keyValPair1 in this.TLAUserSubQueries)
            {
                String key2 = default(String);
                String val3 = default(String);
                key2 = keyValPair1.Key;
                val3 = keyValPair1.Value;
                that.TLAUserSubQueries[key2] = val3;
            }
        }
        else
        {
            that.TLAUserSubQueries = null;
        }
        // 20: uint32 ResultCount
        that.ResultCount = this.ResultCount;
        // 21: uint32 ResultBase
        that.ResultBase = this.ResultBase;
        // 30: string TraceId
        that.TraceId = this.TraceId;
        // 40: bool IsDebug
        that.IsDebug = this.IsDebug;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TLAQuery = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TLATimeoutMS = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_TLAUserSubQueries(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ResultCount = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ResultBase = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TraceId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.IsDebug = reader.ReadBool();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.TLAQuery:  // id=10
                    this.TLAQuery = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.TLATimeoutMS:  // id=11
                    this.TLATimeoutMS = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.TLAUserSubQueries:  // id=12
                    this.ReadField_impl_TLAUserSubQueries(reader, type);
                    break;
                case __ordinals.ResultCount:  // id=20
                    this.ResultCount = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.ResultBase:  // id=21
                    this.ResultBase = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.TraceId:  // id=30
                    this.TraceId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.IsDebug:  // id=40
                    this.IsDebug = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_TLAUserSubQueries(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            String val6 = default(String);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, valueType2);
            //
            this.m_TLAUserSubQueries[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_TLAUserSubQueries


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(Request))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.TLAQuery_meta.default_value.Equals(m_TLAQuery)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TLAQuery, Schema.TLAQuery_meta);
                writer.WriteString(m_TLAQuery);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TLAQuery, Schema.TLAQuery_meta);
        }

        if (writeAllFields || (!Schema.TLATimeoutMS_meta.default_value.Equals(m_TLATimeoutMS)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.TLATimeoutMS, Schema.TLATimeoutMS_meta);
                writer.WriteUInt32(m_TLATimeoutMS);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.TLATimeoutMS, Schema.TLATimeoutMS_meta);
        }

        UInt32 count1 = ((UInt32)m_TLAUserSubQueries.Count);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.TLAUserSubQueries, Schema.TLAUserSubQueries_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRING);
            foreach (var iter2 in m_TLAUserSubQueries)
            {
                // Key
                    writer.WriteString(iter2.Key);
                // Value
                    writer.WriteString(iter2.Value);
            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.TLAUserSubQueries, Schema.TLAUserSubQueries_meta);
        }

        if (writeAllFields || (!Schema.ResultCount_meta.default_value.Equals(m_ResultCount)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.ResultCount, Schema.ResultCount_meta);
                writer.WriteUInt32(m_ResultCount);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.ResultCount, Schema.ResultCount_meta);
        }

        if (writeAllFields || (!Schema.ResultBase_meta.default_value.Equals(m_ResultBase)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.ResultBase, Schema.ResultBase_meta);
                writer.WriteUInt32(m_ResultBase);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.ResultBase, Schema.ResultBase_meta);
        }

        if (writeAllFields || (!Schema.TraceId_meta.default_value.Equals(m_TraceId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TraceId, Schema.TraceId_meta);
                writer.WriteString(m_TraceId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.TraceId, Schema.TraceId_meta);
        }

        if (writeAllFields || (!Schema.IsDebug_meta.default_value.Equals(m_IsDebug)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.IsDebug, Schema.IsDebug_meta);
                writer.WriteBool(m_IsDebug);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.IsDebug, Schema.IsDebug_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="TLAQuery";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 11;
        field.metadata.name="TLATimeoutMS";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 12;
        field.metadata.name="TLAUserSubQueries";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="ResultCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 21;
        field.metadata.name="ResultBase";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="TraceId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 40;
        field.metadata.name="IsDebug";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Request that = obj as Request;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(Request other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(Request that)
    {
        bool equals = true;
        
        equals = equals && ((this.TLAQuery == null) == (that.TLAQuery == null));
        equals = equals && (this.TLAQuery == null ? true : (this.TLAQuery.Length == that.TLAQuery.Length));
        equals = equals && ((this.TLATimeoutMS == that.TLATimeoutMS));
        equals = equals && ((this.TLAUserSubQueries == null) == (that.TLAUserSubQueries == null));
        equals = equals && ((this.TLAUserSubQueries == null) ? true : (this.TLAUserSubQueries.Count == that.TLAUserSubQueries.Count));
        equals = equals && ((this.ResultCount == that.ResultCount));
        equals = equals && ((this.ResultBase == that.ResultBase));
        equals = equals && ((this.TraceId == null) == (that.TraceId == null));
        equals = equals && (this.TraceId == null ? true : (this.TraceId.Length == that.TraceId.Length));
        equals = equals && ((this.IsDebug == that.IsDebug));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(Request that)
    {
        bool equals = true;
        
        equals = equals && (this.TLAQuery == null ? true : this.TLAQuery == that.TLAQuery);
        if (equals && this.TLAUserSubQueries != null && this.TLAUserSubQueries.Count != 0)
        {
            foreach (var keyValPair1 in this.TLAUserSubQueries)
            {
                String val2 = default(String);
                equals = equals && that.TLAUserSubQueries.TryGetValue(keyValPair1.Key, out val2);
                if (equals)
                {
                        equals = equals && ((val2 == null) == (keyValPair1.Value == null));
                    equals = equals && (val2 == null ? true : (val2.Length == keyValPair1.Value.Length));
                    equals = equals && (val2 == null ? true : val2 == keyValPair1.Value);
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        equals = equals && (this.TraceId == null ? true : this.TraceId == that.TraceId);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_TLAQuery, this.TLAQuery, separator);
        sb.AppendFormat(format, __internal.s_TLATimeoutMS, this.TLATimeoutMS, separator);
        sb.AppendFormat(format, __internal.s_TLAUserSubQueries, this.TLAUserSubQueries, separator);
        sb.AppendFormat(format, __internal.s_ResultCount, this.ResultCount, separator);
        sb.AppendFormat(format, __internal.s_ResultBase, this.ResultBase, separator);
        sb.AppendFormat(format, __internal.s_TraceId, this.TraceId, separator);
        sb.AppendFormat(format, __internal.s_IsDebug, this.IsDebug, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Request

/// <summary>
/// ResponseBlob
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ResponseBlob : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required blob tlaResponse
    private BondBlob m_tlaResponse;

    /// <summary>
    /// tlaResponse
    /// </summary>
    public BondBlob tlaResponse
    {
        get { return this.m_tlaResponse; }
        set { this.m_tlaResponse = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata tlaResponse_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ResponseBlob");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "IndexService." + meta.name;


            // tlaResponse
            tlaResponse_meta.name = "tlaResponse";
            tlaResponse_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int tlaResponse = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_tlaResponse = "tlaResponse";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ResponseBlob()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_tlaResponse = new BondBlob();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::IndexService.ResponseBlob cloned = new global::IndexService.ResponseBlob();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::IndexService.ResponseBlob that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: blob tlaResponse
        that.tlaResponse = this.tlaResponse.CloneData();
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.tlaResponse = this.tlaResponse.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"tlaResponse\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.tlaResponse:  // id=10
                    this.tlaResponse = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.tlaResponse, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.tlaResponse))
        {
            ok = false;
            missingFieldName = "tlaResponse";
            missingFieldId = __ordinals.tlaResponse;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ResponseBlob))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.tlaResponse, Schema.tlaResponse_meta);
            UInt32 count1 = m_tlaResponse.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_tlaResponse.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="tlaResponse";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ResponseBlob that = obj as ResponseBlob;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ResponseBlob other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ResponseBlob that)
    {
        bool equals = true;
        
        equals = equals && (this.tlaResponse.GetCount() == that.tlaResponse.GetCount());
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ResponseBlob that)
    {
        bool equals = true;
        
        equals = equals && this.tlaResponse.CompareData(that.tlaResponse);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_tlaResponse, this.tlaResponse, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ResponseBlob
} // namespace IndexService
namespace DeepLearning
{

/// <summary>
/// ModelServerRequestCacheKey
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ModelServerRequestCacheKey : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required string m_modelFullName
    private String m_m_modelFullName;

    // 30: Required blob m_requestKeyBlob
    private BondBlob m_m_requestKeyBlob;

    // 100: Required int32 m_cacheType
    private Int32 m_m_cacheType;

    /// <summary>
    /// model full name, that includes model name and version
    /// </summary>
    public String m_modelFullName
    {
        get { return this.m_m_modelFullName; }
        set { this.m_m_modelFullName = value; }
    }

    /// <summary>
    /// Different cache implementation will use different blob as key
    /// </summary>
    public BondBlob m_requestKeyBlob
    {
        get { return this.m_m_requestKeyBlob; }
        set { this.m_m_requestKeyBlob = value; }
    }

    /// <summary>
    /// m_cacheType
    /// </summary>
    public Int32 m_cacheType
    {
        get { return this.m_m_cacheType; }
        set { this.m_m_cacheType = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_modelFullName_meta = new Metadata();
        public static readonly Metadata m_requestKeyBlob_meta = new Metadata();
        public static readonly Metadata m_cacheType_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ModelServerRequestCacheKey");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "DeepLearning." + meta.name;


            // m_modelFullName
            m_modelFullName_meta.name = "m_modelFullName";
            m_modelFullName_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // m_requestKeyBlob
            m_requestKeyBlob_meta.name = "m_requestKeyBlob";
            m_requestKeyBlob_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // m_cacheType
            m_cacheType_meta.name = "m_cacheType";
            m_cacheType_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            m_cacheType_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_modelFullName = 10;
        public const int m_requestKeyBlob = 30;
        public const int m_cacheType = 100;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_modelFullName = "m_modelFullName";
        public const String s_m_requestKeyBlob = "m_requestKeyBlob";
        public const String s_m_cacheType = "m_cacheType";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ModelServerRequestCacheKey()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_modelFullName = string.Empty;
        m_m_requestKeyBlob = new BondBlob();
        m_m_cacheType = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::DeepLearning.ModelServerRequestCacheKey cloned = new global::DeepLearning.ModelServerRequestCacheKey();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::DeepLearning.ModelServerRequestCacheKey that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string m_modelFullName
        that.m_modelFullName = this.m_modelFullName;
        // 30: blob m_requestKeyBlob
        that.m_requestKeyBlob = this.m_requestKeyBlob.CloneData();
        // 100: int32 m_cacheType
        that.m_cacheType = this.m_cacheType;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_modelFullName = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"m_modelFullName\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_requestKeyBlob = this.m_requestKeyBlob.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"m_requestKeyBlob\", id=30");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_cacheType = reader.ReadInt32();
        }
        else
        {
            throw new BondException("Missing required field \"m_cacheType\", id=100");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(101);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_modelFullName:  // id=10
                    this.m_modelFullName = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.m_modelFullName, true);
                    break;
                case __ordinals.m_requestKeyBlob:  // id=30
                    this.m_requestKeyBlob = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.m_requestKeyBlob, true);
                    break;
                case __ordinals.m_cacheType:  // id=100
                    this.m_cacheType = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.m_cacheType, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.m_modelFullName))
        {
            ok = false;
            missingFieldName = "m_modelFullName";
            missingFieldId = __ordinals.m_modelFullName;
        }
        if (ok && !seenFields.Get(__ordinals.m_requestKeyBlob))
        {
            ok = false;
            missingFieldName = "m_requestKeyBlob";
            missingFieldId = __ordinals.m_requestKeyBlob;
        }
        if (ok && !seenFields.Get(__ordinals.m_cacheType))
        {
            ok = false;
            missingFieldName = "m_cacheType";
            missingFieldId = __ordinals.m_cacheType;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ModelServerRequestCacheKey))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.m_modelFullName, Schema.m_modelFullName_meta);
            writer.WriteString(m_m_modelFullName);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_requestKeyBlob, Schema.m_requestKeyBlob_meta);
            UInt32 count1 = m_m_requestKeyBlob.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_m_requestKeyBlob.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.m_cacheType, Schema.m_cacheType_meta);
            writer.WriteInt32(m_m_cacheType);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="m_modelFullName";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="m_requestKeyBlob";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 100;
        field.metadata.name="m_cacheType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ModelServerRequestCacheKey that = obj as ModelServerRequestCacheKey;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ModelServerRequestCacheKey other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ModelServerRequestCacheKey that)
    {
        bool equals = true;
        
        equals = equals && ((this.m_modelFullName == null) == (that.m_modelFullName == null));
        equals = equals && (this.m_modelFullName == null ? true : (this.m_modelFullName.Length == that.m_modelFullName.Length));
        equals = equals && (this.m_requestKeyBlob.GetCount() == that.m_requestKeyBlob.GetCount());
        equals = equals && ((this.m_cacheType == that.m_cacheType));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ModelServerRequestCacheKey that)
    {
        bool equals = true;
        
        equals = equals && (this.m_modelFullName == null ? true : this.m_modelFullName == that.m_modelFullName);
        equals = equals && this.m_requestKeyBlob.CompareData(that.m_requestKeyBlob);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_modelFullName, this.m_modelFullName, separator);
        sb.AppendFormat(format, __internal.s_m_requestKeyBlob, this.m_requestKeyBlob, separator);
        sb.AppendFormat(format, __internal.s_m_cacheType, this.m_cacheType, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ModelServerRequestCacheKey

/// <summary>
/// ModelServerRequestCacheValue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ModelServerRequestCacheValue : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required blob m_blob
    private BondBlob m_m_blob;

    /// <summary>
    /// Different cache implementation will use different blob containing cached response
    /// </summary>
    public BondBlob m_blob
    {
        get { return this.m_m_blob; }
        set { this.m_m_blob = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata m_blob_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ModelServerRequestCacheValue");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "DeepLearning." + meta.name;


            // m_blob
            m_blob_meta.name = "m_blob";
            m_blob_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int m_blob = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_m_blob = "m_blob";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ModelServerRequestCacheValue()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_m_blob = new BondBlob();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::DeepLearning.ModelServerRequestCacheValue cloned = new global::DeepLearning.ModelServerRequestCacheValue();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::DeepLearning.ModelServerRequestCacheValue that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: blob m_blob
        that.m_blob = this.m_blob.CloneData();
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.m_blob = this.m_blob.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"m_blob\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.m_blob:  // id=10
                    this.m_blob = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.m_blob, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.m_blob))
        {
            ok = false;
            missingFieldName = "m_blob";
            missingFieldId = __ordinals.m_blob;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ModelServerRequestCacheValue))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.m_blob, Schema.m_blob_meta);
            UInt32 count1 = m_m_blob.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_m_blob.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="m_blob";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ModelServerRequestCacheValue that = obj as ModelServerRequestCacheValue;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ModelServerRequestCacheValue other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ModelServerRequestCacheValue that)
    {
        bool equals = true;
        
        equals = equals && (this.m_blob.GetCount() == that.m_blob.GetCount());
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ModelServerRequestCacheValue that)
    {
        bool equals = true;
        
        equals = equals && this.m_blob.CompareData(that.m_blob);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_m_blob, this.m_blob, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ModelServerRequestCacheValue
} // namespace DeepLearning
namespace A1
{
namespace Replication
{

/// <summary>
/// These are the key and value schemas of the objectstore recovery tables
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class OSVertexKey : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required string type
    private String m_type;

    // 1: Required blob key
    private BondBlob m_key;

    /// <summary>
    /// type
    /// </summary>
    public String type
    {
        get { return this.m_type; }
        set { this.m_type = value; }
    }

    /// <summary>
    /// key
    /// </summary>
    public BondBlob key
    {
        get { return this.m_key; }
        set { this.m_key = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata type_meta = new Metadata();
        public static readonly Metadata key_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("OSVertexKey");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "A1.Replication." + meta.name;


            // type
            type_meta.name = "type";
            type_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // key
            key_meta.name = "key";
            key_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int type = 0;
        public const int key = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_type = "type";
        public const String s_key = "key";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public OSVertexKey()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_type = string.Empty;
        m_key = new BondBlob();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::A1.Replication.OSVertexKey cloned = new global::A1.Replication.OSVertexKey();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::A1.Replication.OSVertexKey that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: string type
        that.type = this.type;
        // 1: blob key
        that.key = this.key.CloneData();
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.type = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"type\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.key = this.key.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"key\", id=1");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(2);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.type:  // id=0
                    this.type = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.type, true);
                    break;
                case __ordinals.key:  // id=1
                    this.key = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.key, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.type))
        {
            ok = false;
            missingFieldName = "type";
            missingFieldId = __ordinals.type;
        }
        if (ok && !seenFields.Get(__ordinals.key))
        {
            ok = false;
            missingFieldName = "key";
            missingFieldId = __ordinals.key;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(OSVertexKey))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.type, Schema.type_meta);
            writer.WriteString(m_type);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.key, Schema.key_meta);
            UInt32 count1 = m_key.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_key.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="type";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        OSVertexKey that = obj as OSVertexKey;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(OSVertexKey other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(OSVertexKey that)
    {
        bool equals = true;
        
        equals = equals && ((this.type == null) == (that.type == null));
        equals = equals && (this.type == null ? true : (this.type.Length == that.type.Length));
        equals = equals && (this.key.GetCount() == that.key.GetCount());
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(OSVertexKey that)
    {
        bool equals = true;
        
        equals = equals && (this.type == null ? true : this.type == that.type);
        equals = equals && this.key.CompareData(that.key);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_type, this.type, separator);
        sb.AppendFormat(format, __internal.s_key, this.key, separator);
        
        return sb.ToString();
    } // ToString()

}; // class OSVertexKey

/// <summary>
/// OSVertexValue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class OSVertexValue : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Optional bool deleted
    private Boolean m_deleted;

    // 1: Optional string type
    private String m_type;

    // 2: Optional nullable<bonded<Microsoft.Bond.Void>> user_data
    private Bonded<global::Microsoft.Bond.Void> m_user_data;

    /// <summary>
    /// deleted
    /// </summary>
    public Boolean deleted
    {
        get { return this.m_deleted; }
        set { this.m_deleted = value; }
    }

    /// <summary>
    /// type
    /// </summary>
    public String type
    {
        get { return this.m_type; }
        set { this.m_type = value; }
    }

    /// <summary>
    /// same as OSVertexKey.type, required by OSearch
    /// </summary>
    public Bonded<global::Microsoft.Bond.Void> user_data
    {
        get { return this.m_user_data; }
        set { this.m_user_data = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata deleted_meta = new Metadata();
        public static readonly Metadata type_meta = new Metadata();
        public static readonly Metadata user_data_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("OSVertexValue");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "A1.Replication." + meta.name;


            // deleted
            deleted_meta.name = "deleted";
            deleted_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            deleted_meta.default_value.uint_value = 0;

            // type
            type_meta.name = "type";
            type_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            type_meta.attributes["Index.BondedVoidPayloadTypeName"] = "user_data";

            // user_data
            user_data_meta.name = "user_data";
            user_data_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            user_data_meta.attributes["Index.Default"] = "";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int deleted = 0;
        public const int type = 1;
        public const int user_data = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_deleted = "deleted";
        public const String s_type = "type";
        public const String s_user_data = "user_data";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public OSVertexValue()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_deleted = false;
        m_type = string.Empty;
        m_user_data = default(Bonded<global::Microsoft.Bond.Void>);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::A1.Replication.OSVertexValue cloned = new global::A1.Replication.OSVertexValue();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::A1.Replication.OSVertexValue that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: bool deleted
        that.deleted = this.deleted;
        // 1: string type
        that.type = this.type;
        // 2: nullable<bonded<Microsoft.Bond.Void>> user_data
        that.user_data = (this.user_data == null ? null : (Bonded<global::Microsoft.Bond.Void>)this.user_data.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.deleted = reader.ReadBool();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.type = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_user_data(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.deleted:  // id=0
                    this.deleted = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                case __ordinals.type:  // id=1
                    this.type = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.user_data:  // id=2
                    this.ReadField_impl_user_data(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_user_data(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_user_data == null) { this.m_user_data = new Bonded<global::Microsoft.Bond.Void>(); } 
            this.m_user_data.Read(reader);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_user_data


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(OSVertexValue))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.deleted_meta.default_value.Equals(m_deleted)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.deleted, Schema.deleted_meta);
                writer.WriteBool(m_deleted);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.deleted, Schema.deleted_meta);
        }

        if (writeAllFields || (!Schema.type_meta.default_value.Equals(m_type)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.type, Schema.type_meta);
                writer.WriteString(m_type);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.type, Schema.type_meta);
        }

        UInt32 count1 = (UInt32)((m_user_data != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.user_data, Schema.user_data_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_user_data.Write(writer);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.user_data, Schema.user_data_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="deleted";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="type";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.BondedVoidPayloadTypeName"] = "user_data";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="user_data";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.Void.GetTypeDef(schema);
        field.type.element.bonded_type = true;
        field.metadata.attributes["Index.Default"] = "";

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        OSVertexValue that = obj as OSVertexValue;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(OSVertexValue other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(OSVertexValue that)
    {
        bool equals = true;
        
        equals = equals && ((this.deleted == that.deleted));
        equals = equals && ((this.type == null) == (that.type == null));
        equals = equals && (this.type == null ? true : (this.type.Length == that.type.Length));
        equals = equals && ((this.user_data == null) == (that.user_data == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(OSVertexValue that)
    {
        bool equals = true;
        
        equals = equals && (this.type == null ? true : this.type == that.type);
        equals = equals && ((this.user_data == null) == (that.user_data == null));
        if (equals && !(this.user_data == null))
        {
                equals = equals && (this.user_data == null ? true : this.user_data.MemberwiseCompare(that.user_data));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_deleted, this.deleted, separator);
        sb.AppendFormat(format, __internal.s_type, this.type, separator);
        sb.AppendFormat(format, __internal.s_user_data, this.user_data, separator);
        
        return sb.ToString();
    } // ToString()

}; // class OSVertexValue

/// <summary>
/// OSEdgeKey
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class OSEdgeKey : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Required string type
    private String m_type;

    // 1: Required A1.Replication.OSVertexKey src_key
    private global::A1.Replication.OSVertexKey m_src_key;

    // 2: Required A1.Replication.OSVertexKey dest_key
    private global::A1.Replication.OSVertexKey m_dest_key;

    /// <summary>
    /// type
    /// </summary>
    public String type
    {
        get { return this.m_type; }
        set { this.m_type = value; }
    }

    /// <summary>
    /// src_key
    /// </summary>
    public global::A1.Replication.OSVertexKey src_key
    {
        get { return this.m_src_key; }
        set { this.m_src_key = value; }
    }

    /// <summary>
    /// dest_key
    /// </summary>
    public global::A1.Replication.OSVertexKey dest_key
    {
        get { return this.m_dest_key; }
        set { this.m_dest_key = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata type_meta = new Metadata();
        public static readonly Metadata src_key_meta = new Metadata();
        public static readonly Metadata dest_key_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("OSEdgeKey");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "A1.Replication." + meta.name;


            // type
            type_meta.name = "type";
            type_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // src_key
            src_key_meta.name = "src_key";
            src_key_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // dest_key
            dest_key_meta.name = "dest_key";
            dest_key_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int type = 0;
        public const int src_key = 1;
        public const int dest_key = 2;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_type = "type";
        public const String s_src_key = "src_key";
        public const String s_dest_key = "dest_key";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public OSEdgeKey()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_type = string.Empty;
        m_src_key = new global::A1.Replication.OSVertexKey();
        m_dest_key = new global::A1.Replication.OSVertexKey();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::A1.Replication.OSEdgeKey cloned = new global::A1.Replication.OSEdgeKey();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::A1.Replication.OSEdgeKey that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: string type
        that.type = this.type;
        // 1: A1.Replication.OSVertexKey src_key
        that.src_key = (this.src_key == null ? null : (global::A1.Replication.OSVertexKey)this.src_key.Clone());
        // 2: A1.Replication.OSVertexKey dest_key
        that.dest_key = (this.dest_key == null ? null : (global::A1.Replication.OSVertexKey)this.dest_key.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.type = reader.ReadString();
        }
        else
        {
            throw new BondException("Missing required field \"type\", id=0");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.src_key.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"src_key\", id=1");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.dest_key.Read(reader);
        }
        else
        {
            throw new BondException("Missing required field \"dest_key\", id=2");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(3);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.type:  // id=0
                    this.type = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    seenRequiredFields.Set(__ordinals.type, true);
                    break;
                case __ordinals.src_key:  // id=1
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.src_key.Read(reader);
                    seenRequiredFields.Set(__ordinals.src_key, true);
                    break;
                case __ordinals.dest_key:  // id=2
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.dest_key.Read(reader);
                    seenRequiredFields.Set(__ordinals.dest_key, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.type))
        {
            ok = false;
            missingFieldName = "type";
            missingFieldId = __ordinals.type;
        }
        if (ok && !seenFields.Get(__ordinals.src_key))
        {
            ok = false;
            missingFieldName = "src_key";
            missingFieldId = __ordinals.src_key;
        }
        if (ok && !seenFields.Get(__ordinals.dest_key))
        {
            ok = false;
            missingFieldName = "dest_key";
            missingFieldId = __ordinals.dest_key;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(OSEdgeKey))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.type, Schema.type_meta);
            writer.WriteString(m_type);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.src_key, Schema.src_key_meta);
            m_src_key.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.dest_key, Schema.dest_key_meta);
            m_dest_key.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="type";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="src_key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::A1.Replication.OSVertexKey.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="dest_key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type = global::A1.Replication.OSVertexKey.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        OSEdgeKey that = obj as OSEdgeKey;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(OSEdgeKey other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(OSEdgeKey that)
    {
        bool equals = true;
        
        equals = equals && ((this.type == null) == (that.type == null));
        equals = equals && (this.type == null ? true : (this.type.Length == that.type.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(OSEdgeKey that)
    {
        bool equals = true;
        
        equals = equals && (this.type == null ? true : this.type == that.type);
        equals = equals && (this.src_key == null ? true : this.src_key.MemberwiseCompare(that.src_key));
        equals = equals && (this.dest_key == null ? true : this.dest_key.MemberwiseCompare(that.dest_key));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_type, this.type, separator);
        sb.AppendFormat(format, __internal.s_src_key, this.src_key, separator);
        sb.AppendFormat(format, __internal.s_dest_key, this.dest_key, separator);
        
        return sb.ToString();
    } // ToString()

}; // class OSEdgeKey

/// <summary>
/// OSEdgeValue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class OSEdgeValue : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Optional bool deleted
    private Boolean m_deleted;

    // 1: Optional string type
    private String m_type;

    // 2: Optional nullable<bonded<Microsoft.Bond.Void>> user_data
    private Bonded<global::Microsoft.Bond.Void> m_user_data;

    // 3: Optional nullable<bonded<Microsoft.Bond.Void>> src_vertex_key
    private Bonded<global::Microsoft.Bond.Void> m_src_vertex_key;

    // 4: Optional nullable<bonded<Microsoft.Bond.Void>> dest_vertex_key
    private Bonded<global::Microsoft.Bond.Void> m_dest_vertex_key;

    /// <summary>
    /// deleted
    /// </summary>
    public Boolean deleted
    {
        get { return this.m_deleted; }
        set { this.m_deleted = value; }
    }

    /// <summary>
    /// type
    /// </summary>
    public String type
    {
        get { return this.m_type; }
        set { this.m_type = value; }
    }

    /// <summary>
    /// user_data
    /// </summary>
    public Bonded<global::Microsoft.Bond.Void> user_data
    {
        get { return this.m_user_data; }
        set { this.m_user_data = value; }
    }

    /// <summary>
    /// src_vertex_key
    /// </summary>
    public Bonded<global::Microsoft.Bond.Void> src_vertex_key
    {
        get { return this.m_src_vertex_key; }
        set { this.m_src_vertex_key = value; }
    }

    /// <summary>
    /// make these nullable, they will be null when deleted == true
    /// </summary>
    public Bonded<global::Microsoft.Bond.Void> dest_vertex_key
    {
        get { return this.m_dest_vertex_key; }
        set { this.m_dest_vertex_key = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata deleted_meta = new Metadata();
        public static readonly Metadata type_meta = new Metadata();
        public static readonly Metadata user_data_meta = new Metadata();
        public static readonly Metadata src_vertex_key_meta = new Metadata();
        public static readonly Metadata dest_vertex_key_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("OSEdgeValue");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "A1.Replication." + meta.name;


            // deleted
            deleted_meta.name = "deleted";
            deleted_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            deleted_meta.default_value.uint_value = 0;

            // type
            type_meta.name = "type";
            type_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            type_meta.attributes["Index.BondedVoidPayloadTypeName"] = "user_data";

            // user_data
            user_data_meta.name = "user_data";
            user_data_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
            user_data_meta.attributes["Index.Default"] = "";

            // src_vertex_key
            src_vertex_key_meta.name = "src_vertex_key";
            src_vertex_key_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // dest_vertex_key
            dest_vertex_key_meta.name = "dest_vertex_key";
            dest_vertex_key_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int deleted = 0;
        public const int type = 1;
        public const int user_data = 2;
        public const int src_vertex_key = 3;
        public const int dest_vertex_key = 4;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_deleted = "deleted";
        public const String s_type = "type";
        public const String s_user_data = "user_data";
        public const String s_src_vertex_key = "src_vertex_key";
        public const String s_dest_vertex_key = "dest_vertex_key";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public OSEdgeValue()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_deleted = false;
        m_type = string.Empty;
        m_user_data = default(Bonded<global::Microsoft.Bond.Void>);
        m_src_vertex_key = default(Bonded<global::Microsoft.Bond.Void>);
        m_dest_vertex_key = default(Bonded<global::Microsoft.Bond.Void>);
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::A1.Replication.OSEdgeValue cloned = new global::A1.Replication.OSEdgeValue();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::A1.Replication.OSEdgeValue that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: bool deleted
        that.deleted = this.deleted;
        // 1: string type
        that.type = this.type;
        // 2: nullable<bonded<Microsoft.Bond.Void>> user_data
        that.user_data = (this.user_data == null ? null : (Bonded<global::Microsoft.Bond.Void>)this.user_data.Clone());
        // 3: nullable<bonded<Microsoft.Bond.Void>> src_vertex_key
        that.src_vertex_key = (this.src_vertex_key == null ? null : (Bonded<global::Microsoft.Bond.Void>)this.src_vertex_key.Clone());
        // 4: nullable<bonded<Microsoft.Bond.Void>> dest_vertex_key
        that.dest_vertex_key = (this.dest_vertex_key == null ? null : (Bonded<global::Microsoft.Bond.Void>)this.dest_vertex_key.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.deleted = reader.ReadBool();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.type = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_user_data(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_src_vertex_key(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_dest_vertex_key(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.deleted:  // id=0
                    this.deleted = global::Microsoft.Bond.ReadHelper.ReadBool(reader, type);
                    break;
                case __ordinals.type:  // id=1
                    this.type = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.user_data:  // id=2
                    this.ReadField_impl_user_data(reader, type);
                    break;
                case __ordinals.src_vertex_key:  // id=3
                    this.ReadField_impl_src_vertex_key(reader, type);
                    break;
                case __ordinals.dest_vertex_key:  // id=4
                    this.ReadField_impl_dest_vertex_key(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    private void ReadField_impl_user_data(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_user_data == null) { this.m_user_data = new Bonded<global::Microsoft.Bond.Void>(); } 
            this.m_user_data.Read(reader);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_user_data


    private void ReadField_impl_src_vertex_key(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_src_vertex_key == null) { this.m_src_vertex_key = new Bonded<global::Microsoft.Bond.Void>(); } 
            this.m_src_vertex_key.Read(reader);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_src_vertex_key


    private void ReadField_impl_dest_vertex_key(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
    
        BondDataType elemType2;
        UInt32 size1 = 0;
    
        reader.ReadContainerBegin(out size1, out elemType2);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
    
        if (size1 == 1)
        {
            if (this.m_dest_vertex_key == null) { this.m_dest_vertex_key = new Bonded<global::Microsoft.Bond.Void>(); } 
            this.m_dest_vertex_key.Read(reader);
        }
        else if (size1 != 0)
        {
            throw new global::Microsoft.Bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + size1);
        }
    
    
        reader.ReadContainerEnd();
    } // ReadField_impl_dest_vertex_key


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(OSEdgeValue))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.deleted_meta.default_value.Equals(m_deleted)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.deleted, Schema.deleted_meta);
                writer.WriteBool(m_deleted);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_BOOL, __ordinals.deleted, Schema.deleted_meta);
        }

        if (writeAllFields || (!Schema.type_meta.default_value.Equals(m_type)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.type, Schema.type_meta);
                writer.WriteString(m_type);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.type, Schema.type_meta);
        }

        UInt32 count1 = (UInt32)((m_user_data != null) ? 1 : 0);
        if (writeAllFields || count1 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.user_data, Schema.user_data_meta);
                writer.WriteContainerBegin(count1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count1 != 0)
                {
                        m_user_data.Write(writer);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.user_data, Schema.user_data_meta);
        }

        UInt32 count2 = (UInt32)((m_src_vertex_key != null) ? 1 : 0);
        if (writeAllFields || count2 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.src_vertex_key, Schema.src_vertex_key_meta);
                writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count2 != 0)
                {
                        m_src_vertex_key.Write(writer);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.src_vertex_key, Schema.src_vertex_key_meta);
        }

        UInt32 count3 = (UInt32)((m_dest_vertex_key != null) ? 1 : 0);
        if (writeAllFields || count3 != 0)
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.dest_vertex_key, Schema.dest_vertex_key_meta);
                writer.WriteContainerBegin(count3, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                if (count3 != 0)
                {
                        m_dest_vertex_key.Write(writer);
                }
                writer.WriteContainerEnd();
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.dest_vertex_key, Schema.dest_vertex_key_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="deleted";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = false?1:0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_BOOL;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="type";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.metadata.attributes["Index.BondedVoidPayloadTypeName"] = "user_data";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 2;
        field.metadata.name="user_data";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.Void.GetTypeDef(schema);
        field.type.element.bonded_type = true;
        field.metadata.attributes["Index.Default"] = "";

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 3;
        field.metadata.name="src_vertex_key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.Void.GetTypeDef(schema);
        field.type.element.bonded_type = true;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 4;
        field.metadata.name="dest_vertex_key";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::Microsoft.Bond.Void.GetTypeDef(schema);
        field.type.element.bonded_type = true;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        OSEdgeValue that = obj as OSEdgeValue;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(OSEdgeValue other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(OSEdgeValue that)
    {
        bool equals = true;
        
        equals = equals && ((this.deleted == that.deleted));
        equals = equals && ((this.type == null) == (that.type == null));
        equals = equals && (this.type == null ? true : (this.type.Length == that.type.Length));
        equals = equals && ((this.user_data == null) == (that.user_data == null));
        equals = equals && ((this.src_vertex_key == null) == (that.src_vertex_key == null));
        equals = equals && ((this.dest_vertex_key == null) == (that.dest_vertex_key == null));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(OSEdgeValue that)
    {
        bool equals = true;
        
        equals = equals && (this.type == null ? true : this.type == that.type);
        equals = equals && ((this.user_data == null) == (that.user_data == null));
        if (equals && !(this.user_data == null))
        {
                equals = equals && (this.user_data == null ? true : this.user_data.MemberwiseCompare(that.user_data));
        }
        equals = equals && ((this.src_vertex_key == null) == (that.src_vertex_key == null));
        if (equals && !(this.src_vertex_key == null))
        {
                equals = equals && (this.src_vertex_key == null ? true : this.src_vertex_key.MemberwiseCompare(that.src_vertex_key));
        }
        equals = equals && ((this.dest_vertex_key == null) == (that.dest_vertex_key == null));
        if (equals && !(this.dest_vertex_key == null))
        {
                equals = equals && (this.dest_vertex_key == null ? true : this.dest_vertex_key.MemberwiseCompare(that.dest_vertex_key));
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_deleted, this.deleted, separator);
        sb.AppendFormat(format, __internal.s_type, this.type, separator);
        sb.AppendFormat(format, __internal.s_user_data, this.user_data, separator);
        sb.AppendFormat(format, __internal.s_src_vertex_key, this.src_vertex_key, separator);
        sb.AppendFormat(format, __internal.s_dest_vertex_key, this.dest_vertex_key, separator);
        
        return sb.ToString();
    } // ToString()

}; // class OSEdgeValue
} // namespace Replication
} // namespace A1
// Types used for Delete Processor coprocs as part of GDPR
namespace ObjectStoreDP
{

/// <summary>
/// RandomKey
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class RandomKey : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required uint32 randomKey
    private UInt32 m_randomKey;

    /// <summary>
    /// randomKey
    /// </summary>
    public UInt32 randomKey
    {
        get { return this.m_randomKey; }
        set { this.m_randomKey = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata randomKey_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("RandomKey");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;


            // randomKey
            randomKey_meta.name = "randomKey";
            randomKey_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            randomKey_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int randomKey = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_randomKey = "randomKey";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public RandomKey()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_randomKey = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStoreDP.RandomKey cloned = new global::ObjectStoreDP.RandomKey();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.RandomKey that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: uint32 randomKey
        that.randomKey = this.randomKey;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.randomKey = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"randomKey\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.randomKey:  // id=10
                    this.randomKey = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.randomKey, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.randomKey))
        {
            ok = false;
            missingFieldName = "randomKey";
            missingFieldId = __ordinals.randomKey;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(RandomKey))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.randomKey, Schema.randomKey_meta);
            writer.WriteUInt32(m_randomKey);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="randomKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        RandomKey that = obj as RandomKey;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(RandomKey other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(RandomKey that)
    {
        bool equals = true;
        
        equals = equals && ((this.randomKey == that.randomKey));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(RandomKey that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_randomKey, this.randomKey, separator);
        
        return sb.ToString();
    } // ToString()

}; // class RandomKey

/// <summary>
/// TimeRangePredicate
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class TimeRangePredicate : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional int64 startTime
    private Int64 m_startTime;

    // 20: Optional int64 endTime
    private Int64 m_endTime;

    /// <summary>
    /// startTime
    /// </summary>
    public Int64 startTime
    {
        get { return this.m_startTime; }
        set { this.m_startTime = value; }
    }

    /// <summary>
    /// endTime
    /// </summary>
    public Int64 endTime
    {
        get { return this.m_endTime; }
        set { this.m_endTime = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata startTime_meta = new Metadata();
        public static readonly Metadata endTime_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("TimeRangePredicate");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;


            // startTime
            startTime_meta.name = "startTime";
            startTime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            startTime_meta.default_value.int_value = 0;

            // endTime
            endTime_meta.name = "endTime";
            endTime_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            endTime_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int startTime = 10;
        public const int endTime = 20;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_startTime = "startTime";
        public const String s_endTime = "endTime";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public TimeRangePredicate()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_startTime = 0;
        m_endTime = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStoreDP.TimeRangePredicate cloned = new global::ObjectStoreDP.TimeRangePredicate();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.TimeRangePredicate that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: int64 startTime
        that.startTime = this.startTime;
        // 20: int64 endTime
        that.endTime = this.endTime;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.startTime = reader.ReadInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.endTime = reader.ReadInt64();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.startTime:  // id=10
                    this.startTime = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                case __ordinals.endTime:  // id=20
                    this.endTime = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(TimeRangePredicate))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.startTime_meta.default_value.Equals(m_startTime)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.startTime, Schema.startTime_meta);
                writer.WriteInt64(m_startTime);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.startTime, Schema.startTime_meta);
        }

        if (writeAllFields || (!Schema.endTime_meta.default_value.Equals(m_endTime)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.endTime, Schema.endTime_meta);
                writer.WriteInt64(m_endTime);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.endTime, Schema.endTime_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="startTime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="endTime";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        TimeRangePredicate that = obj as TimeRangePredicate;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(TimeRangePredicate other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(TimeRangePredicate that)
    {
        bool equals = true;
        
        equals = equals && ((this.startTime == that.startTime));
        equals = equals && ((this.endTime == that.endTime));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(TimeRangePredicate that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_startTime, this.startTime, separator);
        sb.AppendFormat(format, __internal.s_endTime, this.endTime, separator);
        
        return sb.ToString();
    } // ToString()

}; // class TimeRangePredicate

/// <summary>
/// PrivacySubject
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PrivacySubject : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PrivacySubject");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;

        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PrivacySubject()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStoreDP.PrivacySubject cloned = new global::ObjectStoreDP.PrivacySubject();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.PrivacySubject that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        
        Reset();
        

        reader.ReadStructBegin();
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PrivacySubject))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PrivacySubject that = obj as PrivacySubject;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PrivacySubject other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PrivacySubject that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PrivacySubject that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        
        return sb.ToString();
    } // ToString()

}; // class PrivacySubject

/// <summary>
/// PrivacyCommand
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class PrivacyCommand : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional string AssetGroupId
    private String m_AssetGroupId;

    // 20: Optional string AssetGroupQualifier
    private String m_AssetGroupQualifier;

    // 30: Optional string CommandId
    private String m_CommandId;

    // 40: Optional bonded<ObjectStoreDP.PrivacySubject> Subject
    private Bonded<global::ObjectStoreDP.PrivacySubject> m_Subject;

    /// <summary>
    /// AssetGroupId
    /// </summary>
    public String AssetGroupId
    {
        get { return this.m_AssetGroupId; }
        set { this.m_AssetGroupId = value; }
    }

    /// <summary>
    /// AssetGroupQualifier
    /// </summary>
    public String AssetGroupQualifier
    {
        get { return this.m_AssetGroupQualifier; }
        set { this.m_AssetGroupQualifier = value; }
    }

    /// <summary>
    /// CommandId
    /// </summary>
    public String CommandId
    {
        get { return this.m_CommandId; }
        set { this.m_CommandId = value; }
    }

    /// <summary>
    /// Subject
    /// </summary>
    public Bonded<global::ObjectStoreDP.PrivacySubject> Subject
    {
        get { return this.m_Subject; }
        set { this.m_Subject = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata AssetGroupId_meta = new Metadata();
        public static readonly Metadata AssetGroupQualifier_meta = new Metadata();
        public static readonly Metadata CommandId_meta = new Metadata();
        public static readonly Metadata Subject_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("PrivacyCommand");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;


            // AssetGroupId
            AssetGroupId_meta.name = "AssetGroupId";
            AssetGroupId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AssetGroupId_meta.default_value.string_value = "null";

            // AssetGroupQualifier
            AssetGroupQualifier_meta.name = "AssetGroupQualifier";
            AssetGroupQualifier_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AssetGroupQualifier_meta.default_value.string_value = "null";

            // CommandId
            CommandId_meta.name = "CommandId";
            CommandId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            CommandId_meta.default_value.string_value = "null";

            // Subject
            Subject_meta.name = "Subject";
            Subject_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int AssetGroupId = 10;
        public const int AssetGroupQualifier = 20;
        public const int CommandId = 30;
        public const int Subject = 40;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_AssetGroupId = "AssetGroupId";
        public const String s_AssetGroupQualifier = "AssetGroupQualifier";
        public const String s_CommandId = "CommandId";
        public const String s_Subject = "Subject";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public PrivacyCommand()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_AssetGroupId = "null";
        m_AssetGroupQualifier = "null";
        m_CommandId = "null";
        m_Subject = new Bonded<global::ObjectStoreDP.PrivacySubject>();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStoreDP.PrivacyCommand cloned = new global::ObjectStoreDP.PrivacyCommand();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.PrivacyCommand that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string AssetGroupId
        that.AssetGroupId = this.AssetGroupId;
        // 20: string AssetGroupQualifier
        that.AssetGroupQualifier = this.AssetGroupQualifier;
        // 30: string CommandId
        that.CommandId = this.CommandId;
        // 40: bonded<ObjectStoreDP.PrivacySubject> Subject
        that.Subject = (this.Subject == null ? null : (Bonded<global::ObjectStoreDP.PrivacySubject>)this.Subject.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AssetGroupId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AssetGroupQualifier = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CommandId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Subject.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.AssetGroupId:  // id=10
                    this.AssetGroupId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AssetGroupQualifier:  // id=20
                    this.AssetGroupQualifier = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.CommandId:  // id=30
                    this.CommandId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Subject:  // id=40
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.Subject.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(PrivacyCommand))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.AssetGroupId_meta.default_value.Equals(m_AssetGroupId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AssetGroupId, Schema.AssetGroupId_meta);
                writer.WriteString(m_AssetGroupId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AssetGroupId, Schema.AssetGroupId_meta);
        }

        if (writeAllFields || (!Schema.AssetGroupQualifier_meta.default_value.Equals(m_AssetGroupQualifier)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AssetGroupQualifier, Schema.AssetGroupQualifier_meta);
                writer.WriteString(m_AssetGroupQualifier);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AssetGroupQualifier, Schema.AssetGroupQualifier_meta);
        }

        if (writeAllFields || (!Schema.CommandId_meta.default_value.Equals(m_CommandId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CommandId, Schema.CommandId_meta);
                writer.WriteString(m_CommandId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CommandId, Schema.CommandId_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.Subject, Schema.Subject_meta);
            m_Subject.Write(writer);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="AssetGroupId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="AssetGroupQualifier";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="CommandId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 40;
        field.metadata.name="Subject";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::ObjectStoreDP.PrivacySubject.GetTypeDef(schema);
        field.type.bonded_type = true;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        PrivacyCommand that = obj as PrivacyCommand;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(PrivacyCommand other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(PrivacyCommand that)
    {
        bool equals = true;
        
        equals = equals && ((this.AssetGroupId == null) == (that.AssetGroupId == null));
        equals = equals && (this.AssetGroupId == null ? true : (this.AssetGroupId.Length == that.AssetGroupId.Length));
        equals = equals && ((this.AssetGroupQualifier == null) == (that.AssetGroupQualifier == null));
        equals = equals && (this.AssetGroupQualifier == null ? true : (this.AssetGroupQualifier.Length == that.AssetGroupQualifier.Length));
        equals = equals && ((this.CommandId == null) == (that.CommandId == null));
        equals = equals && (this.CommandId == null ? true : (this.CommandId.Length == that.CommandId.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(PrivacyCommand that)
    {
        bool equals = true;
        
        equals = equals && (this.AssetGroupId == null ? true : this.AssetGroupId == that.AssetGroupId);
        equals = equals && (this.AssetGroupQualifier == null ? true : this.AssetGroupQualifier == that.AssetGroupQualifier);
        equals = equals && (this.CommandId == null ? true : this.CommandId == that.CommandId);
            equals = equals && (this.Subject == null ? true : this.Subject.MemberwiseCompare(that.Subject));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_AssetGroupId, this.AssetGroupId, separator);
        sb.AppendFormat(format, __internal.s_AssetGroupQualifier, this.AssetGroupQualifier, separator);
        sb.AppendFormat(format, __internal.s_CommandId, this.CommandId, separator);
        sb.AppendFormat(format, __internal.s_Subject, this.Subject, separator);
        
        return sb.ToString();
    } // ToString()

}; // class PrivacyCommand

/// <summary>
/// DeleteCommand
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DeleteCommand : global::ObjectStoreDP.PrivacyCommand
{
    //
    // Fields
    //

    // 10: Optional string PrivacyDataType
    private String m_PrivacyDataType;

    // 20: Optional ObjectStoreDP.TimeRangePredicate TimeRangePredicate
    private global::ObjectStoreDP.TimeRangePredicate m_TimeRangePredicate;

    /// <summary>
    /// PrivacyDataType
    /// </summary>
    public String PrivacyDataType
    {
        get { return this.m_PrivacyDataType; }
        set { this.m_PrivacyDataType = value; }
    }

    /// <summary>
    /// TimeRangePredicate
    /// </summary>
    public global::ObjectStoreDP.TimeRangePredicate TimeRangePredicate
    {
        get { return this.m_TimeRangePredicate; }
        set { this.m_TimeRangePredicate = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata PrivacyDataType_meta = new Metadata();
        public static readonly Metadata TimeRangePredicate_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DeleteCommand");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;


            // PrivacyDataType
            PrivacyDataType_meta.name = "PrivacyDataType";
            PrivacyDataType_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            PrivacyDataType_meta.default_value.string_value = "null";

            // TimeRangePredicate
            TimeRangePredicate_meta.name = "TimeRangePredicate";
            TimeRangePredicate_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int PrivacyDataType = 10;
        public const int TimeRangePredicate = 20;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_PrivacyDataType = "PrivacyDataType";
        public const String s_TimeRangePredicate = "TimeRangePredicate";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DeleteCommand()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_PrivacyDataType = "null";
        m_TimeRangePredicate = new global::ObjectStoreDP.TimeRangePredicate();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::ObjectStoreDP.DeleteCommand cloned = new global::ObjectStoreDP.DeleteCommand();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.DeleteCommand that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 10: string PrivacyDataType
        that.PrivacyDataType = this.PrivacyDataType;
        // 20: ObjectStoreDP.TimeRangePredicate TimeRangePredicate
        that.TimeRangePredicate = (this.TimeRangePredicate == null ? null : (global::ObjectStoreDP.TimeRangePredicate)this.TimeRangePredicate.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.PrivacyDataType = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.TimeRangePredicate.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.PrivacyDataType:  // id=10
                    this.PrivacyDataType = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.TimeRangePredicate:  // id=20
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.TimeRangePredicate.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DeleteCommand))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        if (writeAllFields || (!Schema.PrivacyDataType_meta.default_value.Equals(m_PrivacyDataType)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PrivacyDataType, Schema.PrivacyDataType_meta);
                writer.WriteString(m_PrivacyDataType);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.PrivacyDataType, Schema.PrivacyDataType_meta);
        }

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.TimeRangePredicate, Schema.TimeRangePredicate_meta);
            m_TimeRangePredicate.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::ObjectStoreDP.PrivacyCommand.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="PrivacyDataType";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="TimeRangePredicate";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::ObjectStoreDP.TimeRangePredicate.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DeleteCommand that = obj as DeleteCommand;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DeleteCommand other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DeleteCommand that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.PrivacyDataType == null) == (that.PrivacyDataType == null));
        equals = equals && (this.PrivacyDataType == null ? true : (this.PrivacyDataType.Length == that.PrivacyDataType.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DeleteCommand that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        equals = equals && (this.PrivacyDataType == null ? true : this.PrivacyDataType == that.PrivacyDataType);
        equals = equals && (this.TimeRangePredicate == null ? true : this.TimeRangePredicate.MemberwiseCompare(that.TimeRangePredicate));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_PrivacyDataType, this.PrivacyDataType, separator);
        sb.AppendFormat(format, __internal.s_TimeRangePredicate, this.TimeRangePredicate, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DeleteCommand

/// <summary>
/// AccountCloseCommand
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class AccountCloseCommand : global::ObjectStoreDP.PrivacyCommand
{
    //
    // Fields
    //

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("AccountCloseCommand");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;

        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public AccountCloseCommand()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::ObjectStoreDP.AccountCloseCommand cloned = new global::ObjectStoreDP.AccountCloseCommand();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.AccountCloseCommand that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(AccountCloseCommand))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::ObjectStoreDP.PrivacyCommand.GetTypeDef(schema);
        

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        AccountCloseCommand that = obj as AccountCloseCommand;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(AccountCloseCommand other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(AccountCloseCommand that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(AccountCloseCommand that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        
        return sb.ToString();
    } // ToString()

}; // class AccountCloseCommand

/// <summary>
/// MsaSubject
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class MsaSubject : global::ObjectStoreDP.PrivacySubject
{
    //
    // Fields
    //

    // 10: Optional string Anid
    private String m_Anid;

    // 20: Optional int64 Cid
    private Int64 m_Cid;

    // 30: Optional string Opid
    private String m_Opid;

    // 40: Optional int64 Puid
    private Int64 m_Puid;

    // 50: Optional string Xuid
    private String m_Xuid;

    // 60: Optional string AsimovPuid
    private String m_AsimovPuid;

    // 70: Optional string HexPuid
    private String m_HexPuid;

    // 80: Optional string AsimovCid
    private String m_AsimovCid;

    // 90: Optional string HexCid
    private String m_HexCid;

    /// <summary>
    /// Anid
    /// </summary>
    public String Anid
    {
        get { return this.m_Anid; }
        set { this.m_Anid = value; }
    }

    /// <summary>
    /// Cid
    /// </summary>
    public Int64 Cid
    {
        get { return this.m_Cid; }
        set { this.m_Cid = value; }
    }

    /// <summary>
    /// Opid
    /// </summary>
    public String Opid
    {
        get { return this.m_Opid; }
        set { this.m_Opid = value; }
    }

    /// <summary>
    /// Puid
    /// </summary>
    public Int64 Puid
    {
        get { return this.m_Puid; }
        set { this.m_Puid = value; }
    }

    /// <summary>
    /// Xuid
    /// </summary>
    public String Xuid
    {
        get { return this.m_Xuid; }
        set { this.m_Xuid = value; }
    }

    /// <summary>
    /// AsimovPuid
    /// </summary>
    public String AsimovPuid
    {
        get { return this.m_AsimovPuid; }
        set { this.m_AsimovPuid = value; }
    }

    /// <summary>
    /// HexPuid
    /// </summary>
    public String HexPuid
    {
        get { return this.m_HexPuid; }
        set { this.m_HexPuid = value; }
    }

    /// <summary>
    /// AsimovCid
    /// </summary>
    public String AsimovCid
    {
        get { return this.m_AsimovCid; }
        set { this.m_AsimovCid = value; }
    }

    /// <summary>
    /// HexCid
    /// </summary>
    public String HexCid
    {
        get { return this.m_HexCid; }
        set { this.m_HexCid = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata Anid_meta = new Metadata();
        public static readonly Metadata Cid_meta = new Metadata();
        public static readonly Metadata Opid_meta = new Metadata();
        public static readonly Metadata Puid_meta = new Metadata();
        public static readonly Metadata Xuid_meta = new Metadata();
        public static readonly Metadata AsimovPuid_meta = new Metadata();
        public static readonly Metadata HexPuid_meta = new Metadata();
        public static readonly Metadata AsimovCid_meta = new Metadata();
        public static readonly Metadata HexCid_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("MsaSubject");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;


            // Anid
            Anid_meta.name = "Anid";
            Anid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Anid_meta.default_value.string_value = "null";

            // Cid
            Cid_meta.name = "Cid";
            Cid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Cid_meta.default_value.int_value = 0;

            // Opid
            Opid_meta.name = "Opid";
            Opid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Opid_meta.default_value.string_value = "null";

            // Puid
            Puid_meta.name = "Puid";
            Puid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Puid_meta.default_value.int_value = 0;

            // Xuid
            Xuid_meta.name = "Xuid";
            Xuid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Xuid_meta.default_value.string_value = "null";

            // AsimovPuid
            AsimovPuid_meta.name = "AsimovPuid";
            AsimovPuid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AsimovPuid_meta.default_value.string_value = "null";

            // HexPuid
            HexPuid_meta.name = "HexPuid";
            HexPuid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            HexPuid_meta.default_value.string_value = "null";

            // AsimovCid
            AsimovCid_meta.name = "AsimovCid";
            AsimovCid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            AsimovCid_meta.default_value.string_value = "null";

            // HexCid
            HexCid_meta.name = "HexCid";
            HexCid_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            HexCid_meta.default_value.string_value = "null";
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int Anid = 10;
        public const int Cid = 20;
        public const int Opid = 30;
        public const int Puid = 40;
        public const int Xuid = 50;
        public const int AsimovPuid = 60;
        public const int HexPuid = 70;
        public const int AsimovCid = 80;
        public const int HexCid = 90;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_Anid = "Anid";
        public const String s_Cid = "Cid";
        public const String s_Opid = "Opid";
        public const String s_Puid = "Puid";
        public const String s_Xuid = "Xuid";
        public const String s_AsimovPuid = "AsimovPuid";
        public const String s_HexPuid = "HexPuid";
        public const String s_AsimovCid = "AsimovCid";
        public const String s_HexCid = "HexCid";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public MsaSubject()
    {
        
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_Anid = "null";
        m_Cid = 0;
        m_Opid = "null";
        m_Puid = 0;
        m_Xuid = "null";
        m_AsimovPuid = "null";
        m_HexPuid = "null";
        m_AsimovCid = "null";
        m_HexCid = "null";
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public override IBondSerializable Clone()
    {
        global::ObjectStoreDP.MsaSubject cloned = new global::ObjectStoreDP.MsaSubject();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.MsaSubject that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 10: string Anid
        that.Anid = this.Anid;
        // 20: int64 Cid
        that.Cid = this.Cid;
        // 30: string Opid
        that.Opid = this.Opid;
        // 40: int64 Puid
        that.Puid = this.Puid;
        // 50: string Xuid
        that.Xuid = this.Xuid;
        // 60: string AsimovPuid
        that.AsimovPuid = this.AsimovPuid;
        // 70: string HexPuid
        that.HexPuid = this.HexPuid;
        // 80: string AsimovCid
        that.AsimovCid = this.AsimovCid;
        // 90: string HexCid
        that.HexCid = this.HexCid;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Anid = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Cid = reader.ReadInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Opid = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Puid = reader.ReadInt64();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Xuid = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AsimovPuid = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.HexPuid = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.AsimovCid = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.HexCid = reader.ReadString();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.Anid:  // id=10
                    this.Anid = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Cid:  // id=20
                    this.Cid = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                case __ordinals.Opid:  // id=30
                    this.Opid = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.Puid:  // id=40
                    this.Puid = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    break;
                case __ordinals.Xuid:  // id=50
                    this.Xuid = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AsimovPuid:  // id=60
                    this.AsimovPuid = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.HexPuid:  // id=70
                    this.HexPuid = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.AsimovCid:  // id=80
                    this.AsimovCid = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.HexCid:  // id=90
                    this.HexCid = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(MsaSubject))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        if (writeAllFields || (!Schema.Anid_meta.default_value.Equals(m_Anid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Anid, Schema.Anid_meta);
                writer.WriteString(m_Anid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Anid, Schema.Anid_meta);
        }

        if (writeAllFields || (!Schema.Cid_meta.default_value.Equals(m_Cid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Cid, Schema.Cid_meta);
                writer.WriteInt64(m_Cid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Cid, Schema.Cid_meta);
        }

        if (writeAllFields || (!Schema.Opid_meta.default_value.Equals(m_Opid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Opid, Schema.Opid_meta);
                writer.WriteString(m_Opid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Opid, Schema.Opid_meta);
        }

        if (writeAllFields || (!Schema.Puid_meta.default_value.Equals(m_Puid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Puid, Schema.Puid_meta);
                writer.WriteInt64(m_Puid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.Puid, Schema.Puid_meta);
        }

        if (writeAllFields || (!Schema.Xuid_meta.default_value.Equals(m_Xuid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Xuid, Schema.Xuid_meta);
                writer.WriteString(m_Xuid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.Xuid, Schema.Xuid_meta);
        }

        if (writeAllFields || (!Schema.AsimovPuid_meta.default_value.Equals(m_AsimovPuid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AsimovPuid, Schema.AsimovPuid_meta);
                writer.WriteString(m_AsimovPuid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AsimovPuid, Schema.AsimovPuid_meta);
        }

        if (writeAllFields || (!Schema.HexPuid_meta.default_value.Equals(m_HexPuid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.HexPuid, Schema.HexPuid_meta);
                writer.WriteString(m_HexPuid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.HexPuid, Schema.HexPuid_meta);
        }

        if (writeAllFields || (!Schema.AsimovCid_meta.default_value.Equals(m_AsimovCid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AsimovCid, Schema.AsimovCid_meta);
                writer.WriteString(m_AsimovCid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.AsimovCid, Schema.AsimovCid_meta);
        }

        if (writeAllFields || (!Schema.HexCid_meta.default_value.Equals(m_HexCid)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.HexCid, Schema.HexCid_meta);
                writer.WriteString(m_HexCid);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.HexCid, Schema.HexCid_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::ObjectStoreDP.PrivacySubject.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="Anid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="Cid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="Opid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 40;
        field.metadata.name="Puid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 50;
        field.metadata.name="Xuid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 60;
        field.metadata.name="AsimovPuid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 70;
        field.metadata.name="HexPuid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 80;
        field.metadata.name="AsimovCid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 90;
        field.metadata.name="HexCid";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        MsaSubject that = obj as MsaSubject;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(MsaSubject other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(MsaSubject that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.Anid == null) == (that.Anid == null));
        equals = equals && (this.Anid == null ? true : (this.Anid.Length == that.Anid.Length));
        equals = equals && ((this.Cid == that.Cid));
        equals = equals && ((this.Opid == null) == (that.Opid == null));
        equals = equals && (this.Opid == null ? true : (this.Opid.Length == that.Opid.Length));
        equals = equals && ((this.Puid == that.Puid));
        equals = equals && ((this.Xuid == null) == (that.Xuid == null));
        equals = equals && (this.Xuid == null ? true : (this.Xuid.Length == that.Xuid.Length));
        equals = equals && ((this.AsimovPuid == null) == (that.AsimovPuid == null));
        equals = equals && (this.AsimovPuid == null ? true : (this.AsimovPuid.Length == that.AsimovPuid.Length));
        equals = equals && ((this.HexPuid == null) == (that.HexPuid == null));
        equals = equals && (this.HexPuid == null ? true : (this.HexPuid.Length == that.HexPuid.Length));
        equals = equals && ((this.AsimovCid == null) == (that.AsimovCid == null));
        equals = equals && (this.AsimovCid == null ? true : (this.AsimovCid.Length == that.AsimovCid.Length));
        equals = equals && ((this.HexCid == null) == (that.HexCid == null));
        equals = equals && (this.HexCid == null ? true : (this.HexCid.Length == that.HexCid.Length));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(MsaSubject that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        equals = equals && (this.Anid == null ? true : this.Anid == that.Anid);
        equals = equals && (this.Opid == null ? true : this.Opid == that.Opid);
        equals = equals && (this.Xuid == null ? true : this.Xuid == that.Xuid);
        equals = equals && (this.AsimovPuid == null ? true : this.AsimovPuid == that.AsimovPuid);
        equals = equals && (this.HexPuid == null ? true : this.HexPuid == that.HexPuid);
        equals = equals && (this.AsimovCid == null ? true : this.AsimovCid == that.AsimovCid);
        equals = equals && (this.HexCid == null ? true : this.HexCid == that.HexCid);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_Anid, this.Anid, separator);
        sb.AppendFormat(format, __internal.s_Cid, this.Cid, separator);
        sb.AppendFormat(format, __internal.s_Opid, this.Opid, separator);
        sb.AppendFormat(format, __internal.s_Puid, this.Puid, separator);
        sb.AppendFormat(format, __internal.s_Xuid, this.Xuid, separator);
        sb.AppendFormat(format, __internal.s_AsimovPuid, this.AsimovPuid, separator);
        sb.AppendFormat(format, __internal.s_HexPuid, this.HexPuid, separator);
        sb.AppendFormat(format, __internal.s_AsimovCid, this.AsimovCid, separator);
        sb.AppendFormat(format, __internal.s_HexCid, this.HexCid, separator);
        
        return sb.ToString();
    } // ToString()

}; // class MsaSubject

/// <summary>
/// CommandResult
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public enum CommandResult
{
                    
    CommandComplete = 1,
/// <summary>
/// Succeeded
/// </summary>
    CommandFailed = 2,
/// <summary>
/// Failed
/// </summary>
    CommandDeidentify = 3,
}; // enum CommandResult


/// <summary>
/// DeleteResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class DeleteResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional string CommandId
    private String m_CommandId;

    // 20: Optional uint32 rowsDeleted
    private UInt32 m_rowsDeleted;

    // 30: Optional ObjectStoreDP.CommandResult CommandResult
    private global::ObjectStoreDP.CommandResult m_CommandResult;

    /// <summary>
    /// CommandId
    /// </summary>
    public String CommandId
    {
        get { return this.m_CommandId; }
        set { this.m_CommandId = value; }
    }

    /// <summary>
    /// set to the same id that was sent in for the command
    /// </summary>
    public UInt32 rowsDeleted
    {
        get { return this.m_rowsDeleted; }
        set { this.m_rowsDeleted = value; }
    }

    /// <summary>
    /// number of records that were deleted for this command
    /// </summary>
    public global::ObjectStoreDP.CommandResult CommandResult
    {
        get { return this.m_CommandResult; }
        set { this.m_CommandResult = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata CommandId_meta = new Metadata();
        public static readonly Metadata rowsDeleted_meta = new Metadata();
        public static readonly Metadata CommandResult_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("DeleteResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;


            // CommandId
            CommandId_meta.name = "CommandId";
            CommandId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            CommandId_meta.default_value.string_value = "null";

            // rowsDeleted
            rowsDeleted_meta.name = "rowsDeleted";
            rowsDeleted_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            rowsDeleted_meta.default_value.uint_value = 0;

            // CommandResult
            CommandResult_meta.name = "CommandResult";
            CommandResult_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            CommandResult_meta.default_value.int_value = Convert.ToInt64(global::ObjectStoreDP.CommandResult.CommandFailed);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int CommandId = 10;
        public const int rowsDeleted = 20;
        public const int CommandResult = 30;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_CommandId = "CommandId";
        public const String s_rowsDeleted = "rowsDeleted";
        public const String s_CommandResult = "CommandResult";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public DeleteResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_CommandId = "null";
        m_rowsDeleted = 0;
        m_CommandResult = global::ObjectStoreDP.CommandResult.CommandFailed;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStoreDP.DeleteResponse cloned = new global::ObjectStoreDP.DeleteResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.DeleteResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string CommandId
        that.CommandId = this.CommandId;
        // 20: uint32 rowsDeleted
        that.rowsDeleted = this.rowsDeleted;
        // 30: ObjectStoreDP.CommandResult CommandResult
        that.CommandResult = this.CommandResult;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CommandId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.rowsDeleted = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CommandResult = (global::ObjectStoreDP.CommandResult)reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.CommandId:  // id=10
                    this.CommandId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.rowsDeleted:  // id=20
                    this.rowsDeleted = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.CommandResult:  // id=30
                    this.CommandResult = (global::ObjectStoreDP.CommandResult)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(DeleteResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.CommandId_meta.default_value.Equals(m_CommandId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CommandId, Schema.CommandId_meta);
                writer.WriteString(m_CommandId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CommandId, Schema.CommandId_meta);
        }

        if (writeAllFields || (!Schema.rowsDeleted_meta.default_value.Equals(m_rowsDeleted)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.rowsDeleted, Schema.rowsDeleted_meta);
                writer.WriteUInt32(m_rowsDeleted);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.rowsDeleted, Schema.rowsDeleted_meta);
        }

        if (writeAllFields || (!Schema.CommandResult_meta.default_value.Equals(Convert.ToInt32(m_CommandResult))))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.CommandResult, Schema.CommandResult_meta);
                writer.WriteInt32((Int32)m_CommandResult);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.CommandResult, Schema.CommandResult_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="CommandId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="rowsDeleted";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="CommandResult";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::ObjectStoreDP.CommandResult.CommandFailed);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        DeleteResponse that = obj as DeleteResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(DeleteResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(DeleteResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.CommandId == null) == (that.CommandId == null));
        equals = equals && (this.CommandId == null ? true : (this.CommandId.Length == that.CommandId.Length));
        equals = equals && ((this.rowsDeleted == that.rowsDeleted));
        equals = equals && ((this.CommandResult == that.CommandResult));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(DeleteResponse that)
    {
        bool equals = true;
        
        equals = equals && (this.CommandId == null ? true : this.CommandId == that.CommandId);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_CommandId, this.CommandId, separator);
        sb.AppendFormat(format, __internal.s_rowsDeleted, this.rowsDeleted, separator);
        sb.AppendFormat(format, __internal.s_CommandResult, this.CommandResult, separator);
        
        return sb.ToString();
    } // ToString()

}; // class DeleteResponse

/// <summary>
/// AccountCloseResponse
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class AccountCloseResponse : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional string CommandId
    private String m_CommandId;

    // 20: Optional uint32 rowsDeleted
    private UInt32 m_rowsDeleted;

    // 30: Optional ObjectStoreDP.CommandResult CommandResult
    private global::ObjectStoreDP.CommandResult m_CommandResult;

    /// <summary>
    /// CommandId
    /// </summary>
    public String CommandId
    {
        get { return this.m_CommandId; }
        set { this.m_CommandId = value; }
    }

    /// <summary>
    /// set to the same id that was sent in for the command
    /// </summary>
    public UInt32 rowsDeleted
    {
        get { return this.m_rowsDeleted; }
        set { this.m_rowsDeleted = value; }
    }

    /// <summary>
    /// number of records that were deleted for this command
    /// </summary>
    public global::ObjectStoreDP.CommandResult CommandResult
    {
        get { return this.m_CommandResult; }
        set { this.m_CommandResult = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata CommandId_meta = new Metadata();
        public static readonly Metadata rowsDeleted_meta = new Metadata();
        public static readonly Metadata CommandResult_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("AccountCloseResponse");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ObjectStoreDP." + meta.name;


            // CommandId
            CommandId_meta.name = "CommandId";
            CommandId_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            CommandId_meta.default_value.string_value = "null";

            // rowsDeleted
            rowsDeleted_meta.name = "rowsDeleted";
            rowsDeleted_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            rowsDeleted_meta.default_value.uint_value = 0;

            // CommandResult
            CommandResult_meta.name = "CommandResult";
            CommandResult_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            CommandResult_meta.default_value.int_value = Convert.ToInt64(global::ObjectStoreDP.CommandResult.CommandFailed);
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int CommandId = 10;
        public const int rowsDeleted = 20;
        public const int CommandResult = 30;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_CommandId = "CommandId";
        public const String s_rowsDeleted = "rowsDeleted";
        public const String s_CommandResult = "CommandResult";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public AccountCloseResponse()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_CommandId = "null";
        m_rowsDeleted = 0;
        m_CommandResult = global::ObjectStoreDP.CommandResult.CommandFailed;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ObjectStoreDP.AccountCloseResponse cloned = new global::ObjectStoreDP.AccountCloseResponse();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ObjectStoreDP.AccountCloseResponse that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: string CommandId
        that.CommandId = this.CommandId;
        // 20: uint32 rowsDeleted
        that.rowsDeleted = this.rowsDeleted;
        // 30: ObjectStoreDP.CommandResult CommandResult
        that.CommandResult = this.CommandResult;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CommandId = reader.ReadString();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.rowsDeleted = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.CommandResult = (global::ObjectStoreDP.CommandResult)reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.CommandId:  // id=10
                    this.CommandId = global::Microsoft.Bond.ReadHelper.ReadString(reader, type);
                    break;
                case __ordinals.rowsDeleted:  // id=20
                    this.rowsDeleted = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.CommandResult:  // id=30
                    this.CommandResult = (global::ObjectStoreDP.CommandResult)global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(AccountCloseResponse))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.CommandId_meta.default_value.Equals(m_CommandId)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CommandId, Schema.CommandId_meta);
                writer.WriteString(m_CommandId);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_STRING, __ordinals.CommandId, Schema.CommandId_meta);
        }

        if (writeAllFields || (!Schema.rowsDeleted_meta.default_value.Equals(m_rowsDeleted)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.rowsDeleted, Schema.rowsDeleted_meta);
                writer.WriteUInt32(m_rowsDeleted);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.rowsDeleted, Schema.rowsDeleted_meta);
        }

        if (writeAllFields || (!Schema.CommandResult_meta.default_value.Equals(Convert.ToInt32(m_CommandResult))))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.CommandResult, Schema.CommandResult_meta);
                writer.WriteInt32((Int32)m_CommandResult);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.CommandResult, Schema.CommandResult_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="CommandId";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.string_value = "null";
        field.type.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="rowsDeleted";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="CommandResult";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = Convert.ToInt64(global::ObjectStoreDP.CommandResult.CommandFailed);
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        AccountCloseResponse that = obj as AccountCloseResponse;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(AccountCloseResponse other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(AccountCloseResponse that)
    {
        bool equals = true;
        
        equals = equals && ((this.CommandId == null) == (that.CommandId == null));
        equals = equals && (this.CommandId == null ? true : (this.CommandId.Length == that.CommandId.Length));
        equals = equals && ((this.rowsDeleted == that.rowsDeleted));
        equals = equals && ((this.CommandResult == that.CommandResult));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(AccountCloseResponse that)
    {
        bool equals = true;
        
        equals = equals && (this.CommandId == null ? true : this.CommandId == that.CommandId);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_CommandId, this.CommandId, separator);
        sb.AppendFormat(format, __internal.s_rowsDeleted, this.rowsDeleted, separator);
        sb.AppendFormat(format, __internal.s_CommandResult, this.CommandResult, separator);
        
        return sb.ToString();
    } // ToString()

}; // class AccountCloseResponse
} // namespace ObjectStoreDP
// Keep in sync with SearchGold\deploy\builds\data\ObjectStore\Partners\System\ANNSearch\ANNSearchTypes.bond Not used in actual ANN table manifest, only used to pass the creation of ANN table in Portal
namespace ANNFileStore
{

/// <summary>
/// ANN aggregator extension request param ANN native extension rquest param
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNSearchRequest<T> : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required vector<T> vect
    private List<T> m_vect;

    // 20: Required uint32 numResults
    private UInt32 m_numResults;

    // 30: Required map<string, string> extraParams
    private Dictionary<String, String> m_extraParams;

    /// <summary>
    /// vect
    /// </summary>
    public List<T> vect
    {
        get { return this.m_vect; }
        set { this.m_vect = value; }
    }

    /// <summary>
    /// numResults
    /// </summary>
    public UInt32 numResults
    {
        get { return this.m_numResults; }
        set { this.m_numResults = value; }
    }

    /// <summary>
    /// extraParams
    /// </summary>
    public Dictionary<String, String> extraParams
    {
        get { return this.m_extraParams; }
        set { this.m_extraParams = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata vect_meta = new Metadata();
        public static readonly Metadata numResults_meta = new Metadata();
        public static readonly Metadata extraParams_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNSearchRequest");
            runtimeName.Append("<");
            runtimeName.Append(GenericHelper.GetIdlTypeName(typeof(T)));
            runtimeName.Append(">");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // vect
            vect_meta.name = "vect";
            vect_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // numResults
            numResults_meta.name = "numResults";
            numResults_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            numResults_meta.default_value.uint_value = 0;

            // extraParams
            extraParams_meta.name = "extraParams";
            extraParams_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int vect = 10;
        public const int numResults = 20;
        public const int extraParams = 30;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_vect = "vect";
        public const String s_numResults = "numResults";
        public const String s_extraParams = "extraParams";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNSearchRequest()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_vect == null)
        {
            m_vect = new List<T>();
        }
        else
        {
            m_vect.Clear();
        }
        m_numResults = 0;
        if (m_extraParams == null)
        {
            m_extraParams = new Dictionary<String, String>();
        }
        else
        {
            m_extraParams.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNSearchRequest<T> cloned = new global::ANNFileStore.ANNSearchRequest<T>();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNSearchRequest<T> that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: vector<T> vect
        if (this.vect != null)
        {
            if (that.vect == null)
            {
                that.vect = new List<T>();
            }
            else
            {
                that.vect.Clear();
            }
            foreach (var iter1 in this.vect)
            {
                T tmpItem2 = default(T);
                tmpItem2 = (T)global::Microsoft.Bond.GenericHelper.Clone(iter1);
                that.vect.Add(tmpItem2);
            }
        }
        else
        {
            that.vect = null;
        }
        // 20: uint32 numResults
        that.numResults = this.numResults;
        // 30: map<string, string> extraParams
        if (this.extraParams != null)
        {
            if (that.extraParams == null)
            {
                that.extraParams = new Dictionary<String, String>();
            }
            else
            {
                that.extraParams.Clear();
            }
            foreach (var keyValPair3 in this.extraParams)
            {
                String key4 = default(String);
                String val5 = default(String);
                key4 = keyValPair3.Key;
                val5 = keyValPair3.Value;
                that.extraParams[key4] = val5;
            }
        }
        else
        {
            that.extraParams = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_vect(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"vect\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.numResults = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"numResults\", id=20");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_extraParams(reader, global::Microsoft.Bond.BondDataType.BT_MAP);
        }
        else
        {
            throw new BondException("Missing required field \"extraParams\", id=30");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(31);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.vect:  // id=10
                    this.ReadField_impl_vect(reader, type);
                    seenRequiredFields.Set(__ordinals.vect, true);
                    break;
                case __ordinals.numResults:  // id=20
                    this.numResults = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.numResults, true);
                    break;
                case __ordinals.extraParams:  // id=30
                    this.ReadField_impl_extraParams(reader, type);
                    seenRequiredFields.Set(__ordinals.extraParams, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_vect(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        if (this.m_vect.Capacity < count2)
        {
            this.m_vect.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            T element3 = default(T);
             
            global::Microsoft.Bond.GenericHelper.Read<T>(ref element3, reader, elemType1);
            this.m_vect.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_vect


    private void ReadField_impl_extraParams(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_MAP);
 
        
        BondDataType keyType1, valueType2;
    
        UInt32 count3;
    
        reader.ReadContainerBegin(out count3, out keyType1, out valueType2);
    
        for (UInt32 i4 = 0; i4 < count3; i4++)
        {
            String key5 = default(String);
            String val6 = default(String);
    
            // Read key
             
            key5 = global::Microsoft.Bond.ReadHelper.ReadString(reader, keyType1);
    
            // Read value
             
            val6 = global::Microsoft.Bond.ReadHelper.ReadString(reader, valueType2);
            //
            this.m_extraParams[key5] = val6;
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_extraParams


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.vect))
        {
            ok = false;
            missingFieldName = "vect";
            missingFieldId = __ordinals.vect;
        }
        if (ok && !seenFields.Get(__ordinals.numResults))
        {
            ok = false;
            missingFieldName = "numResults";
            missingFieldId = __ordinals.numResults;
        }
        if (ok && !seenFields.Get(__ordinals.extraParams))
        {
            ok = false;
            missingFieldName = "extraParams";
            missingFieldId = __ordinals.extraParams;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNSearchRequest<T>))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.vect, Schema.vect_meta);
            UInt32 count2 = (m_vect == null ? 0 : (UInt32)m_vect.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.GenericHelper.GetBondDataType(typeof(T)));
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                        global::Microsoft.Bond.GenericHelper.Write(writer, m_vect[idx1], typeof(T));
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.numResults, Schema.numResults_meta);
            writer.WriteUInt32(m_numResults);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_MAP, __ordinals.extraParams, Schema.extraParams_meta);
            UInt32 count4 = (m_extraParams == null ? 0 : (UInt32)m_extraParams.Count);
            writer.WriteContainerBegin(count4, global::Microsoft.Bond.BondDataType.BT_STRING, global::Microsoft.Bond.BondDataType.BT_STRING);
            foreach (var iter3 in m_extraParams)
            {
                // Key
                    writer.WriteString(iter3.Key);
                // Value
                    writer.WriteString(iter3.Value);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="vect";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = GenericHelper.CreateTypeDef(schema, typeof (T));

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="numResults";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="extraParams";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_MAP;
        field.type.key = new global::Microsoft.Bond.TypeDef();
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.key.id = global::Microsoft.Bond.BondDataType.BT_STRING;
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_STRING;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNSearchRequest<T> that = obj as ANNSearchRequest<T>;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNSearchRequest<T> other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNSearchRequest<T> that)
    {
        bool equals = true;
        
        equals = equals && ((this.vect == null) == (that.vect == null));
        equals = equals && ((this.vect == null) ? true : (this.vect.Count == that.vect.Count));
        equals = equals && ((this.numResults == that.numResults));
        equals = equals && ((this.extraParams == null) == (that.extraParams == null));
        equals = equals && ((this.extraParams == null) ? true : (this.extraParams.Count == that.extraParams.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNSearchRequest<T> that)
    {
        bool equals = true;
        
        if (equals && this.vect != null && this.vect.Count != 0)
        {
            var enum_1_1 = this.vect.GetEnumerator();
            var enum_2_2 = that.vect.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && (global::Microsoft.Bond.GenericHelper.Compare(enum_1_1.Current, enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        if (equals && this.extraParams != null && this.extraParams.Count != 0)
        {
            foreach (var keyValPair3 in this.extraParams)
            {
                String val4 = default(String);
                equals = equals && that.extraParams.TryGetValue(keyValPair3.Key, out val4);
                if (equals)
                {
                        equals = equals && ((val4 == null) == (keyValPair3.Value == null));
                    equals = equals && (val4 == null ? true : (val4.Length == keyValPair3.Value.Length));
                    equals = equals && (val4 == null ? true : val4 == keyValPair3.Value);
                }
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_vect, DumpList(this.vect), separator);
        sb.AppendFormat(format, __internal.s_numResults, this.numResults, separator);
        sb.AppendFormat(format, __internal.s_extraParams, this.extraParams, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class ANNSearchRequest<T>

/// <summary>
/// ANNMetadataKey
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNMetadataKey : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required int64 metadataIndex
    private Int64 m_metadataIndex;

    /// <summary>
    /// metadataIndex
    /// </summary>
    public Int64 metadataIndex
    {
        get { return this.m_metadataIndex; }
        set { this.m_metadataIndex = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata metadataIndex_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNMetadataKey");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // metadataIndex
            metadataIndex_meta.name = "metadataIndex";
            metadataIndex_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            metadataIndex_meta.default_value.int_value = -1;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int metadataIndex = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_metadataIndex = "metadataIndex";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNMetadataKey()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_metadataIndex = -1;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNMetadataKey cloned = new global::ANNFileStore.ANNMetadataKey();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNMetadataKey that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: int64 metadataIndex
        that.metadataIndex = this.metadataIndex;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.metadataIndex = reader.ReadInt64();
        }
        else
        {
            throw new BondException("Missing required field \"metadataIndex\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.metadataIndex:  // id=10
                    this.metadataIndex = global::Microsoft.Bond.ReadHelper.ReadInt64(reader, type);
                    seenRequiredFields.Set(__ordinals.metadataIndex, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.metadataIndex))
        {
            ok = false;
            missingFieldName = "metadataIndex";
            missingFieldId = __ordinals.metadataIndex;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNMetadataKey))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT64, __ordinals.metadataIndex, Schema.metadataIndex_meta);
            writer.WriteInt64(m_metadataIndex);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="metadataIndex";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = -1;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT64;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNMetadataKey that = obj as ANNMetadataKey;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNMetadataKey other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNMetadataKey that)
    {
        bool equals = true;
        
        equals = equals && ((this.metadataIndex == that.metadataIndex));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNMetadataKey that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_metadataIndex, this.metadataIndex, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ANNMetadataKey

/// <summary>
/// ANNMetadataVal
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNMetadataVal : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required blob metadata
    private BondBlob m_metadata;

    /// <summary>
    /// metadata
    /// </summary>
    public BondBlob metadata
    {
        get { return this.m_metadata; }
        set { this.m_metadata = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata metadata_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNMetadataVal");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // metadata
            metadata_meta.name = "metadata";
            metadata_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int metadata = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_metadata = "metadata";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNMetadataVal()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_metadata = new BondBlob();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNMetadataVal cloned = new global::ANNFileStore.ANNMetadataVal();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNMetadataVal that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: blob metadata
        that.metadata = this.metadata.CloneData();
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.metadata = this.metadata.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"metadata\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.metadata:  // id=10
                    this.metadata = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.metadata, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.metadata))
        {
            ok = false;
            missingFieldName = "metadata";
            missingFieldId = __ordinals.metadata;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNMetadataVal))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.metadata, Schema.metadata_meta);
            UInt32 count1 = m_metadata.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_metadata.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="metadata";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNMetadataVal that = obj as ANNMetadataVal;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNMetadataVal other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNMetadataVal that)
    {
        bool equals = true;
        
        equals = equals && (this.metadata.GetCount() == that.metadata.GetCount());
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNMetadataVal that)
    {
        bool equals = true;
        
        equals = equals && this.metadata.CompareData(that.metadata);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_metadata, this.metadata, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ANNMetadataVal

/// <summary>
/// Metadata could be loaded in-memory as part of ANN store or could be collocated in separate metadata store metadataKey.metadataIndex will be set to -1 if metadata is part of ANN store
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNSearchIndexResult : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required float score
    private Single m_score;

    // 20: Optional ANNFileStore.ANNMetadataKey metadataKey
    private global::ANNFileStore.ANNMetadataKey m_metadataKey;

    // 30: Optional ANNFileStore.ANNMetadataVal metadataVal
    private global::ANNFileStore.ANNMetadataVal m_metadataVal;

    /// <summary>
    /// score
    /// </summary>
    public Single score
    {
        get { return this.m_score; }
        set { this.m_score = value; }
    }

    /// <summary>
    /// metadataKey
    /// </summary>
    public global::ANNFileStore.ANNMetadataKey metadataKey
    {
        get { return this.m_metadataKey; }
        set { this.m_metadataKey = value; }
    }

    /// <summary>
    /// metadataVal
    /// </summary>
    public global::ANNFileStore.ANNMetadataVal metadataVal
    {
        get { return this.m_metadataVal; }
        set { this.m_metadataVal = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata score_meta = new Metadata();
        public static readonly Metadata metadataKey_meta = new Metadata();
        public static readonly Metadata metadataVal_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNSearchIndexResult");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // score
            score_meta.name = "score";
            score_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            score_meta.default_value.double_value = 0;

            // metadataKey
            metadataKey_meta.name = "metadataKey";
            metadataKey_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            // metadataVal
            metadataVal_meta.name = "metadataVal";
            metadataVal_meta.modifier = global::Microsoft.Bond.Modifier.Optional;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int score = 10;
        public const int metadataKey = 20;
        public const int metadataVal = 30;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_score = "score";
        public const String s_metadataKey = "metadataKey";
        public const String s_metadataVal = "metadataVal";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNSearchIndexResult()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_score = 0F;
        m_metadataKey = new global::ANNFileStore.ANNMetadataKey();
        m_metadataVal = new global::ANNFileStore.ANNMetadataVal();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNSearchIndexResult cloned = new global::ANNFileStore.ANNSearchIndexResult();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNSearchIndexResult that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: float score
        that.score = this.score;
        // 20: ANNFileStore.ANNMetadataKey metadataKey
        that.metadataKey = (this.metadataKey == null ? null : (global::ANNFileStore.ANNMetadataKey)this.metadataKey.Clone());
        // 30: ANNFileStore.ANNMetadataVal metadataVal
        that.metadataVal = (this.metadataVal == null ? null : (global::ANNFileStore.ANNMetadataVal)this.metadataVal.Clone());
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.score = reader.ReadFloat();
        }
        else
        {
            throw new BondException("Missing required field \"score\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.metadataKey.Read(reader);
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.metadataVal.Read(reader);
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.score:  // id=10
                    this.score = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    seenRequiredFields.Set(__ordinals.score, true);
                    break;
                case __ordinals.metadataKey:  // id=20
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.metadataKey.Read(reader);
                    break;
                case __ordinals.metadataVal:  // id=30
                    global::Microsoft.Bond.ReadHelper.ValidateType(type, global::Microsoft.Bond.BondDataType.BT_STRUCT);
                    this.metadataVal.Read(reader);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.score))
        {
            ok = false;
            missingFieldName = "score";
            missingFieldId = __ordinals.score;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNSearchIndexResult))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.score, Schema.score_meta);
            writer.WriteFloat(m_score);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.metadataKey, Schema.metadataKey_meta);
            m_metadataKey.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_STRUCT, __ordinals.metadataVal, Schema.metadataVal_meta);
            m_metadataVal.Write(writer, true);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="score";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="metadataKey";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::ANNFileStore.ANNMetadataKey.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="metadataVal";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.type = global::ANNFileStore.ANNMetadataVal.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNSearchIndexResult that = obj as ANNSearchIndexResult;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNSearchIndexResult other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNSearchIndexResult that)
    {
        bool equals = true;
        
        equals = equals && ((Single.IsNaN(this.score) ? Single.IsNaN(that.score) : (this.score == that.score)));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNSearchIndexResult that)
    {
        bool equals = true;
        
        equals = equals && (this.metadataKey == null ? true : this.metadataKey.MemberwiseCompare(that.metadataKey));
        equals = equals && (this.metadataVal == null ? true : this.metadataVal.MemberwiseCompare(that.metadataVal));
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_score, this.score, separator);
        sb.AppendFormat(format, __internal.s_metadataKey, this.metadataKey, separator);
        sb.AppendFormat(format, __internal.s_metadataVal, this.metadataVal, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ANNSearchIndexResult

/// <summary>
/// ANN File store value type Key : ANNPartitionId
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNSearchIndexResults : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required vector<ANNFileStore.ANNSearchIndexResult> results
    private List<global::ANNFileStore.ANNSearchIndexResult> m_results;

    /// <summary>
    /// results
    /// </summary>
    public List<global::ANNFileStore.ANNSearchIndexResult> results
    {
        get { return this.m_results; }
        set { this.m_results = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata results_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNSearchIndexResults");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // results
            results_meta.name = "results";
            results_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int results = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_results = "results";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNSearchIndexResults()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_results == null)
        {
            m_results = new List<global::ANNFileStore.ANNSearchIndexResult>();
        }
        else
        {
            m_results.Clear();
        }
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNSearchIndexResults cloned = new global::ANNFileStore.ANNSearchIndexResults();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNSearchIndexResults that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: vector<ANNFileStore.ANNSearchIndexResult> results
        if (this.results != null)
        {
            if (that.results == null)
            {
                that.results = new List<global::ANNFileStore.ANNSearchIndexResult>();
            }
            else
            {
                that.results.Clear();
            }
            foreach (var iter1 in this.results)
            {
                global::ANNFileStore.ANNSearchIndexResult tmpItem2 = default(global::ANNFileStore.ANNSearchIndexResult);
                tmpItem2 = (iter1 == null ? null : (global::ANNFileStore.ANNSearchIndexResult)iter1.Clone());
                that.results.Add(tmpItem2);
            }
        }
        else
        {
            that.results = null;
        }
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_results(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"results\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.results:  // id=10
                    this.ReadField_impl_results(reader, type);
                    seenRequiredFields.Set(__ordinals.results, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_results(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_results.Capacity < count2)
        {
            this.m_results.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::ANNFileStore.ANNSearchIndexResult element3 = new global::ANNFileStore.ANNSearchIndexResult();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_results.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_results


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.results))
        {
            ok = false;
            missingFieldName = "results";
            missingFieldId = __ordinals.results;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNSearchIndexResults))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.results, Schema.results_meta);
            UInt32 count2 = (m_results == null ? 0 : (UInt32)m_results.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_results[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="results";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::ANNFileStore.ANNSearchIndexResult.GetTypeDef(schema);

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNSearchIndexResults that = obj as ANNSearchIndexResults;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNSearchIndexResults other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNSearchIndexResults that)
    {
        bool equals = true;
        
        equals = equals && ((this.results == null) == (that.results == null));
        equals = equals && ((this.results == null) ? true : (this.results.Count == that.results.Count));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNSearchIndexResults that)
    {
        bool equals = true;
        
        if (equals && this.results != null && this.results.Count != 0)
        {
            var enum_1_1 = this.results.GetEnumerator();
            var enum_2_2 = that.results.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_results, DumpList(this.results), separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class ANNSearchIndexResults

/// <summary>
/// ANNSearchValue
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNSearchValue : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required float score
    private Single m_score;

    // 20: Required blob metadataBlob
    private BondBlob m_metadataBlob;

    /// <summary>
    /// score
    /// </summary>
    public Single score
    {
        get { return this.m_score; }
        set { this.m_score = value; }
    }

    /// <summary>
    /// metadataBlob
    /// </summary>
    public BondBlob metadataBlob
    {
        get { return this.m_metadataBlob; }
        set { this.m_metadataBlob = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata score_meta = new Metadata();
        public static readonly Metadata metadataBlob_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNSearchValue");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // score
            score_meta.name = "score";
            score_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            score_meta.default_value.double_value = 0;

            // metadataBlob
            metadataBlob_meta.name = "metadataBlob";
            metadataBlob_meta.modifier = global::Microsoft.Bond.Modifier.Required;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int score = 10;
        public const int metadataBlob = 20;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_score = "score";
        public const String s_metadataBlob = "metadataBlob";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNSearchValue()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_score = 0F;
        m_metadataBlob = new BondBlob();
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNSearchValue cloned = new global::ANNFileStore.ANNSearchValue();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNSearchValue that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: float score
        that.score = this.score;
        // 20: blob metadataBlob
        that.metadataBlob = this.metadataBlob.CloneData();
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.score = reader.ReadFloat();
        }
        else
        {
            throw new BondException("Missing required field \"score\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.metadataBlob = this.metadataBlob.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
        }
        else
        {
            throw new BondException("Missing required field \"metadataBlob\", id=20");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(21);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.score:  // id=10
                    this.score = global::Microsoft.Bond.ReadHelper.ReadFloat(reader, type);
                    seenRequiredFields.Set(__ordinals.score, true);
                    break;
                case __ordinals.metadataBlob:  // id=20
                    this.metadataBlob = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                    seenRequiredFields.Set(__ordinals.metadataBlob, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.score))
        {
            ok = false;
            missingFieldName = "score";
            missingFieldId = __ordinals.score;
        }
        if (ok && !seenFields.Get(__ordinals.metadataBlob))
        {
            ok = false;
            missingFieldName = "metadataBlob";
            missingFieldId = __ordinals.metadataBlob;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNSearchValue))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_FLOAT, __ordinals.score, Schema.score_meta);
            writer.WriteFloat(m_score);
        writer.WriteFieldEnd();
        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.metadataBlob, Schema.metadataBlob_meta);
            UInt32 count1 = m_metadataBlob.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_metadataBlob.GetData());
        
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="score";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_FLOAT;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="metadataBlob";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNSearchValue that = obj as ANNSearchValue;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNSearchValue other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNSearchValue that)
    {
        bool equals = true;
        
        equals = equals && ((Single.IsNaN(this.score) ? Single.IsNaN(that.score) : (this.score == that.score)));
        equals = equals && (this.metadataBlob.GetCount() == that.metadataBlob.GetCount());
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNSearchValue that)
    {
        bool equals = true;
        
        equals = equals && this.metadataBlob.CompareData(that.metadataBlob);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_score, this.score, separator);
        sb.AppendFormat(format, __internal.s_metadataBlob, this.metadataBlob, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ANNSearchValue

/// <summary>
/// key for SearchAggregator extension (dummy key)
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNPartitionId : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required uint32 id
    private UInt32 m_id;

    /// <summary>
    /// id
    /// </summary>
    public UInt32 id
    {
        get { return this.m_id; }
        set { this.m_id = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata id_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNPartitionId");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // id
            id_meta.name = "id";
            id_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            id_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int id = 10;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_id = "id";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNPartitionId()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_id = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNPartitionId cloned = new global::ANNFileStore.ANNPartitionId();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNPartitionId that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: uint32 id
        that.id = this.id;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.id = reader.ReadUInt32();
        }
        else
        {
            throw new BondException("Missing required field \"id\", id=10");
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.id:  // id=10
                    this.id = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    seenRequiredFields.Set(__ordinals.id, true);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.id))
        {
            ok = false;
            missingFieldName = "id";
            missingFieldId = __ordinals.id;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNPartitionId))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.id, Schema.id_meta);
            writer.WriteUInt32(m_id);
        writer.WriteFieldEnd();
        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="id";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNPartitionId that = obj as ANNPartitionId;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNPartitionId other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNPartitionId that)
    {
        bool equals = true;
        
        equals = equals && ((this.id == that.id));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNPartitionId that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_id, this.id, separator);
        
        return sb.ToString();
    } // ToString()

}; // class ANNPartitionId

/// <summary>
/// ANN extension value type
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class ANNSearchResult : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Required vector<ANNFileStore.ANNSearchValue> results
    private List<global::ANNFileStore.ANNSearchValue> m_results;

    // 20: Optional uint32 totalPartitionCount
    private UInt32 m_totalPartitionCount;

    // 30: Optional uint32 failedPartitionCount
    private UInt32 m_failedPartitionCount;

    /// <summary>
    /// results
    /// </summary>
    public List<global::ANNFileStore.ANNSearchValue> results
    {
        get { return this.m_results; }
        set { this.m_results = value; }
    }

    /// <summary>
    /// totalPartitionCount
    /// </summary>
    public UInt32 totalPartitionCount
    {
        get { return this.m_totalPartitionCount; }
        set { this.m_totalPartitionCount = value; }
    }

    /// <summary>
    /// failedPartitionCount
    /// </summary>
    public UInt32 failedPartitionCount
    {
        get { return this.m_failedPartitionCount; }
        set { this.m_failedPartitionCount = value; }
    }

    /// <summary>
    /// GetFullyQualifiedName
    /// </summary>
    public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
        public static readonly Metadata meta = new Metadata();
        public static readonly Metadata results_meta = new Metadata();
        public static readonly Metadata totalPartitionCount_meta = new Metadata();
        public static readonly Metadata failedPartitionCount_meta = new Metadata();

        static Schema()
        {
            StringBuilder runtimeName = new StringBuilder();
            runtimeName.Append("ANNSearchResult");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "ANNFileStore." + meta.name;


            // results
            results_meta.name = "results";
            results_meta.modifier = global::Microsoft.Bond.Modifier.Required;

            // totalPartitionCount
            totalPartitionCount_meta.name = "totalPartitionCount";
            totalPartitionCount_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            totalPartitionCount_meta.default_value.uint_value = 0;

            // failedPartitionCount
            failedPartitionCount_meta.name = "failedPartitionCount";
            failedPartitionCount_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            failedPartitionCount_meta.default_value.uint_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int results = 10;
        public const int totalPartitionCount = 20;
        public const int failedPartitionCount = 30;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_results = "results";
        public const String s_totalPartitionCount = "totalPartitionCount";
        public const String s_failedPartitionCount = "failedPartitionCount";
    }   // ~__internal

    /// <summary>
    /// Constructor
    /// </summary>
    public ANNSearchResult()
    {
        Reset();
    }

    /// <summary>
    /// Reset instance and re-initialize the members.
    /// </summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    /// <summary>
    /// Reset
    /// </summary>
    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        if (m_results == null)
        {
            m_results = new List<global::ANNFileStore.ANNSearchValue>();
        }
        else
        {
            m_results.Clear();
        }
        m_totalPartitionCount = 0;
        m_failedPartitionCount = 0;
    } // ResetImpl()

    /// <summary>
    /// Clone
    /// </summary>
    public virtual IBondSerializable Clone()
    {
        global::ANNFileStore.ANNSearchResult cloned = new global::ANNFileStore.ANNSearchResult();
        CopyTo(cloned);
        return cloned;
    }

    /// <summary>
    /// CopyTo
    /// </summary>
    public void CopyTo(global::ANNFileStore.ANNSearchResult that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: vector<ANNFileStore.ANNSearchValue> results
        if (this.results != null)
        {
            if (that.results == null)
            {
                that.results = new List<global::ANNFileStore.ANNSearchValue>();
            }
            else
            {
                that.results.Clear();
            }
            foreach (var iter1 in this.results)
            {
                global::ANNFileStore.ANNSearchValue tmpItem2 = default(global::ANNFileStore.ANNSearchValue);
                tmpItem2 = (iter1 == null ? null : (global::ANNFileStore.ANNSearchValue)iter1.Clone());
                that.results.Add(tmpItem2);
            }
        }
        else
        {
            that.results = null;
        }
        // 20: uint32 totalPartitionCount
        that.totalPartitionCount = this.totalPartitionCount;
        // 30: uint32 failedPartitionCount
        that.failedPartitionCount = this.failedPartitionCount;
    }    // ~CopyTo


    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    /// <summary>
    /// Unmarshal
    /// </summary>
    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
            {
                reader = reader.Clone();
            }
            
            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    /// <summary>
    /// Read
    /// </summary>
    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    /// <summary>
    /// ReadUntagged
    /// </summary>
    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.ReadField_impl_results(reader, global::Microsoft.Bond.BondDataType.BT_LIST);
        }
        else
        {
            throw new BondException("Missing required field \"results\", id=10");
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.totalPartitionCount = reader.ReadUInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.failedPartitionCount = reader.ReadUInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    /// <summary>
    /// Read
    /// </summary>
    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();
        BitArray seenRequiredFields = new BitArray(11);

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.results:  // id=10
                    this.ReadField_impl_results(reader, type);
                    seenRequiredFields.Set(__ordinals.results, true);
                    break;
                case __ordinals.totalPartitionCount:  // id=20
                    this.totalPartitionCount = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                case __ordinals.failedPartitionCount:  // id=30
                    this.failedPartitionCount = global::Microsoft.Bond.ReadHelper.ReadUInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

        CheckRequiredFieldsAreSeen(seenRequiredFields);
    }   // ~Read()


    private void ReadField_impl_results(global::Microsoft.Bond.IProtocolReader reader, global::Microsoft.Bond.BondDataType typeInPayload)
    {
        global::Microsoft.Bond.ReadHelper.ValidateType(typeInPayload, global::Microsoft.Bond.BondDataType.BT_LIST);
 
        BondDataType elemType1;
        UInt32 count2;
    
        reader.ReadContainerBegin(out count2, out elemType1);
        global::Microsoft.Bond.ReadHelper.ValidateType(elemType1, global::Microsoft.Bond.BondDataType.BT_STRUCT);
        if (this.m_results.Capacity < count2)
        {
            this.m_results.Capacity = (int)count2;
        }
    
        for (UInt32 i4 = 0; i4 < count2; i4++)
        {
            global::ANNFileStore.ANNSearchValue element3 = new global::ANNFileStore.ANNSearchValue();
             
            ReadHelper.ReadStruct(reader, element3, elemType1);
            this.m_results.Add(element3);
        }
    
        reader.ReadContainerEnd();
    } // ReadField_impl_results


    private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
    {
        string missingFieldName = null;
        UInt16 missingFieldId = UInt16.MaxValue;
        bool ok = true;
        
        if (ok && !seenFields.Get(__ordinals.results))
        {
            ok = false;
            missingFieldName = "results";
            missingFieldId = __ordinals.results;
        }
        
        if (!ok)
        {
            throw new BondException("Missing required field \""+missingFieldName+"\", id="+missingFieldId);
        }
    }

    /// <summary>
    /// Marshal
    /// </summary>
    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    /// <summary>
    /// Write
    /// </summary>
    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    /// <summary>
    /// Write
    /// </summary>
    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
    {
        if (type == typeof(ANNSearchResult))
        {
            Write(writer, true);
        }
    }

    /// <summary>
    /// WriteInternal
    /// </summary>
    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.results, Schema.results_meta);
            UInt32 count2 = (m_results == null ? 0 : (UInt32)m_results.Count);
            writer.WriteContainerBegin(count2, global::Microsoft.Bond.BondDataType.BT_STRUCT);
            for (int idx1 = 0; idx1 < count2; idx1++)
            {
                    m_results[idx1].Write(writer, true);
            }
            writer.WriteContainerEnd();
        writer.WriteFieldEnd();
        if (writeAllFields || (!Schema.totalPartitionCount_meta.default_value.Equals(m_totalPartitionCount)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.totalPartitionCount, Schema.totalPartitionCount_meta);
                writer.WriteUInt32(m_totalPartitionCount);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.totalPartitionCount, Schema.totalPartitionCount_meta);
        }

        if (writeAllFields || (!Schema.failedPartitionCount_meta.default_value.Equals(m_failedPartitionCount)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.failedPartitionCount, Schema.failedPartitionCount_meta);
                writer.WriteUInt32(m_failedPartitionCount);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_UINT32, __ordinals.failedPartitionCount, Schema.failedPartitionCount_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    /// <summary>
    /// GetSchema
    /// </summary>
    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    /// <summary>
    /// GetRuntimeSchema
    /// </summary>
    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    /// <summary>
    /// GetTypeDef
    /// </summary>
    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="results";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
        field.metadata.default_value.nothing = false;

        field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
        field.type.element = new global::Microsoft.Bond.TypeDef();
        field.type.element = global::ANNFileStore.ANNSearchValue.GetTypeDef(schema);

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="totalPartitionCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="failedPartitionCount";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.uint_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_UINT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        ANNSearchResult that = obj as ANNSearchResult;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    /// <summary>
    /// MemberwiseCompare
    /// </summary>
    public bool MemberwiseCompare(ANNSearchResult other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    /// <summary>
    /// MemberwiseCompareQuick
    /// </summary>
    protected bool MemberwiseCompareQuick(ANNSearchResult that)
    {
        bool equals = true;
        
        equals = equals && ((this.results == null) == (that.results == null));
        equals = equals && ((this.results == null) ? true : (this.results.Count == that.results.Count));
        equals = equals && ((this.totalPartitionCount == that.totalPartitionCount));
        equals = equals && ((this.failedPartitionCount == that.failedPartitionCount));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    /// <summary>
    /// MemberwiseCompareDeep
    /// </summary>
    protected bool MemberwiseCompareDeep(ANNSearchResult that)
    {
        bool equals = true;
        
        if (equals && this.results != null && this.results.Count != 0)
        {
            var enum_1_1 = this.results.GetEnumerator();
            var enum_2_2 = that.results.GetEnumerator();
            while (enum_1_1.MoveNext() && enum_2_2.MoveNext())
            {
                    equals = equals && ((enum_1_1.Current == null) == (enum_2_2.Current == null));
                equals = equals && (enum_1_1.Current == null ? true : enum_1_1.Current.MemberwiseCompare(enum_2_2.Current));
                if (!equals)
                {
                    break;
                }
            }
        }
        return equals;
    }    // ~MemberwiseCompareDeep
    
    /// <summary>
    /// ToString
    /// </summary>
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    /// <summary>
    /// ToString
    /// </summary>
    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_results, DumpList(this.results), separator);
        sb.AppendFormat(format, __internal.s_totalPartitionCount, this.totalPartitionCount, separator);
        sb.AppendFormat(format, __internal.s_failedPartitionCount, this.failedPartitionCount, separator);
        
        return sb.ToString();
    } // ToString()

    private string DumpList<T_DumpList_Type>(IEnumerable<T_DumpList_Type> list)
    {
        if (list == null)
        {
            return "-";
        }
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        bool isFirst = true;
        foreach (var item in list)
        {
            if (!isFirst)
            {
                sb.Append(';');
            }
            
            sb.Append(item.ToString());
            isFirst = false;
        }
        
        return sb.ToString();
    }
}; // class ANNSearchResult
} // namespace ANNFileStore
